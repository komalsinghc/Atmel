
STARTER_KIT_DEMO6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d68  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409d68  00409d68  00011d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000cb4  20000000  00409d70  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000035c  20000cb4  0040aa24  00018cb4  2**2
                  ALLOC
  4 .stack        00003000  20001010  0040ad80  00018cb4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00018cb4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018cde  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001aae5  00000000  00000000  00018d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000409a  00000000  00000000  0003381e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001208  00000000  00000000  000378b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00019cef  00000000  00000000  00038ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016b45  00000000  00000000  000527af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005c148  00000000  00000000  000692f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000109ba  00000000  00000000  000c543c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001310  00000000  00000000  000d5df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000031d8  00000000  00000000  000d7108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20004010 	.word	0x20004010
  400004:	00402195 	.word	0x00402195
  400008:	00402191 	.word	0x00402191
  40000c:	00402191 	.word	0x00402191
  400010:	00402191 	.word	0x00402191
  400014:	00402191 	.word	0x00402191
  400018:	00402191 	.word	0x00402191
	...
  40002c:	00402191 	.word	0x00402191
  400030:	00402191 	.word	0x00402191
  400034:	00000000 	.word	0x00000000
  400038:	00402191 	.word	0x00402191
  40003c:	00402191 	.word	0x00402191
  400040:	00402191 	.word	0x00402191
  400044:	00402191 	.word	0x00402191
  400048:	00402191 	.word	0x00402191
  40004c:	00402191 	.word	0x00402191
  400050:	00402191 	.word	0x00402191
  400054:	00402191 	.word	0x00402191
  400058:	00402191 	.word	0x00402191
  40005c:	00402191 	.word	0x00402191
  400060:	00402191 	.word	0x00402191
  400064:	00402191 	.word	0x00402191
  400068:	00000000 	.word	0x00000000
  40006c:	00401c89 	.word	0x00401c89
  400070:	00401c9d 	.word	0x00401c9d
  400074:	00401cb1 	.word	0x00401cb1
  400078:	00402191 	.word	0x00402191
  40007c:	00402191 	.word	0x00402191
	...
  400088:	00402191 	.word	0x00402191
  40008c:	00402191 	.word	0x00402191
  400090:	00402191 	.word	0x00402191
  400094:	00402191 	.word	0x00402191
  400098:	00402191 	.word	0x00402191
  40009c:	00402191 	.word	0x00402191
  4000a0:	00402191 	.word	0x00402191
  4000a4:	00402191 	.word	0x00402191
  4000a8:	00402191 	.word	0x00402191
  4000ac:	00402191 	.word	0x00402191
  4000b0:	00402191 	.word	0x00402191
  4000b4:	00402191 	.word	0x00402191
  4000b8:	00402191 	.word	0x00402191
  4000bc:	00402191 	.word	0x00402191
  4000c0:	00402191 	.word	0x00402191
  4000c4:	00402191 	.word	0x00402191
  4000c8:	00402191 	.word	0x00402191

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000cb4 	.word	0x20000cb4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00409d70 	.word	0x00409d70

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	00409d70 	.word	0x00409d70
  400114:	20000cb8 	.word	0x20000cb8
  400118:	00409d70 	.word	0x00409d70
  40011c:	00000000 	.word	0x00000000

00400120 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400120:	b570      	push	{r4, r5, r6, lr}
  400122:	b082      	sub	sp, #8
  400124:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400126:	ac02      	add	r4, sp, #8
  400128:	2302      	movs	r3, #2
  40012a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40012e:	4d09      	ldr	r5, [pc, #36]	; (400154 <ssd1306_write_command+0x34>)
  400130:	4628      	mov	r0, r5
  400132:	4621      	mov	r1, r4
  400134:	4b08      	ldr	r3, [pc, #32]	; (400158 <ssd1306_write_command+0x38>)
  400136:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400138:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40013c:	4b07      	ldr	r3, [pc, #28]	; (40015c <ssd1306_write_command+0x3c>)
  40013e:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400140:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  400142:	2056      	movs	r0, #86	; 0x56
  400144:	4b06      	ldr	r3, [pc, #24]	; (400160 <ssd1306_write_command+0x40>)
  400146:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400148:	4628      	mov	r0, r5
  40014a:	4621      	mov	r1, r4
  40014c:	4b05      	ldr	r3, [pc, #20]	; (400164 <ssd1306_write_command+0x44>)
  40014e:	4798      	blx	r3
#endif
}
  400150:	b002      	add	sp, #8
  400152:	bd70      	pop	{r4, r5, r6, pc}
  400154:	40008000 	.word	0x40008000
  400158:	004015a9 	.word	0x004015a9
  40015c:	400e1200 	.word	0x400e1200
  400160:	20000001 	.word	0x20000001
  400164:	004015d9 	.word	0x004015d9

00400168 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  400168:	b5f0      	push	{r4, r5, r6, r7, lr}
  40016a:	b085      	sub	sp, #20
  40016c:	4d25      	ldr	r5, [pc, #148]	; (400204 <ssd1306_init+0x9c>)
  40016e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  400172:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  400174:	2056      	movs	r0, #86	; 0x56
  400176:	4c24      	ldr	r4, [pc, #144]	; (400208 <ssd1306_init+0xa0>)
  400178:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40017a:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  40017c:	2056      	movs	r0, #86	; 0x56
  40017e:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  400180:	2702      	movs	r7, #2
  400182:	ae04      	add	r6, sp, #16
  400184:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  400188:	4c20      	ldr	r4, [pc, #128]	; (40020c <ssd1306_init+0xa4>)
  40018a:	4620      	mov	r0, r4
  40018c:	4b20      	ldr	r3, [pc, #128]	; (400210 <ssd1306_init+0xa8>)
  40018e:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  400190:	2500      	movs	r5, #0
  400192:	9500      	str	r5, [sp, #0]
  400194:	4620      	mov	r0, r4
  400196:	4631      	mov	r1, r6
  400198:	462a      	mov	r2, r5
  40019a:	4b1e      	ldr	r3, [pc, #120]	; (400214 <ssd1306_init+0xac>)
  40019c:	4e1e      	ldr	r6, [pc, #120]	; (400218 <ssd1306_init+0xb0>)
  40019e:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001a0:	2301      	movs	r3, #1
  4001a2:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4001a4:	20a8      	movs	r0, #168	; 0xa8
  4001a6:	4c1d      	ldr	r4, [pc, #116]	; (40021c <ssd1306_init+0xb4>)
  4001a8:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4001aa:	201f      	movs	r0, #31
  4001ac:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4001ae:	20d3      	movs	r0, #211	; 0xd3
  4001b0:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4001b2:	4628      	mov	r0, r5
  4001b4:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  4001b6:	2040      	movs	r0, #64	; 0x40
  4001b8:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4001ba:	20a1      	movs	r0, #161	; 0xa1
  4001bc:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4001be:	20c8      	movs	r0, #200	; 0xc8
  4001c0:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4001c2:	20da      	movs	r0, #218	; 0xda
  4001c4:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4001c6:	4638      	mov	r0, r7
  4001c8:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4001ca:	2081      	movs	r0, #129	; 0x81
  4001cc:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4001ce:	208f      	movs	r0, #143	; 0x8f
  4001d0:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4001d2:	20a4      	movs	r0, #164	; 0xa4
  4001d4:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4001d6:	20a6      	movs	r0, #166	; 0xa6
  4001d8:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4001da:	20d5      	movs	r0, #213	; 0xd5
  4001dc:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4001de:	2080      	movs	r0, #128	; 0x80
  4001e0:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4001e2:	208d      	movs	r0, #141	; 0x8d
  4001e4:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4001e6:	2014      	movs	r0, #20
  4001e8:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4001ea:	20db      	movs	r0, #219	; 0xdb
  4001ec:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4001ee:	2040      	movs	r0, #64	; 0x40
  4001f0:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4001f2:	20d9      	movs	r0, #217	; 0xd9
  4001f4:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4001f6:	20f1      	movs	r0, #241	; 0xf1
  4001f8:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4001fa:	20af      	movs	r0, #175	; 0xaf
  4001fc:	47a0      	blx	r4

	ssd1306_display_on();
}
  4001fe:	b005      	add	sp, #20
  400200:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	400e1200 	.word	0x400e1200
  400208:	20000001 	.word	0x20000001
  40020c:	40008000 	.word	0x40008000
  400210:	004014d9 	.word	0x004014d9
  400214:	004c4b40 	.word	0x004c4b40
  400218:	0040152d 	.word	0x0040152d
  40021c:	00400121 	.word	0x00400121

00400220 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
  400220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400224:	b083      	sub	sp, #12
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  400226:	7803      	ldrb	r3, [r0, #0]
  400228:	2b00      	cmp	r3, #0
  40022a:	d041      	beq.n	4002b0 <ssd1306_write_text+0x90>
  40022c:	4683      	mov	fp, r0
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  40022e:	4e22      	ldr	r6, [pc, #136]	; (4002b8 <ssd1306_write_text+0x98>)
  400230:	f8df a094 	ldr.w	sl, [pc, #148]	; 4002c8 <ssd1306_write_text+0xa8>
  400234:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4002cc <ssd1306_write_text+0xac>
		if (*string < 0x7F) {
  400238:	2b7e      	cmp	r3, #126	; 0x7e
  40023a:	d835      	bhi.n	4002a8 <ssd1306_write_text+0x88>
			char_ptr = font_table[*string - 32];
  40023c:	3b20      	subs	r3, #32
  40023e:	4a1f      	ldr	r2, [pc, #124]	; (4002bc <ssd1306_write_text+0x9c>)
  400240:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
			for (i = 1; i <= char_ptr[0]; i++) {
  400244:	783b      	ldrb	r3, [r7, #0]
  400246:	b1db      	cbz	r3, 400280 <ssd1306_write_text+0x60>
  400248:	2501      	movs	r5, #1
				ssd1306_write_data(char_ptr[i]);
  40024a:	f817 8005 	ldrb.w	r8, [r7, r5]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40024e:	ac02      	add	r4, sp, #8
  400250:	2302      	movs	r3, #2
  400252:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400256:	4630      	mov	r0, r6
  400258:	4621      	mov	r1, r4
  40025a:	47d0      	blx	sl
  40025c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400260:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400264:	f8c6 800c 	str.w	r8, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  400268:	2056      	movs	r0, #86	; 0x56
  40026a:	4b15      	ldr	r3, [pc, #84]	; (4002c0 <ssd1306_write_text+0xa0>)
  40026c:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40026e:	4630      	mov	r0, r6
  400270:	4621      	mov	r1, r4
  400272:	4b14      	ldr	r3, [pc, #80]	; (4002c4 <ssd1306_write_text+0xa4>)
  400274:	4798      	blx	r3
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
  400276:	3501      	adds	r5, #1
  400278:	b2ed      	uxtb	r5, r5
  40027a:	783b      	ldrb	r3, [r7, #0]
  40027c:	42ab      	cmp	r3, r5
  40027e:	d2e4      	bcs.n	40024a <ssd1306_write_text+0x2a>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400280:	ac02      	add	r4, sp, #8
  400282:	2302      	movs	r3, #2
  400284:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400288:	4630      	mov	r0, r6
  40028a:	4621      	mov	r1, r4
  40028c:	47d0      	blx	sl
  40028e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400292:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  400296:	2300      	movs	r3, #0
  400298:	60f3      	str	r3, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  40029a:	2056      	movs	r0, #86	; 0x56
  40029c:	4b08      	ldr	r3, [pc, #32]	; (4002c0 <ssd1306_write_text+0xa0>)
  40029e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4002a0:	4630      	mov	r0, r6
  4002a2:	4621      	mov	r1, r4
  4002a4:	4b07      	ldr	r3, [pc, #28]	; (4002c4 <ssd1306_write_text+0xa4>)
  4002a6:	4798      	blx	r3
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  4002a8:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	d1c3      	bne.n	400238 <ssd1306_write_text+0x18>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
  4002b0:	b003      	add	sp, #12
  4002b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002b6:	bf00      	nop
  4002b8:	40008000 	.word	0x40008000
  4002bc:	20000034 	.word	0x20000034
  4002c0:	20000001 	.word	0x20000001
  4002c4:	004015d9 	.word	0x004015d9
  4002c8:	004015a9 	.word	0x004015a9
  4002cc:	400e1200 	.word	0x400e1200

004002d0 <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  4002d0:	b500      	push	{lr}
  4002d2:	b085      	sub	sp, #20
	twi_options_t opts = {
  4002d4:	2300      	movs	r3, #0
  4002d6:	9303      	str	r3, [sp, #12]
  4002d8:	4b07      	ldr	r3, [pc, #28]	; (4002f8 <at30tse_init+0x28>)
  4002da:	9301      	str	r3, [sp, #4]
  4002dc:	f242 7310 	movw	r3, #10000	; 0x2710
  4002e0:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002e2:	2013      	movs	r0, #19
  4002e4:	4b05      	ldr	r3, [pc, #20]	; (4002fc <at30tse_init+0x2c>)
  4002e6:	4798      	blx	r3
	flexcom_enable(BOARD_FLEXCOM_TWI);
	flexcom_set_opmode(BOARD_FLEXCOM_TWI, FLEXCOM_TWI);
#else
	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
#endif
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  4002e8:	4805      	ldr	r0, [pc, #20]	; (400300 <at30tse_init+0x30>)
  4002ea:	a901      	add	r1, sp, #4
  4002ec:	4b05      	ldr	r3, [pc, #20]	; (400304 <at30tse_init+0x34>)
  4002ee:	4798      	blx	r3

}
  4002f0:	b005      	add	sp, #20
  4002f2:	f85d fb04 	ldr.w	pc, [sp], #4
  4002f6:	bf00      	nop
  4002f8:	07270e00 	.word	0x07270e00
  4002fc:	00401e39 	.word	0x00401e39
  400300:	40018000 	.word	0x40018000
  400304:	00402009 	.word	0x00402009

00400308 <at30tse_read_register>:
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_register(uint8_t reg, uint8_t reg_type,
		uint8_t reg_size, uint8_t* buffer)
{
  400308:	b510      	push	{r4, lr}
  40030a:	b086      	sub	sp, #24
	twi_packet_t packet = {
  40030c:	2400      	movs	r4, #0
  40030e:	9401      	str	r4, [sp, #4]
  400310:	9405      	str	r4, [sp, #20]
  400312:	4301      	orrs	r1, r0
  400314:	f88d 1004 	strb.w	r1, [sp, #4]
  400318:	2101      	movs	r1, #1
  40031a:	9102      	str	r1, [sp, #8]
  40031c:	9303      	str	r3, [sp, #12]
  40031e:	9204      	str	r2, [sp, #16]
  400320:	234f      	movs	r3, #79	; 0x4f
  400322:	f88d 3014 	strb.w	r3, [sp, #20]
		.length = reg_size,
		/* Chip addr */
		.chip = AT30TSE_TEMPERATURE_TWI_ADDR
	};

	return twi_master_read(BOARD_AT30TSE_TWI, &packet);
  400326:	4803      	ldr	r0, [pc, #12]	; (400334 <at30tse_read_register+0x2c>)
  400328:	a901      	add	r1, sp, #4
  40032a:	4b03      	ldr	r3, [pc, #12]	; (400338 <at30tse_read_register+0x30>)
  40032c:	4798      	blx	r3
}
  40032e:	b2c0      	uxtb	r0, r0
  400330:	b006      	add	sp, #24
  400332:	bd10      	pop	{r4, pc}
  400334:	40018000 	.word	0x40018000
  400338:	00402049 	.word	0x00402049

0040033c <at30tse_read_temperature>:
 * stored
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_temperature(double *temperature)
{
  40033c:	b570      	push	{r4, r5, r6, lr}
  40033e:	b082      	sub	sp, #8
  400340:	4605      	mov	r5, r0
	/* Placeholder buffer to put temperature data in. */
	uint8_t buffer[2];
	uint8_t error_code = 0;
	buffer[0] = 0;
  400342:	2100      	movs	r1, #0
  400344:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer[1] = 0;
  400348:	f88d 1005 	strb.w	r1, [sp, #5]

	/* Read the 16-bit temperature register. */
	error_code = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
  40034c:	4608      	mov	r0, r1
  40034e:	2202      	movs	r2, #2
  400350:	ab01      	add	r3, sp, #4
  400352:	4c29      	ldr	r4, [pc, #164]	; (4003f8 <at30tse_read_temperature+0xbc>)
  400354:	47a0      	blx	r4
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
  400356:	4604      	mov	r4, r0
  400358:	2800      	cmp	r0, #0
  40035a:	d14a      	bne.n	4003f2 <at30tse_read_temperature+0xb6>
		uint16_t data = (buffer[0] << 8) | buffer[1];
  40035c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400360:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400364:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400368:	b29a      	uxth	r2, r3
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
  40036a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
			sign *= -1;
			data &= ~(1 << 15);
  40036e:	bf1a      	itte	ne
  400370:	f3c2 020e 	ubfxne	r2, r2, #0, #15
		uint16_t data = (buffer[0] << 8) | buffer[1];
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
			sign *= -1;
  400374:	21ff      	movne	r1, #255	; 0xff
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
		uint16_t data = (buffer[0] << 8) | buffer[1];
		int8_t sign = 1;
  400376:	2101      	moveq	r1, #1
			sign *= -1;
			data &= ~(1 << 15);
		}

		/* Convert to temperature. */
		switch (resolution) {
  400378:	4b20      	ldr	r3, [pc, #128]	; (4003fc <at30tse_read_temperature+0xc0>)
  40037a:	781b      	ldrb	r3, [r3, #0]
  40037c:	b2db      	uxtb	r3, r3
  40037e:	2b03      	cmp	r3, #3
  400380:	d837      	bhi.n	4003f2 <at30tse_read_temperature+0xb6>
  400382:	e8df f003 	tbb	[pc, r3]
  400386:	0f02      	.short	0x0f02
  400388:	2a1c      	.short	0x2a1c
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			*(temperature) = data * sign * 0.5;
  40038a:	09d0      	lsrs	r0, r2, #7
  40038c:	b249      	sxtb	r1, r1
  40038e:	fb01 f000 	mul.w	r0, r1, r0
  400392:	4b1b      	ldr	r3, [pc, #108]	; (400400 <at30tse_read_temperature+0xc4>)
  400394:	4798      	blx	r3
  400396:	2200      	movs	r2, #0
  400398:	4b1a      	ldr	r3, [pc, #104]	; (400404 <at30tse_read_temperature+0xc8>)
  40039a:	4e1b      	ldr	r6, [pc, #108]	; (400408 <at30tse_read_temperature+0xcc>)
  40039c:	47b0      	blx	r6
  40039e:	e9c5 0100 	strd	r0, r1, [r5]
			break;
  4003a2:	e026      	b.n	4003f2 <at30tse_read_temperature+0xb6>

		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			*(temperature) = data * sign * 0.25;
  4003a4:	0990      	lsrs	r0, r2, #6
  4003a6:	b249      	sxtb	r1, r1
  4003a8:	fb01 f000 	mul.w	r0, r1, r0
  4003ac:	4b14      	ldr	r3, [pc, #80]	; (400400 <at30tse_read_temperature+0xc4>)
  4003ae:	4798      	blx	r3
  4003b0:	2200      	movs	r2, #0
  4003b2:	4b16      	ldr	r3, [pc, #88]	; (40040c <at30tse_read_temperature+0xd0>)
  4003b4:	4e14      	ldr	r6, [pc, #80]	; (400408 <at30tse_read_temperature+0xcc>)
  4003b6:	47b0      	blx	r6
  4003b8:	e9c5 0100 	strd	r0, r1, [r5]
			break;
  4003bc:	e019      	b.n	4003f2 <at30tse_read_temperature+0xb6>

		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			*(temperature) = data * sign * 0.125;
  4003be:	0950      	lsrs	r0, r2, #5
  4003c0:	b249      	sxtb	r1, r1
  4003c2:	fb01 f000 	mul.w	r0, r1, r0
  4003c6:	4b0e      	ldr	r3, [pc, #56]	; (400400 <at30tse_read_temperature+0xc4>)
  4003c8:	4798      	blx	r3
  4003ca:	2200      	movs	r2, #0
  4003cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4003d0:	4e0d      	ldr	r6, [pc, #52]	; (400408 <at30tse_read_temperature+0xcc>)
  4003d2:	47b0      	blx	r6
  4003d4:	e9c5 0100 	strd	r0, r1, [r5]
			break;
  4003d8:	e00b      	b.n	4003f2 <at30tse_read_temperature+0xb6>

		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			*(temperature) = data * sign * 0.0625;
  4003da:	0910      	lsrs	r0, r2, #4
  4003dc:	b249      	sxtb	r1, r1
  4003de:	fb01 f000 	mul.w	r0, r1, r0
  4003e2:	4b07      	ldr	r3, [pc, #28]	; (400400 <at30tse_read_temperature+0xc4>)
  4003e4:	4798      	blx	r3
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b09      	ldr	r3, [pc, #36]	; (400410 <at30tse_read_temperature+0xd4>)
  4003ea:	4e07      	ldr	r6, [pc, #28]	; (400408 <at30tse_read_temperature+0xcc>)
  4003ec:	47b0      	blx	r6
  4003ee:	e9c5 0100 	strd	r0, r1, [r5]
			break;
		}
	}

	return error_code;
}
  4003f2:	4620      	mov	r0, r4
  4003f4:	b002      	add	sp, #8
  4003f6:	bd70      	pop	{r4, r5, r6, pc}
  4003f8:	00400309 	.word	0x00400309
  4003fc:	20000cd0 	.word	0x20000cd0
  400400:	00404aa9 	.word	0x00404aa9
  400404:	3fe00000 	.word	0x3fe00000
  400408:	00404b75 	.word	0x00404b75
  40040c:	3fd00000 	.word	0x3fd00000
  400410:	3fb00000 	.word	0x3fb00000

00400414 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400414:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400416:	4b07      	ldr	r3, [pc, #28]	; (400434 <sd_mmc_configure_slot+0x20>)
  400418:	681a      	ldr	r2, [r3, #0]
  40041a:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
  40041e:	4906      	ldr	r1, [pc, #24]	; (400438 <sd_mmc_configure_slot+0x24>)
  400420:	7808      	ldrb	r0, [r1, #0]
  400422:	6811      	ldr	r1, [r2, #0]
  400424:	7c52      	ldrb	r2, [r2, #17]
  400426:	3300      	adds	r3, #0
  400428:	bf18      	it	ne
  40042a:	2301      	movne	r3, #1
  40042c:	4c03      	ldr	r4, [pc, #12]	; (40043c <sd_mmc_configure_slot+0x28>)
  40042e:	47a0      	blx	r4
  400430:	bd10      	pop	{r4, pc}
  400432:	bf00      	nop
  400434:	20000cd8 	.word	0x20000cd8
  400438:	20000cde 	.word	0x20000cde
  40043c:	00400ffd 	.word	0x00400ffd

00400440 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
  400440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400444:	4c09      	ldr	r4, [pc, #36]	; (40046c <sd_mmc_cmd13+0x2c>)
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  400446:	f641 370d 	movw	r7, #6925	; 0x1b0d
  40044a:	4e09      	ldr	r6, [pc, #36]	; (400470 <sd_mmc_cmd13+0x30>)
				return false;
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
  40044c:	f8df 8024 	ldr.w	r8, [pc, #36]	; 400474 <sd_mmc_cmd13+0x34>
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  400450:	4638      	mov	r0, r7
  400452:	2100      	movs	r1, #0
  400454:	47b0      	blx	r6
  400456:	4605      	mov	r5, r0
  400458:	b128      	cbz	r0, 400466 <sd_mmc_cmd13+0x26>
				return false;
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
  40045a:	47c0      	blx	r8
  40045c:	b2c0      	uxtb	r0, r0
  40045e:	b110      	cbz	r0, 400466 <sd_mmc_cmd13+0x26>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
  400460:	3c01      	subs	r4, #1
  400462:	d1f5      	bne.n	400450 <sd_mmc_cmd13+0x10>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
  400464:	2500      	movs	r5, #0
		}
	} while (1);

	return true;
}
  400466:	4628      	mov	r0, r5
  400468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40046c:	00030d41 	.word	0x00030d41
  400470:	0040121d 	.word	0x0040121d
  400474:	00401235 	.word	0x00401235

00400478 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
  400478:	b510      	push	{r4, lr}
  40047a:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
  40047c:	4b0c      	ldr	r3, [pc, #48]	; (4004b0 <sd_mmc_cmd9_spi+0x38>)
  40047e:	681b      	ldr	r3, [r3, #0]
  400480:	8999      	ldrh	r1, [r3, #12]
  400482:	2301      	movs	r3, #1
  400484:	9300      	str	r3, [sp, #0]
  400486:	480b      	ldr	r0, [pc, #44]	; (4004b4 <sd_mmc_cmd9_spi+0x3c>)
  400488:	0409      	lsls	r1, r1, #16
  40048a:	2210      	movs	r2, #16
  40048c:	4c0a      	ldr	r4, [pc, #40]	; (4004b8 <sd_mmc_cmd9_spi+0x40>)
  40048e:	47a0      	blx	r4
  400490:	4603      	mov	r3, r0
  400492:	b150      	cbz	r0, 4004aa <sd_mmc_cmd9_spi+0x32>
			CSD_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
  400494:	4b06      	ldr	r3, [pc, #24]	; (4004b0 <sd_mmc_cmd9_spi+0x38>)
  400496:	6818      	ldr	r0, [r3, #0]
  400498:	3012      	adds	r0, #18
  40049a:	2101      	movs	r1, #1
  40049c:	4b07      	ldr	r3, [pc, #28]	; (4004bc <sd_mmc_cmd9_spi+0x44>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
  4004a2:	b110      	cbz	r0, 4004aa <sd_mmc_cmd9_spi+0x32>
		return false;
	}
	return driver_wait_end_of_read_blocks();
  4004a4:	4b06      	ldr	r3, [pc, #24]	; (4004c0 <sd_mmc_cmd9_spi+0x48>)
  4004a6:	4798      	blx	r3
  4004a8:	4603      	mov	r3, r0
}
  4004aa:	4618      	mov	r0, r3
  4004ac:	b002      	add	sp, #8
  4004ae:	bd10      	pop	{r4, pc}
  4004b0:	20000cd8 	.word	0x20000cd8
  4004b4:	00081109 	.word	0x00081109
  4004b8:	0040109d 	.word	0x0040109d
  4004bc:	004012b5 	.word	0x004012b5
  4004c0:	00401329 	.word	0x00401329

004004c4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  4004c4:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4004c6:	4b03      	ldr	r3, [pc, #12]	; (4004d4 <sd_mmc_deselect_slot+0x10>)
  4004c8:	781b      	ldrb	r3, [r3, #0]
  4004ca:	b913      	cbnz	r3, 4004d2 <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
  4004cc:	2000      	movs	r0, #0
  4004ce:	4b02      	ldr	r3, [pc, #8]	; (4004d8 <sd_mmc_deselect_slot+0x14>)
  4004d0:	4798      	blx	r3
  4004d2:	bd08      	pop	{r3, pc}
  4004d4:	20000cde 	.word	0x20000cde
  4004d8:	0040103d 	.word	0x0040103d

004004dc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4004dc:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
  4004de:	2800      	cmp	r0, #0
  4004e0:	d158      	bne.n	400594 <sd_mmc_select_slot+0xb8>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4004e2:	4b35      	ldr	r3, [pc, #212]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  4004e4:	689a      	ldr	r2, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline __always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4004e6:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4004e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004ec:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004f0:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

inline __always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t inline arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4004f4:	f002 021f 	and.w	r2, r2, #31
  4004f8:	2101      	movs	r1, #1
  4004fa:	fa01 f202 	lsl.w	r2, r1, r2
  4004fe:	421a      	tst	r2, r3
  400500:	d00e      	beq.n	400520 <sd_mmc_select_slot+0x44>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400502:	4b2d      	ldr	r3, [pc, #180]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  400504:	7b9b      	ldrb	r3, [r3, #14]
  400506:	428b      	cmp	r3, r1
  400508:	d105      	bne.n	400516 <sd_mmc_select_slot+0x3a>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  40050a:	4b2c      	ldr	r3, [pc, #176]	; (4005bc <sd_mmc_select_slot+0xe0>)
  40050c:	781b      	ldrb	r3, [r3, #0]
  40050e:	b113      	cbz	r3, 400516 <sd_mmc_select_slot+0x3a>
		SysTick->CTRL = 0;
  400510:	2200      	movs	r2, #0
  400512:	4b2b      	ldr	r3, [pc, #172]	; (4005c0 <sd_mmc_select_slot+0xe4>)
  400514:	601a      	str	r2, [r3, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400516:	2204      	movs	r2, #4
  400518:	4b27      	ldr	r3, [pc, #156]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  40051a:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  40051c:	2002      	movs	r0, #2
  40051e:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400520:	4b25      	ldr	r3, [pc, #148]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  400522:	7b9b      	ldrb	r3, [r3, #14]
  400524:	2b04      	cmp	r3, #4
  400526:	d115      	bne.n	400554 <sd_mmc_select_slot+0x78>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400528:	2201      	movs	r2, #1
  40052a:	4b23      	ldr	r3, [pc, #140]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  40052c:	739a      	strb	r2, [r3, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  40052e:	4b24      	ldr	r3, [pc, #144]	; (4005c0 <sd_mmc_select_slot+0xe4>)
  400530:	681b      	ldr	r3, [r3, #0]
  400532:	b93b      	cbnz	r3, 400544 <sd_mmc_select_slot+0x68>
		sd_mmc_sam_systick_used = true;
  400534:	4b21      	ldr	r3, [pc, #132]	; (4005bc <sd_mmc_select_slot+0xe0>)
  400536:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400538:	4b21      	ldr	r3, [pc, #132]	; (4005c0 <sd_mmc_select_slot+0xe4>)
  40053a:	4922      	ldr	r1, [pc, #136]	; (4005c4 <sd_mmc_select_slot+0xe8>)
  40053c:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  40053e:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400540:	2002      	movs	r0, #2
  400542:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  400544:	2200      	movs	r2, #0
  400546:	4b1d      	ldr	r3, [pc, #116]	; (4005bc <sd_mmc_select_slot+0xe0>)
  400548:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  40054a:	481f      	ldr	r0, [pc, #124]	; (4005c8 <sd_mmc_select_slot+0xec>)
  40054c:	4b1f      	ldr	r3, [pc, #124]	; (4005cc <sd_mmc_select_slot+0xf0>)
  40054e:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400550:	2002      	movs	r0, #2
  400552:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400554:	2b01      	cmp	r3, #1
  400556:	d10b      	bne.n	400570 <sd_mmc_select_slot+0x94>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  400558:	4b18      	ldr	r3, [pc, #96]	; (4005bc <sd_mmc_select_slot+0xe0>)
  40055a:	781b      	ldrb	r3, [r3, #0]
  40055c:	b303      	cbz	r3, 4005a0 <sd_mmc_select_slot+0xc4>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  40055e:	4b18      	ldr	r3, [pc, #96]	; (4005c0 <sd_mmc_select_slot+0xe4>)
  400560:	681b      	ldr	r3, [r3, #0]
  400562:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400566:	d017      	beq.n	400598 <sd_mmc_select_slot+0xbc>
		SysTick->CTRL = 0;
  400568:	2200      	movs	r2, #0
  40056a:	4b15      	ldr	r3, [pc, #84]	; (4005c0 <sd_mmc_select_slot+0xe4>)
  40056c:	601a      	str	r2, [r3, #0]
  40056e:	e017      	b.n	4005a0 <sd_mmc_select_slot+0xc4>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400570:	4b11      	ldr	r3, [pc, #68]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  400572:	7b9b      	ldrb	r3, [r3, #14]
  400574:	2b03      	cmp	r3, #3
  400576:	d011      	beq.n	40059c <sd_mmc_select_slot+0xc0>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  400578:	2200      	movs	r2, #0
  40057a:	4b15      	ldr	r3, [pc, #84]	; (4005d0 <sd_mmc_select_slot+0xf4>)
  40057c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40057e:	4c0e      	ldr	r4, [pc, #56]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  400580:	4b14      	ldr	r3, [pc, #80]	; (4005d4 <sd_mmc_select_slot+0xf8>)
  400582:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400584:	4b14      	ldr	r3, [pc, #80]	; (4005d8 <sd_mmc_select_slot+0xfc>)
  400586:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400588:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  40058a:	2802      	cmp	r0, #2
  40058c:	bf14      	ite	ne
  40058e:	2000      	movne	r0, #0
  400590:	2001      	moveq	r0, #1
  400592:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  400594:	2004      	movs	r0, #4
  400596:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  400598:	2002      	movs	r0, #2
  40059a:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
  40059c:	2003      	movs	r0, #3
  40059e:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4005a0:	4b05      	ldr	r3, [pc, #20]	; (4005b8 <sd_mmc_select_slot+0xdc>)
  4005a2:	2202      	movs	r2, #2
  4005a4:	739a      	strb	r2, [r3, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4005a6:	4a0d      	ldr	r2, [pc, #52]	; (4005dc <sd_mmc_select_slot+0x100>)
  4005a8:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4005aa:	2201      	movs	r2, #1
  4005ac:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  4005ae:	2200      	movs	r2, #0
  4005b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  4005b4:	e7dc      	b.n	400570 <sd_mmc_select_slot+0x94>
  4005b6:	bf00      	nop
  4005b8:	20000408 	.word	0x20000408
  4005bc:	20000cd4 	.word	0x20000cd4
  4005c0:	e000e010 	.word	0xe000e010
  4005c4:	00e4e1c0 	.word	0x00e4e1c0
  4005c8:	0082ca25 	.word	0x0082ca25
  4005cc:	20000001 	.word	0x20000001
  4005d0:	20000cde 	.word	0x20000cde
  4005d4:	20000cd8 	.word	0x20000cd8
  4005d8:	00400415 	.word	0x00400415
  4005dc:	00061a80 	.word	0x00061a80

004005e0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4005e0:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4005e2:	2204      	movs	r2, #4
  4005e4:	4b03      	ldr	r3, [pc, #12]	; (4005f4 <sd_mmc_init+0x14>)
  4005e6:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4005e8:	22ff      	movs	r2, #255	; 0xff
  4005ea:	4b03      	ldr	r3, [pc, #12]	; (4005f8 <sd_mmc_init+0x18>)
  4005ec:	701a      	strb	r2, [r3, #0]
	driver_init();
  4005ee:	4b03      	ldr	r3, [pc, #12]	; (4005fc <sd_mmc_init+0x1c>)
  4005f0:	4798      	blx	r3
  4005f2:	bd08      	pop	{r3, pc}
  4005f4:	20000408 	.word	0x20000408
  4005f8:	20000cde 	.word	0x20000cde
  4005fc:	00400fd1 	.word	0x00400fd1

00400600 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400604:	b086      	sub	sp, #24
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400606:	4ba9      	ldr	r3, [pc, #676]	; (4008ac <sd_mmc_check+0x2ac>)
  400608:	4798      	blx	r3
  40060a:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40060c:	2801      	cmp	r0, #1
  40060e:	d003      	beq.n	400618 <sd_mmc_check+0x18>
		sd_mmc_deselect_slot();
  400610:	4ba7      	ldr	r3, [pc, #668]	; (4008b0 <sd_mmc_check+0x2b0>)
  400612:	4798      	blx	r3
		return sd_mmc_err;
  400614:	4620      	mov	r0, r4
  400616:	e21e      	b.n	400a56 <sd_mmc_check+0x456>
static bool sd_mmc_spi_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  400618:	4ba6      	ldr	r3, [pc, #664]	; (4008b4 <sd_mmc_check+0x2b4>)
  40061a:	681b      	ldr	r3, [r3, #0]
  40061c:	2201      	movs	r2, #1
  40061e:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  400620:	2400      	movs	r4, #0
  400622:	741c      	strb	r4, [r3, #16]
	sd_mmc_card->rca = 0;
  400624:	819c      	strh	r4, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  400626:	4ba4      	ldr	r3, [pc, #656]	; (4008b8 <sd_mmc_check+0x2b8>)
  400628:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  40062a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  40062e:	4621      	mov	r1, r4
  400630:	4ba2      	ldr	r3, [pc, #648]	; (4008bc <sd_mmc_check+0x2bc>)
  400632:	4798      	blx	r3
  400634:	2800      	cmp	r0, #0
  400636:	f000 81d0 	beq.w	4009da <sd_mmc_check+0x3da>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40063a:	f245 5008 	movw	r0, #21768	; 0x5508
  40063e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400642:	4b9e      	ldr	r3, [pc, #632]	; (4008bc <sd_mmc_check+0x2bc>)
  400644:	4798      	blx	r3
  400646:	2800      	cmp	r0, #0
  400648:	f000 81cf 	beq.w	4009ea <sd_mmc_check+0x3ea>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  40064c:	4b9c      	ldr	r3, [pc, #624]	; (4008c0 <sd_mmc_check+0x2c0>)
  40064e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400650:	f1b0 3fff 	cmp.w	r0, #4294967295
  400654:	f000 81cb 	beq.w	4009ee <sd_mmc_check+0x3ee>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400658:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40065c:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400660:	f040 81bb 	bne.w	4009da <sd_mmc_check+0x3da>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  400664:	2601      	movs	r6, #1
  400666:	e1c3      	b.n	4009f0 <sd_mmc_check+0x3f0>
	 */
	retry = 7150;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400668:	4638      	mov	r0, r7
  40066a:	2100      	movs	r1, #0
  40066c:	47a8      	blx	r5
  40066e:	2800      	cmp	r0, #0
  400670:	f000 81cc 	beq.w	400a0c <sd_mmc_check+0x40c>
		arg = 0;
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
  400674:	f241 1029 	movw	r0, #4393	; 0x1129
  400678:	07b1      	lsls	r1, r6, #30
  40067a:	47a8      	blx	r5
  40067c:	2800      	cmp	r0, #0
  40067e:	f000 81c5 	beq.w	400a0c <sd_mmc_check+0x40c>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400682:	47c0      	blx	r8
		if (!(resp & R1_SPI_IDLE)) {
  400684:	f010 0f01 	tst.w	r0, #1
  400688:	d002      	beq.n	400690 <sd_mmc_check+0x90>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
  40068a:	3c01      	subs	r4, #1
  40068c:	d1ec      	bne.n	400668 <sd_mmc_check+0x68>
  40068e:	e1bd      	b.n	400a0c <sd_mmc_check+0x40c>
			return false;
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  400690:	f240 503a 	movw	r0, #1338	; 0x53a
  400694:	2100      	movs	r1, #0
  400696:	4b89      	ldr	r3, [pc, #548]	; (4008bc <sd_mmc_check+0x2bc>)
  400698:	4798      	blx	r3
  40069a:	2800      	cmp	r0, #0
  40069c:	f000 81b6 	beq.w	400a0c <sd_mmc_check+0x40c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
  4006a0:	4b87      	ldr	r3, [pc, #540]	; (4008c0 <sd_mmc_check+0x2c0>)
  4006a2:	4798      	blx	r3
  4006a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4006a8:	f000 81c2 	beq.w	400a30 <sd_mmc_check+0x430>
		sd_mmc_card->type |= CARD_TYPE_HC;
  4006ac:	4b81      	ldr	r3, [pc, #516]	; (4008b4 <sd_mmc_check+0x2b4>)
  4006ae:	681b      	ldr	r3, [r3, #0]
  4006b0:	7bda      	ldrb	r2, [r3, #15]
  4006b2:	f042 0208 	orr.w	r2, r2, #8
  4006b6:	73da      	strb	r2, [r3, #15]
  4006b8:	e1ba      	b.n	400a30 <sd_mmc_check+0x430>
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  4006ba:	4630      	mov	r0, r6
  4006bc:	2100      	movs	r1, #0
  4006be:	47a8      	blx	r5
  4006c0:	2800      	cmp	r0, #0
  4006c2:	f000 818a 	beq.w	4009da <sd_mmc_check+0x3da>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  4006c6:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  4006c8:	f010 0f01 	tst.w	r0, #1
  4006cc:	d002      	beq.n	4006d4 <sd_mmc_check+0xd4>
			break;
		}
		if (retry-- == 0) {
  4006ce:	3c01      	subs	r4, #1
  4006d0:	d1f3      	bne.n	4006ba <sd_mmc_check+0xba>
  4006d2:	e182      	b.n	4009da <sd_mmc_check+0x3da>
			return false;
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  4006d4:	f240 503a 	movw	r0, #1338	; 0x53a
  4006d8:	2100      	movs	r1, #0
  4006da:	4b78      	ldr	r3, [pc, #480]	; (4008bc <sd_mmc_check+0x2bc>)
  4006dc:	4798      	blx	r3
  4006de:	2800      	cmp	r0, #0
  4006e0:	f000 817b 	beq.w	4009da <sd_mmc_check+0x3da>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
  4006e4:	4b76      	ldr	r3, [pc, #472]	; (4008c0 <sd_mmc_check+0x2c0>)
  4006e6:	4798      	blx	r3
  4006e8:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4006ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4006f0:	f040 81a7 	bne.w	400a42 <sd_mmc_check+0x442>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
  4006f4:	4b6f      	ldr	r3, [pc, #444]	; (4008b4 <sd_mmc_check+0x2b4>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	7bda      	ldrb	r2, [r3, #15]
  4006fa:	f042 0208 	orr.w	r2, r2, #8
  4006fe:	73da      	strb	r2, [r3, #15]
  400700:	e19f      	b.n	400a42 <sd_mmc_check+0x442>
	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
  400702:	4b70      	ldr	r3, [pc, #448]	; (4008c4 <sd_mmc_check+0x2c4>)
  400704:	4798      	blx	r3
  400706:	2800      	cmp	r0, #0
  400708:	f000 8167 	beq.w	4009da <sd_mmc_check+0x3da>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  40070c:	4b69      	ldr	r3, [pc, #420]	; (4008b4 <sd_mmc_check+0x2b4>)
  40070e:	681b      	ldr	r3, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400710:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  400712:	f3c2 0283 	ubfx	r2, r2, #2, #4
  400716:	3a01      	subs	r2, #1
  400718:	2a03      	cmp	r2, #3
  40071a:	d803      	bhi.n	400724 <sd_mmc_check+0x124>
  40071c:	e8df f002 	tbb	[pc, r2]
  400720:	0e0b0805 	.word	0x0e0b0805
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400724:	2212      	movs	r2, #18
  400726:	741a      	strb	r2, [r3, #16]
  400728:	e00a      	b.n	400740 <sd_mmc_check+0x140>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  40072a:	2214      	movs	r2, #20
  40072c:	741a      	strb	r2, [r3, #16]
  40072e:	e007      	b.n	400740 <sd_mmc_check+0x140>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400730:	2222      	movs	r2, #34	; 0x22
  400732:	741a      	strb	r2, [r3, #16]
  400734:	e004      	b.n	400740 <sd_mmc_check+0x140>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  400736:	2230      	movs	r2, #48	; 0x30
  400738:	741a      	strb	r2, [r3, #16]
  40073a:	e001      	b.n	400740 <sd_mmc_check+0x140>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  40073c:	2240      	movs	r2, #64	; 0x40
  40073e:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400740:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400742:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  400746:	4960      	ldr	r1, [pc, #384]	; (4008c8 <sd_mmc_check+0x2c8>)
  400748:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  400750:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400754:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  400758:	485c      	ldr	r0, [pc, #368]	; (4008cc <sd_mmc_check+0x2cc>)
  40075a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  40075e:	fb02 f201 	mul.w	r2, r2, r1
  400762:	601a      	str	r2, [r3, #0]
  400764:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400766:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400768:	7e5a      	ldrb	r2, [r3, #25]
  40076a:	0092      	lsls	r2, r2, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40076c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400770:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  400774:	f3c2 020b 	ubfx	r2, r2, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400778:	f640 71ff 	movw	r1, #4095	; 0xfff
  40077c:	428a      	cmp	r2, r1
  40077e:	d011      	beq.n	4007a4 <sd_mmc_check+0x1a4>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400780:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400782:	7ed9      	ldrb	r1, [r3, #27]
  400784:	0049      	lsls	r1, r1, #1
  400786:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40078a:	3201      	adds	r2, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  40078c:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400790:	3102      	adds	r1, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400792:	fa02 f101 	lsl.w	r1, r2, r1
  400796:	7dda      	ldrb	r2, [r3, #23]
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400798:	f002 020f 	and.w	r2, r2, #15
  40079c:	fa01 f202 	lsl.w	r2, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  4007a0:	0a92      	lsrs	r2, r2, #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  4007a2:	605a      	str	r2, [r3, #4]
	if (!sd_mmc_cmd9_spi()) {
		return false;
	}
	mmc_decode_csd();
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  4007a4:	7c1b      	ldrb	r3, [r3, #16]
  4007a6:	2b3f      	cmp	r3, #63	; 0x3f
  4007a8:	d93f      	bls.n	40082a <sd_mmc_check+0x22a>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  4007aa:	2100      	movs	r1, #0
  4007ac:	9100      	str	r1, [sp, #0]
  4007ae:	4848      	ldr	r0, [pc, #288]	; (4008d0 <sd_mmc_check+0x2d0>)
  4007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4007b4:	2301      	movs	r3, #1
  4007b6:	4c47      	ldr	r4, [pc, #284]	; (4008d4 <sd_mmc_check+0x2d4>)
  4007b8:	47a0      	blx	r4
  4007ba:	2800      	cmp	r0, #0
  4007bc:	f000 810d 	beq.w	4009da <sd_mmc_check+0x3da>
  4007c0:	2400      	movs	r4, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  4007c2:	4d45      	ldr	r5, [pc, #276]	; (4008d8 <sd_mmc_check+0x2d8>)
  4007c4:	a803      	add	r0, sp, #12
  4007c6:	47a8      	blx	r5
  4007c8:	2800      	cmp	r0, #0
  4007ca:	f000 8106 	beq.w	4009da <sd_mmc_check+0x3da>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4007ce:	3401      	adds	r4, #1
  4007d0:	b2a4      	uxth	r4, r4
  4007d2:	2c32      	cmp	r4, #50	; 0x32
  4007d4:	d1f6      	bne.n	4007c4 <sd_mmc_check+0x1c4>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4007d6:	4b37      	ldr	r3, [pc, #220]	; (4008b4 <sd_mmc_check+0x2b4>)
  4007d8:	681b      	ldr	r3, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007da:	7e9a      	ldrb	r2, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007dc:	7e19      	ldrb	r1, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4007de:	7e5b      	ldrb	r3, [r3, #25]
  4007e0:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007e2:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007e6:	ea43 12a2 	orr.w	r2, r3, r2, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  4007ea:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4007ee:	f640 73ff 	movw	r3, #4095	; 0xfff
  4007f2:	429a      	cmp	r2, r3
  4007f4:	d10e      	bne.n	400814 <sd_mmc_check+0x214>
  4007f6:	e12c      	b.n	400a52 <sd_mmc_check+0x452>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  4007f8:	a804      	add	r0, sp, #16
  4007fa:	47a8      	blx	r5
  4007fc:	2800      	cmp	r0, #0
  4007fe:	f000 80ec 	beq.w	4009da <sd_mmc_check+0x3da>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  400802:	3401      	adds	r4, #1
  400804:	b2a4      	uxth	r4, r4
  400806:	2c35      	cmp	r4, #53	; 0x35
  400808:	d9f6      	bls.n	4007f8 <sd_mmc_check+0x1f8>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  40080a:	4b2a      	ldr	r3, [pc, #168]	; (4008b4 <sd_mmc_check+0x2b4>)
  40080c:	681a      	ldr	r2, [r3, #0]
  40080e:	9b04      	ldr	r3, [sp, #16]
  400810:	085b      	lsrs	r3, r3, #1
  400812:	6053      	str	r3, [r2, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  400814:	4d30      	ldr	r5, [pc, #192]	; (4008d8 <sd_mmc_check+0x2d8>)
  400816:	e006      	b.n	400826 <sd_mmc_check+0x226>
  400818:	a804      	add	r0, sp, #16
  40081a:	47a8      	blx	r5
  40081c:	2800      	cmp	r0, #0
  40081e:	f000 80dc 	beq.w	4009da <sd_mmc_check+0x3da>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400822:	3401      	adds	r4, #1
  400824:	b2a4      	uxth	r4, r4
  400826:	2c7f      	cmp	r4, #127	; 0x7f
  400828:	d9f6      	bls.n	400818 <sd_mmc_check+0x218>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40082a:	f241 1010 	movw	r0, #4368	; 0x1110
  40082e:	f44f 7100 	mov.w	r1, #512	; 0x200
  400832:	4b22      	ldr	r3, [pc, #136]	; (4008bc <sd_mmc_check+0x2bc>)
  400834:	4798      	blx	r3
  400836:	2800      	cmp	r0, #0
  400838:	f000 80cf 	beq.w	4009da <sd_mmc_check+0x3da>
		return false;
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
  40083c:	4b27      	ldr	r3, [pc, #156]	; (4008dc <sd_mmc_check+0x2dc>)
  40083e:	4798      	blx	r3
  400840:	2800      	cmp	r0, #0
  400842:	f000 80ca 	beq.w	4009da <sd_mmc_check+0x3da>
		return false;
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
  400846:	4b26      	ldr	r3, [pc, #152]	; (4008e0 <sd_mmc_check+0x2e0>)
  400848:	4798      	blx	r3
  40084a:	e0be      	b.n	4009ca <sd_mmc_check+0x3ca>
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
			return false;
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40084c:	4b19      	ldr	r3, [pc, #100]	; (4008b4 <sd_mmc_check+0x2b4>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	7bdb      	ldrb	r3, [r3, #15]
  400852:	f013 0f01 	tst.w	r3, #1
  400856:	f000 809f 	beq.w	400998 <sd_mmc_check+0x398>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
  40085a:	4b1a      	ldr	r3, [pc, #104]	; (4008c4 <sd_mmc_check+0x2c4>)
  40085c:	4798      	blx	r3
  40085e:	2800      	cmp	r0, #0
  400860:	f000 80bb 	beq.w	4009da <sd_mmc_check+0x3da>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400864:	4b13      	ldr	r3, [pc, #76]	; (4008b4 <sd_mmc_check+0x2b4>)
  400866:	681b      	ldr	r3, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400868:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40086a:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40086e:	4916      	ldr	r1, [pc, #88]	; (4008c8 <sd_mmc_check+0x2c8>)
  400870:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  400878:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40087c:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  400880:	4818      	ldr	r0, [pc, #96]	; (4008e4 <sd_mmc_check+0x2e4>)
  400882:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  400886:	fb02 f201 	mul.w	r2, r2, r1
  40088a:	601a      	str	r2, [r3, #0]
  40088c:	7c9a      	ldrb	r2, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40088e:	0992      	lsrs	r2, r2, #6
  400890:	d02a      	beq.n	4008e8 <sd_mmc_check+0x2e8>
  400892:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400894:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400896:	7e59      	ldrb	r1, [r3, #25]
  400898:	0409      	lsls	r1, r1, #16
  40089a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40089e:	430a      	orrs	r2, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
  4008a0:	f3c2 0215 	ubfx	r2, r2, #0, #22
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
  4008a4:	3201      	adds	r2, #1
  4008a6:	0252      	lsls	r2, r2, #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
  4008a8:	605a      	str	r2, [r3, #4]
  4008aa:	e038      	b.n	40091e <sd_mmc_check+0x31e>
  4008ac:	004004dd 	.word	0x004004dd
  4008b0:	004004c5 	.word	0x004004c5
  4008b4:	20000cd8 	.word	0x20000cd8
  4008b8:	00401065 	.word	0x00401065
  4008bc:	0040121d 	.word	0x0040121d
  4008c0:	00401235 	.word	0x00401235
  4008c4:	00400479 	.word	0x00400479
  4008c8:	004093c4 	.word	0x004093c4
  4008cc:	004093e0 	.word	0x004093e0
  4008d0:	00081108 	.word	0x00081108
  4008d4:	0040109d 	.word	0x0040109d
  4008d8:	00401241 	.word	0x00401241
  4008dc:	00400441 	.word	0x00400441
  4008e0:	00400415 	.word	0x00400415
  4008e4:	00409384 	.word	0x00409384
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008e8:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008ea:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008ec:	7e5a      	ldrb	r2, [r3, #25]
  4008ee:	0092      	lsls	r2, r2, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008f0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008f4:	ea42 11a1 	orr.w	r1, r2, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008f8:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008fa:	7eda      	ldrb	r2, [r3, #27]
  4008fc:	0052      	lsls	r2, r2, #1
  4008fe:	ea42 12e0 	orr.w	r2, r2, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  400902:	f3c1 010b 	ubfx	r1, r1, #0, #12
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400906:	3101      	adds	r1, #1
  400908:	f002 0207 	and.w	r2, r2, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  40090c:	3202      	adds	r2, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40090e:	4091      	lsls	r1, r2
  400910:	7dda      	ldrb	r2, [r3, #23]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400912:	f002 020f 	and.w	r2, r2, #15
  400916:	fa01 f202 	lsl.w	r2, r1, r2
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
  40091a:	0a92      	lsrs	r2, r2, #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40091c:	605a      	str	r2, [r3, #4]
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40091e:	8999      	ldrh	r1, [r3, #12]
  400920:	f241 1037 	movw	r0, #4407	; 0x1137
  400924:	0409      	lsls	r1, r1, #16
  400926:	4b4d      	ldr	r3, [pc, #308]	; (400a5c <sd_mmc_check+0x45c>)
  400928:	4798      	blx	r3
  40092a:	2800      	cmp	r0, #0
  40092c:	d055      	beq.n	4009da <sd_mmc_check+0x3da>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  40092e:	2301      	movs	r3, #1
  400930:	9300      	str	r3, [sp, #0]
  400932:	484b      	ldr	r0, [pc, #300]	; (400a60 <sd_mmc_check+0x460>)
  400934:	2100      	movs	r1, #0
  400936:	2208      	movs	r2, #8
  400938:	4c4a      	ldr	r4, [pc, #296]	; (400a64 <sd_mmc_check+0x464>)
  40093a:	47a0      	blx	r4
  40093c:	2800      	cmp	r0, #0
  40093e:	d04c      	beq.n	4009da <sd_mmc_check+0x3da>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  400940:	a804      	add	r0, sp, #16
  400942:	2101      	movs	r1, #1
  400944:	4b48      	ldr	r3, [pc, #288]	; (400a68 <sd_mmc_check+0x468>)
  400946:	4798      	blx	r3
  400948:	2800      	cmp	r0, #0
  40094a:	d046      	beq.n	4009da <sd_mmc_check+0x3da>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  40094c:	4b47      	ldr	r3, [pc, #284]	; (400a6c <sd_mmc_check+0x46c>)
  40094e:	4798      	blx	r3
  400950:	2800      	cmp	r0, #0
  400952:	d042      	beq.n	4009da <sd_mmc_check+0x3da>
  400954:	f89d 3010 	ldrb.w	r3, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  400958:	f003 030f 	and.w	r3, r3, #15
  40095c:	2b01      	cmp	r3, #1
  40095e:	d008      	beq.n	400972 <sd_mmc_check+0x372>
  400960:	b113      	cbz	r3, 400968 <sd_mmc_check+0x368>
  400962:	2b02      	cmp	r3, #2
  400964:	d00a      	beq.n	40097c <sd_mmc_check+0x37c>
  400966:	e013      	b.n	400990 <sd_mmc_check+0x390>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400968:	4b41      	ldr	r3, [pc, #260]	; (400a70 <sd_mmc_check+0x470>)
  40096a:	681b      	ldr	r3, [r3, #0]
  40096c:	2210      	movs	r2, #16
  40096e:	741a      	strb	r2, [r3, #16]
  400970:	e012      	b.n	400998 <sd_mmc_check+0x398>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400972:	4b3f      	ldr	r3, [pc, #252]	; (400a70 <sd_mmc_check+0x470>)
  400974:	681b      	ldr	r3, [r3, #0]
  400976:	221a      	movs	r2, #26
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e00d      	b.n	400998 <sd_mmc_check+0x398>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40097c:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400980:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400982:	4b3b      	ldr	r3, [pc, #236]	; (400a70 <sd_mmc_check+0x470>)
  400984:	681b      	ldr	r3, [r3, #0]
  400986:	bf14      	ite	ne
  400988:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40098a:	2220      	moveq	r2, #32
  40098c:	741a      	strb	r2, [r3, #16]
  40098e:	e003      	b.n	400998 <sd_mmc_check+0x398>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400990:	4b37      	ldr	r3, [pc, #220]	; (400a70 <sd_mmc_check+0x470>)
  400992:	681b      	ldr	r3, [r3, #0]
  400994:	2210      	movs	r2, #16
  400996:	741a      	strb	r2, [r3, #16]
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  400998:	4b35      	ldr	r3, [pc, #212]	; (400a70 <sd_mmc_check+0x470>)
  40099a:	681b      	ldr	r3, [r3, #0]
  40099c:	7bdb      	ldrb	r3, [r3, #15]
  40099e:	f003 0309 	and.w	r3, r3, #9
  4009a2:	2b01      	cmp	r3, #1
  4009a4:	d106      	bne.n	4009b4 <sd_mmc_check+0x3b4>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4009a6:	f241 1010 	movw	r0, #4368	; 0x1110
  4009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
  4009ae:	4b2b      	ldr	r3, [pc, #172]	; (400a5c <sd_mmc_check+0x45c>)
  4009b0:	4798      	blx	r3
  4009b2:	b190      	cbz	r0, 4009da <sd_mmc_check+0x3da>
			return false;
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4009b4:	4b2e      	ldr	r3, [pc, #184]	; (400a70 <sd_mmc_check+0x470>)
  4009b6:	681b      	ldr	r3, [r3, #0]
  4009b8:	7bdb      	ldrb	r3, [r3, #15]
  4009ba:	f013 0f01 	tst.w	r3, #1
  4009be:	d002      	beq.n	4009c6 <sd_mmc_check+0x3c6>
		if (!sd_mmc_cmd13()) {
  4009c0:	4b2c      	ldr	r3, [pc, #176]	; (400a74 <sd_mmc_check+0x474>)
  4009c2:	4798      	blx	r3
  4009c4:	b148      	cbz	r0, 4009da <sd_mmc_check+0x3da>
			return false;
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
  4009c6:	4b2c      	ldr	r3, [pc, #176]	; (400a78 <sd_mmc_check+0x478>)
  4009c8:	4798      	blx	r3

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  4009ca:	4b29      	ldr	r3, [pc, #164]	; (400a70 <sd_mmc_check+0x470>)
  4009cc:	681b      	ldr	r3, [r3, #0]
  4009ce:	2200      	movs	r2, #0
  4009d0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  4009d2:	4b2a      	ldr	r3, [pc, #168]	; (400a7c <sd_mmc_check+0x47c>)
  4009d4:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  4009d6:	2001      	movs	r0, #1
  4009d8:	e03d      	b.n	400a56 <sd_mmc_check+0x456>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4009da:	4b25      	ldr	r3, [pc, #148]	; (400a70 <sd_mmc_check+0x470>)
  4009dc:	681b      	ldr	r3, [r3, #0]
  4009de:	2403      	movs	r4, #3
  4009e0:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4009e2:	4b26      	ldr	r3, [pc, #152]	; (400a7c <sd_mmc_check+0x47c>)
  4009e4:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4009e6:	4620      	mov	r0, r4
  4009e8:	e035      	b.n	400a56 <sd_mmc_check+0x456>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  4009ea:	2600      	movs	r6, #0
  4009ec:	e000      	b.n	4009f0 <sd_mmc_check+0x3f0>
  4009ee:	2600      	movs	r6, #0
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4009f0:	4b1f      	ldr	r3, [pc, #124]	; (400a70 <sd_mmc_check+0x470>)
  4009f2:	681b      	ldr	r3, [r3, #0]
  4009f4:	7bdb      	ldrb	r3, [r3, #15]
  4009f6:	f013 0f01 	tst.w	r3, #1
  4009fa:	d0cd      	beq.n	400998 <sd_mmc_check+0x398>
  4009fc:	f641 34ef 	movw	r4, #7151	; 0x1bef
	 */
	retry = 7150;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400a00:	f241 1737 	movw	r7, #4407	; 0x1137
  400a04:	4d15      	ldr	r5, [pc, #84]	; (400a5c <sd_mmc_check+0x45c>)
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400a06:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400a80 <sd_mmc_check+0x480>
  400a0a:	e62d      	b.n	400668 <sd_mmc_check+0x68>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400a0c:	4b18      	ldr	r3, [pc, #96]	; (400a70 <sd_mmc_check+0x470>)
  400a0e:	681b      	ldr	r3, [r3, #0]
  400a10:	2202      	movs	r2, #2
  400a12:	73da      	strb	r2, [r3, #15]
static bool sd_mmc_spi_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  400a14:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  400a18:	2100      	movs	r1, #0
  400a1a:	4b10      	ldr	r3, [pc, #64]	; (400a5c <sd_mmc_check+0x45c>)
  400a1c:	4798      	blx	r3
  400a1e:	2800      	cmp	r0, #0
  400a20:	d0db      	beq.n	4009da <sd_mmc_check+0x3da>
  400a22:	f641 34ef 	movw	r4, #7151	; 0x1bef
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  400a26:	f241 1601 	movw	r6, #4353	; 0x1101
  400a2a:	4d0c      	ldr	r5, [pc, #48]	; (400a5c <sd_mmc_check+0x45c>)
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400a2c:	4f14      	ldr	r7, [pc, #80]	; (400a80 <sd_mmc_check+0x480>)
  400a2e:	e644      	b.n	4006ba <sd_mmc_check+0xba>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  400a30:	f241 103b 	movw	r0, #4411	; 0x113b
  400a34:	2100      	movs	r1, #0
  400a36:	4b09      	ldr	r3, [pc, #36]	; (400a5c <sd_mmc_check+0x45c>)
  400a38:	4798      	blx	r3
  400a3a:	2800      	cmp	r0, #0
  400a3c:	f47f af06 	bne.w	40084c <sd_mmc_check+0x24c>
  400a40:	e7cb      	b.n	4009da <sd_mmc_check+0x3da>
	if (!mmc_spi_op_cond()) {
		return false;
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  400a42:	f241 103b 	movw	r0, #4411	; 0x113b
  400a46:	2100      	movs	r1, #0
  400a48:	4b04      	ldr	r3, [pc, #16]	; (400a5c <sd_mmc_check+0x45c>)
  400a4a:	4798      	blx	r3
  400a4c:	2800      	cmp	r0, #0
  400a4e:	d0c4      	beq.n	4009da <sd_mmc_check+0x3da>
  400a50:	e657      	b.n	400702 <sd_mmc_check+0x102>

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  400a52:	4d0c      	ldr	r5, [pc, #48]	; (400a84 <sd_mmc_check+0x484>)
  400a54:	e6d0      	b.n	4007f8 <sd_mmc_check+0x1f8>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400a56:	b006      	add	sp, #24
  400a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a5c:	0040121d 	.word	0x0040121d
  400a60:	00081133 	.word	0x00081133
  400a64:	0040109d 	.word	0x0040109d
  400a68:	004012b5 	.word	0x004012b5
  400a6c:	00401329 	.word	0x00401329
  400a70:	20000cd8 	.word	0x20000cd8
  400a74:	00400441 	.word	0x00400441
  400a78:	00400415 	.word	0x00400415
  400a7c:	004004c5 	.word	0x004004c5
  400a80:	00401235 	.word	0x00401235
  400a84:	00401241 	.word	0x00401241

00400a88 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400a88:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400a8a:	4b05      	ldr	r3, [pc, #20]	; (400aa0 <sd_mmc_get_type+0x18>)
  400a8c:	4798      	blx	r3
  400a8e:	b928      	cbnz	r0, 400a9c <sd_mmc_get_type+0x14>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
  400a90:	4b04      	ldr	r3, [pc, #16]	; (400aa4 <sd_mmc_get_type+0x1c>)
  400a92:	4798      	blx	r3
	return sd_mmc_card->type;
  400a94:	4b04      	ldr	r3, [pc, #16]	; (400aa8 <sd_mmc_get_type+0x20>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	7bd8      	ldrb	r0, [r3, #15]
  400a9a:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  400a9c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400a9e:	bd08      	pop	{r3, pc}
  400aa0:	004004dd 	.word	0x004004dd
  400aa4:	004004c5 	.word	0x004004c5
  400aa8:	20000cd8 	.word	0x20000cd8

00400aac <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400aac:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400aae:	4b05      	ldr	r3, [pc, #20]	; (400ac4 <sd_mmc_get_capacity+0x18>)
  400ab0:	4798      	blx	r3
  400ab2:	b928      	cbnz	r0, 400ac0 <sd_mmc_get_capacity+0x14>
		return 0;
	}
	sd_mmc_deselect_slot();
  400ab4:	4b04      	ldr	r3, [pc, #16]	; (400ac8 <sd_mmc_get_capacity+0x1c>)
  400ab6:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400ab8:	4b04      	ldr	r3, [pc, #16]	; (400acc <sd_mmc_get_capacity+0x20>)
  400aba:	681b      	ldr	r3, [r3, #0]
  400abc:	6858      	ldr	r0, [r3, #4]
  400abe:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
  400ac0:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400ac2:	bd08      	pop	{r3, pc}
  400ac4:	004004dd 	.word	0x004004dd
  400ac8:	004004c5 	.word	0x004004c5
  400acc:	20000cd8 	.word	0x20000cd8

00400ad0 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400ad0:	2000      	movs	r0, #0
  400ad2:	4770      	bx	lr

00400ad4 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400ad4:	b570      	push	{r4, r5, r6, lr}
  400ad6:	b082      	sub	sp, #8
  400ad8:	460e      	mov	r6, r1
  400ada:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400adc:	4c15      	ldr	r4, [pc, #84]	; (400b34 <sd_mmc_init_read_blocks+0x60>)
  400ade:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
  400ae0:	bb28      	cbnz	r0, 400b2e <sd_mmc_init_read_blocks+0x5a>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
  400ae2:	4b15      	ldr	r3, [pc, #84]	; (400b38 <sd_mmc_init_read_blocks+0x64>)
  400ae4:	4798      	blx	r3
  400ae6:	b918      	cbnz	r0, 400af0 <sd_mmc_init_read_blocks+0x1c>
		sd_mmc_deselect_slot();
  400ae8:	4b14      	ldr	r3, [pc, #80]	; (400b3c <sd_mmc_init_read_blocks+0x68>)
  400aea:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400aec:	2005      	movs	r0, #5
  400aee:	e01e      	b.n	400b2e <sd_mmc_init_read_blocks+0x5a>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
  400af0:	4b13      	ldr	r3, [pc, #76]	; (400b40 <sd_mmc_init_read_blocks+0x6c>)
  400af2:	4814      	ldr	r0, [pc, #80]	; (400b44 <sd_mmc_init_read_blocks+0x70>)
  400af4:	2d01      	cmp	r5, #1
  400af6:	bf88      	it	hi
  400af8:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400afa:	4b13      	ldr	r3, [pc, #76]	; (400b48 <sd_mmc_init_read_blocks+0x74>)
  400afc:	681b      	ldr	r3, [r3, #0]
  400afe:	7bdb      	ldrb	r3, [r3, #15]
  400b00:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400b04:	bf08      	it	eq
  400b06:	0276      	lsleq	r6, r6, #9
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400b08:	2301      	movs	r3, #1
  400b0a:	9300      	str	r3, [sp, #0]
  400b0c:	4631      	mov	r1, r6
  400b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400b12:	462b      	mov	r3, r5
  400b14:	4c0d      	ldr	r4, [pc, #52]	; (400b4c <sd_mmc_init_read_blocks+0x78>)
  400b16:	47a0      	blx	r4
  400b18:	b918      	cbnz	r0, 400b22 <sd_mmc_init_read_blocks+0x4e>
		sd_mmc_deselect_slot();
  400b1a:	4b08      	ldr	r3, [pc, #32]	; (400b3c <sd_mmc_init_read_blocks+0x68>)
  400b1c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400b1e:	2005      	movs	r0, #5
  400b20:	e005      	b.n	400b2e <sd_mmc_init_read_blocks+0x5a>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400b22:	4b0b      	ldr	r3, [pc, #44]	; (400b50 <sd_mmc_init_read_blocks+0x7c>)
  400b24:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400b26:	4b0b      	ldr	r3, [pc, #44]	; (400b54 <sd_mmc_init_read_blocks+0x80>)
  400b28:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400b2a:	2000      	movs	r0, #0
  400b2c:	e7ff      	b.n	400b2e <sd_mmc_init_read_blocks+0x5a>
}
  400b2e:	b002      	add	sp, #8
  400b30:	bd70      	pop	{r4, r5, r6, pc}
  400b32:	bf00      	nop
  400b34:	004004dd 	.word	0x004004dd
  400b38:	00400441 	.word	0x00400441
  400b3c:	004004c5 	.word	0x004004c5
  400b40:	00101112 	.word	0x00101112
  400b44:	00081111 	.word	0x00081111
  400b48:	20000cd8 	.word	0x20000cd8
  400b4c:	0040109d 	.word	0x0040109d
  400b50:	20000cdc 	.word	0x20000cdc
  400b54:	20000cd2 	.word	0x20000cd2

00400b58 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400b58:	b510      	push	{r4, lr}
  400b5a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400b5c:	4b06      	ldr	r3, [pc, #24]	; (400b78 <sd_mmc_start_read_blocks+0x20>)
  400b5e:	4798      	blx	r3
  400b60:	b920      	cbnz	r0, 400b6c <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b62:	2200      	movs	r2, #0
  400b64:	4b05      	ldr	r3, [pc, #20]	; (400b7c <sd_mmc_start_read_blocks+0x24>)
  400b66:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400b68:	2005      	movs	r0, #5
  400b6a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400b6c:	4b03      	ldr	r3, [pc, #12]	; (400b7c <sd_mmc_start_read_blocks+0x24>)
  400b6e:	881a      	ldrh	r2, [r3, #0]
  400b70:	1b14      	subs	r4, r2, r4
  400b72:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  400b74:	2000      	movs	r0, #0
}
  400b76:	bd10      	pop	{r4, pc}
  400b78:	004012b5 	.word	0x004012b5
  400b7c:	20000cdc 	.word	0x20000cdc

00400b80 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400b80:	b510      	push	{r4, lr}
  400b82:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400b84:	4b12      	ldr	r3, [pc, #72]	; (400bd0 <sd_mmc_wait_end_of_read_blocks+0x50>)
  400b86:	4798      	blx	r3
  400b88:	b1f0      	cbz	r0, 400bc8 <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400b8a:	b11c      	cbz	r4, 400b94 <sd_mmc_wait_end_of_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b8c:	2200      	movs	r2, #0
  400b8e:	4b11      	ldr	r3, [pc, #68]	; (400bd4 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400b90:	801a      	strh	r2, [r3, #0]
  400b92:	e002      	b.n	400b9a <sd_mmc_wait_end_of_read_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400b94:	4b0f      	ldr	r3, [pc, #60]	; (400bd4 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400b96:	881b      	ldrh	r3, [r3, #0]
  400b98:	b9c3      	cbnz	r3, 400bcc <sd_mmc_wait_end_of_read_blocks+0x4c>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400b9a:	4b0f      	ldr	r3, [pc, #60]	; (400bd8 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400b9c:	881b      	ldrh	r3, [r3, #0]
  400b9e:	2b01      	cmp	r3, #1
  400ba0:	d103      	bne.n	400baa <sd_mmc_wait_end_of_read_blocks+0x2a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400ba2:	4b0e      	ldr	r3, [pc, #56]	; (400bdc <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400ba4:	4798      	blx	r3
		return SD_MMC_OK;
  400ba6:	2000      	movs	r0, #0
  400ba8:	bd10      	pop	{r4, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400baa:	f243 100c 	movw	r0, #12556	; 0x310c
  400bae:	2100      	movs	r1, #0
  400bb0:	4b0b      	ldr	r3, [pc, #44]	; (400be0 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400bb2:	4798      	blx	r3
  400bb4:	b920      	cbnz	r0, 400bc0 <sd_mmc_wait_end_of_read_blocks+0x40>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400bb6:	f243 100c 	movw	r0, #12556	; 0x310c
  400bba:	2100      	movs	r1, #0
  400bbc:	4b08      	ldr	r3, [pc, #32]	; (400be0 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400bbe:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  400bc0:	4b06      	ldr	r3, [pc, #24]	; (400bdc <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400bc2:	4798      	blx	r3
	return SD_MMC_OK;
  400bc4:	2000      	movs	r0, #0
  400bc6:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
  400bc8:	2005      	movs	r0, #5
  400bca:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400bcc:	2000      	movs	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400bce:	bd10      	pop	{r4, pc}
  400bd0:	00401329 	.word	0x00401329
  400bd4:	20000cdc 	.word	0x20000cdc
  400bd8:	20000cd2 	.word	0x20000cd2
  400bdc:	004004c5 	.word	0x004004c5
  400be0:	0040121d 	.word	0x0040121d

00400be4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400be4:	b530      	push	{r4, r5, lr}
  400be6:	b083      	sub	sp, #12
  400be8:	460d      	mov	r5, r1
  400bea:	4614      	mov	r4, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400bec:	4b11      	ldr	r3, [pc, #68]	; (400c34 <sd_mmc_init_write_blocks+0x50>)
  400bee:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400bf0:	b9f0      	cbnz	r0, 400c30 <sd_mmc_init_write_blocks+0x4c>
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  400bf2:	4b11      	ldr	r3, [pc, #68]	; (400c38 <sd_mmc_init_write_blocks+0x54>)
  400bf4:	4811      	ldr	r0, [pc, #68]	; (400c3c <sd_mmc_init_write_blocks+0x58>)
  400bf6:	2c01      	cmp	r4, #1
  400bf8:	bf88      	it	hi
  400bfa:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400bfc:	4b10      	ldr	r3, [pc, #64]	; (400c40 <sd_mmc_init_write_blocks+0x5c>)
  400bfe:	681b      	ldr	r3, [r3, #0]
  400c00:	7bdb      	ldrb	r3, [r3, #15]
  400c02:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400c06:	bf08      	it	eq
  400c08:	026d      	lsleq	r5, r5, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400c0a:	2301      	movs	r3, #1
  400c0c:	9300      	str	r3, [sp, #0]
  400c0e:	4629      	mov	r1, r5
  400c10:	f44f 7200 	mov.w	r2, #512	; 0x200
  400c14:	4623      	mov	r3, r4
  400c16:	4d0b      	ldr	r5, [pc, #44]	; (400c44 <sd_mmc_init_write_blocks+0x60>)
  400c18:	47a8      	blx	r5
  400c1a:	b918      	cbnz	r0, 400c24 <sd_mmc_init_write_blocks+0x40>
		sd_mmc_deselect_slot();
  400c1c:	4b0a      	ldr	r3, [pc, #40]	; (400c48 <sd_mmc_init_write_blocks+0x64>)
  400c1e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c20:	2005      	movs	r0, #5
  400c22:	e005      	b.n	400c30 <sd_mmc_init_write_blocks+0x4c>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400c24:	4b09      	ldr	r3, [pc, #36]	; (400c4c <sd_mmc_init_write_blocks+0x68>)
  400c26:	801c      	strh	r4, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400c28:	4b09      	ldr	r3, [pc, #36]	; (400c50 <sd_mmc_init_write_blocks+0x6c>)
  400c2a:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  400c2c:	2000      	movs	r0, #0
  400c2e:	e7ff      	b.n	400c30 <sd_mmc_init_write_blocks+0x4c>
}
  400c30:	b003      	add	sp, #12
  400c32:	bd30      	pop	{r4, r5, pc}
  400c34:	004004dd 	.word	0x004004dd
  400c38:	00109119 	.word	0x00109119
  400c3c:	00089118 	.word	0x00089118
  400c40:	20000cd8 	.word	0x20000cd8
  400c44:	0040109d 	.word	0x0040109d
  400c48:	004004c5 	.word	0x004004c5
  400c4c:	20000cdc 	.word	0x20000cdc
  400c50:	20000cd2 	.word	0x20000cd2

00400c54 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400c54:	b510      	push	{r4, lr}
  400c56:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400c58:	4b06      	ldr	r3, [pc, #24]	; (400c74 <sd_mmc_start_write_blocks+0x20>)
  400c5a:	4798      	blx	r3
  400c5c:	b920      	cbnz	r0, 400c68 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400c5e:	2200      	movs	r2, #0
  400c60:	4b05      	ldr	r3, [pc, #20]	; (400c78 <sd_mmc_start_write_blocks+0x24>)
  400c62:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400c64:	2005      	movs	r0, #5
  400c66:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400c68:	4b03      	ldr	r3, [pc, #12]	; (400c78 <sd_mmc_start_write_blocks+0x24>)
  400c6a:	881a      	ldrh	r2, [r3, #0]
  400c6c:	1b14      	subs	r4, r2, r4
  400c6e:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  400c70:	2000      	movs	r0, #0
}
  400c72:	bd10      	pop	{r4, pc}
  400c74:	0040132d 	.word	0x0040132d
  400c78:	20000cdc 	.word	0x20000cdc

00400c7c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400c7c:	b510      	push	{r4, lr}
  400c7e:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400c80:	4b09      	ldr	r3, [pc, #36]	; (400ca8 <sd_mmc_wait_end_of_write_blocks+0x2c>)
  400c82:	4798      	blx	r3
  400c84:	b158      	cbz	r0, 400c9e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400c86:	b11c      	cbz	r4, 400c90 <sd_mmc_wait_end_of_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400c88:	2200      	movs	r2, #0
  400c8a:	4b08      	ldr	r3, [pc, #32]	; (400cac <sd_mmc_wait_end_of_write_blocks+0x30>)
  400c8c:	801a      	strh	r2, [r3, #0]
  400c8e:	e002      	b.n	400c96 <sd_mmc_wait_end_of_write_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400c90:	4b06      	ldr	r3, [pc, #24]	; (400cac <sd_mmc_wait_end_of_write_blocks+0x30>)
  400c92:	881b      	ldrh	r3, [r3, #0]
  400c94:	b92b      	cbnz	r3, 400ca2 <sd_mmc_wait_end_of_write_blocks+0x26>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
  400c96:	4b06      	ldr	r3, [pc, #24]	; (400cb0 <sd_mmc_wait_end_of_write_blocks+0x34>)
  400c98:	4798      	blx	r3
	return SD_MMC_OK;
  400c9a:	2000      	movs	r0, #0
  400c9c:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
  400c9e:	2005      	movs	r0, #5
  400ca0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400ca2:	2000      	movs	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400ca4:	bd10      	pop	{r4, pc}
  400ca6:	bf00      	nop
  400ca8:	004013b1 	.word	0x004013b1
  400cac:	20000cdc 	.word	0x20000cdc
  400cb0:	004004c5 	.word	0x004004c5

00400cb4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400cb4:	b510      	push	{r4, lr}
  400cb6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400cb8:	4b0f      	ldr	r3, [pc, #60]	; (400cf8 <sd_mmc_test_unit_ready+0x44>)
  400cba:	4798      	blx	r3
  400cbc:	2801      	cmp	r0, #1
  400cbe:	d003      	beq.n	400cc8 <sd_mmc_test_unit_ready+0x14>
  400cc0:	b120      	cbz	r0, 400ccc <sd_mmc_test_unit_ready+0x18>
  400cc2:	2802      	cmp	r0, #2
  400cc4:	d00f      	beq.n	400ce6 <sd_mmc_test_unit_ready+0x32>
  400cc6:	e013      	b.n	400cf0 <sd_mmc_test_unit_ready+0x3c>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  400cc8:	2003      	movs	r0, #3
  400cca:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  400ccc:	4b0b      	ldr	r3, [pc, #44]	; (400cfc <sd_mmc_test_unit_ready+0x48>)
  400cce:	5d1b      	ldrb	r3, [r3, r4]
  400cd0:	b983      	cbnz	r3, 400cf4 <sd_mmc_test_unit_ready+0x40>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400cd2:	4620      	mov	r0, r4
  400cd4:	4b0a      	ldr	r3, [pc, #40]	; (400d00 <sd_mmc_test_unit_ready+0x4c>)
  400cd6:	4798      	blx	r3
  400cd8:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
  400cdc:	2800      	cmp	r0, #0
  400cde:	bf0c      	ite	eq
  400ce0:	2002      	moveq	r0, #2
  400ce2:	2000      	movne	r0, #0
  400ce4:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  400ce6:	2200      	movs	r2, #0
  400ce8:	4b04      	ldr	r3, [pc, #16]	; (400cfc <sd_mmc_test_unit_ready+0x48>)
  400cea:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400cec:	2002      	movs	r0, #2
  400cee:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
  400cf0:	2001      	movs	r0, #1
  400cf2:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
  400cf4:	2002      	movs	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
  400cf6:	bd10      	pop	{r4, pc}
  400cf8:	00400601 	.word	0x00400601
  400cfc:	20000ce0 	.word	0x20000ce0
  400d00:	00400a89 	.word	0x00400a89

00400d04 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400d04:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400d06:	2000      	movs	r0, #0
  400d08:	4b01      	ldr	r3, [pc, #4]	; (400d10 <sd_mmc_test_unit_ready_0+0xc>)
  400d0a:	4798      	blx	r3
}
  400d0c:	bd08      	pop	{r3, pc}
  400d0e:	bf00      	nop
  400d10:	00400cb5 	.word	0x00400cb5

00400d14 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400d14:	b538      	push	{r3, r4, r5, lr}
  400d16:	4604      	mov	r4, r0
  400d18:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400d1a:	4b04      	ldr	r3, [pc, #16]	; (400d2c <sd_mmc_read_capacity+0x18>)
  400d1c:	4798      	blx	r3
  400d1e:	0040      	lsls	r0, r0, #1
  400d20:	3801      	subs	r0, #1
  400d22:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400d24:	4620      	mov	r0, r4
  400d26:	4b02      	ldr	r3, [pc, #8]	; (400d30 <sd_mmc_read_capacity+0x1c>)
  400d28:	4798      	blx	r3
}
  400d2a:	bd38      	pop	{r3, r4, r5, pc}
  400d2c:	00400aad 	.word	0x00400aad
  400d30:	00400cb5 	.word	0x00400cb5

00400d34 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400d34:	b508      	push	{r3, lr}
  400d36:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
  400d38:	2000      	movs	r0, #0
  400d3a:	4b01      	ldr	r3, [pc, #4]	; (400d40 <sd_mmc_read_capacity_0+0xc>)
  400d3c:	4798      	blx	r3
}
  400d3e:	bd08      	pop	{r3, pc}
  400d40:	00400d15 	.word	0x00400d15

00400d44 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400d44:	b508      	push	{r3, lr}
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
	return sd_mmc_is_write_protected(slot);
  400d46:	2000      	movs	r0, #0
  400d48:	4b01      	ldr	r3, [pc, #4]	; (400d50 <sd_mmc_wr_protect_0+0xc>)
  400d4a:	4798      	blx	r3
}

bool sd_mmc_wr_protect_0(void)
{
	return sd_mmc_wr_protect(0);
}
  400d4c:	bd08      	pop	{r3, pc}
  400d4e:	bf00      	nop
  400d50:	00400ad1 	.word	0x00400ad1

00400d54 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400d58:	2201      	movs	r2, #1
  400d5a:	4b0a      	ldr	r3, [pc, #40]	; (400d84 <sd_mmc_mem_2_ram+0x30>)
  400d5c:	4798      	blx	r3
  400d5e:	b120      	cbz	r0, 400d6a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400d60:	2802      	cmp	r0, #2
  400d62:	bf0c      	ite	eq
  400d64:	2002      	moveq	r0, #2
  400d66:	2001      	movne	r0, #1
  400d68:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400d6a:	4620      	mov	r0, r4
  400d6c:	2101      	movs	r1, #1
  400d6e:	4b06      	ldr	r3, [pc, #24]	; (400d88 <sd_mmc_mem_2_ram+0x34>)
  400d70:	4798      	blx	r3
  400d72:	b928      	cbnz	r0, 400d80 <sd_mmc_mem_2_ram+0x2c>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400d74:	4b05      	ldr	r3, [pc, #20]	; (400d8c <sd_mmc_mem_2_ram+0x38>)
  400d76:	4798      	blx	r3
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  400d78:	3000      	adds	r0, #0
  400d7a:	bf18      	it	ne
  400d7c:	2001      	movne	r0, #1
  400d7e:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
		return CTRL_FAIL;
  400d80:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400d82:	bd10      	pop	{r4, pc}
  400d84:	00400ad5 	.word	0x00400ad5
  400d88:	00400b59 	.word	0x00400b59
  400d8c:	00400b81 	.word	0x00400b81

00400d90 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400d90:	b508      	push	{r3, lr}
  400d92:	4603      	mov	r3, r0
  400d94:	460a      	mov	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
  400d96:	2000      	movs	r0, #0
  400d98:	4619      	mov	r1, r3
  400d9a:	4b01      	ldr	r3, [pc, #4]	; (400da0 <sd_mmc_mem_2_ram_0+0x10>)
  400d9c:	4798      	blx	r3
}
  400d9e:	bd08      	pop	{r3, pc}
  400da0:	00400d55 	.word	0x00400d55

00400da4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400da4:	b510      	push	{r4, lr}
  400da6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400da8:	2201      	movs	r2, #1
  400daa:	4b0a      	ldr	r3, [pc, #40]	; (400dd4 <sd_mmc_ram_2_mem+0x30>)
  400dac:	4798      	blx	r3
  400dae:	b120      	cbz	r0, 400dba <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400db0:	2802      	cmp	r0, #2
  400db2:	bf0c      	ite	eq
  400db4:	2002      	moveq	r0, #2
  400db6:	2001      	movne	r0, #1
  400db8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400dba:	4620      	mov	r0, r4
  400dbc:	2101      	movs	r1, #1
  400dbe:	4b06      	ldr	r3, [pc, #24]	; (400dd8 <sd_mmc_ram_2_mem+0x34>)
  400dc0:	4798      	blx	r3
  400dc2:	b928      	cbnz	r0, 400dd0 <sd_mmc_ram_2_mem+0x2c>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400dc4:	4b05      	ldr	r3, [pc, #20]	; (400ddc <sd_mmc_ram_2_mem+0x38>)
  400dc6:	4798      	blx	r3
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  400dc8:	3000      	adds	r0, #0
  400dca:	bf18      	it	ne
  400dcc:	2001      	movne	r0, #1
  400dce:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
		return CTRL_FAIL;
  400dd0:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400dd2:	bd10      	pop	{r4, pc}
  400dd4:	00400be5 	.word	0x00400be5
  400dd8:	00400c55 	.word	0x00400c55
  400ddc:	00400c7d 	.word	0x00400c7d

00400de0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  400de0:	b508      	push	{r3, lr}
  400de2:	4603      	mov	r3, r0
  400de4:	460a      	mov	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
  400de6:	2000      	movs	r0, #0
  400de8:	4619      	mov	r1, r3
  400dea:	4b01      	ldr	r3, [pc, #4]	; (400df0 <sd_mmc_ram_2_mem_0+0x10>)
  400dec:	4798      	blx	r3
}
  400dee:	bd08      	pop	{r3, pc}
  400df0:	00400da5 	.word	0x00400da5

00400df4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
  400df4:	b500      	push	{lr}
  400df6:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
  400df8:	a902      	add	r1, sp, #8
  400dfa:	23ff      	movs	r3, #255	; 0xff
  400dfc:	f801 3d01 	strb.w	r3, [r1, #-1]!
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  400e00:	480a      	ldr	r0, [pc, #40]	; (400e2c <sd_mmc_spi_start_write_block+0x38>)
  400e02:	2201      	movs	r2, #1
  400e04:	4b0a      	ldr	r3, [pc, #40]	; (400e30 <sd_mmc_spi_start_write_block+0x3c>)
  400e06:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
  400e08:	4b0a      	ldr	r3, [pc, #40]	; (400e34 <sd_mmc_spi_start_write_block+0x40>)
  400e0a:	881b      	ldrh	r3, [r3, #0]
  400e0c:	2b01      	cmp	r3, #1
		token = SPI_TOKEN_SINGLE_WRITE;
  400e0e:	bf0c      	ite	eq
  400e10:	23fe      	moveq	r3, #254	; 0xfe
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
  400e12:	23fc      	movne	r3, #252	; 0xfc
  400e14:	f88d 3006 	strb.w	r3, [sp, #6]
	}
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &token, 1);
  400e18:	4804      	ldr	r0, [pc, #16]	; (400e2c <sd_mmc_spi_start_write_block+0x38>)
  400e1a:	f10d 0106 	add.w	r1, sp, #6
  400e1e:	2201      	movs	r2, #1
  400e20:	4b03      	ldr	r3, [pc, #12]	; (400e30 <sd_mmc_spi_start_write_block+0x3c>)
  400e22:	4798      	blx	r3
}
  400e24:	b003      	add	sp, #12
  400e26:	f85d fb04 	ldr.w	pc, [sp], #4
  400e2a:	bf00      	nop
  400e2c:	40008000 	.word	0x40008000
  400e30:	004015f9 	.word	0x004015f9
  400e34:	20000ce4 	.word	0x20000ce4

00400e38 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
  400e38:	b570      	push	{r4, r5, r6, lr}
  400e3a:	b082      	sub	sp, #8
	uint8_t line = 0xFF;
  400e3c:	ac02      	add	r4, sp, #8
  400e3e:	23ff      	movs	r3, #255	; 0xff
  400e40:	f804 3d01 	strb.w	r3, [r4, #-1]!

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  400e44:	4e0f      	ldr	r6, [pc, #60]	; (400e84 <sd_mmc_spi_wait_busy+0x4c>)
  400e46:	4630      	mov	r0, r6
  400e48:	4621      	mov	r1, r4
  400e4a:	2201      	movs	r2, #1
  400e4c:	4d0e      	ldr	r5, [pc, #56]	; (400e88 <sd_mmc_spi_wait_busy+0x50>)
  400e4e:	47a8      	blx	r5
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  400e50:	4630      	mov	r0, r6
  400e52:	4621      	mov	r1, r4
  400e54:	2201      	movs	r2, #1
  400e56:	47a8      	blx	r5
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  400e58:	4630      	mov	r0, r6
  400e5a:	4621      	mov	r1, r4
  400e5c:	2201      	movs	r2, #1
  400e5e:	47a8      	blx	r5
  400e60:	4c0a      	ldr	r4, [pc, #40]	; (400e8c <sd_mmc_spi_wait_busy+0x54>)
  400e62:	e006      	b.n	400e72 <sd_mmc_spi_wait_busy+0x3a>
  400e64:	4630      	mov	r0, r6
  400e66:	f10d 0107 	add.w	r1, sp, #7
  400e6a:	2201      	movs	r2, #1
  400e6c:	47a8      	blx	r5
		if (!(nec_timeout--)) {
  400e6e:	3c01      	subs	r4, #1
  400e70:	d005      	beq.n	400e7e <sd_mmc_spi_wait_busy+0x46>
			return false;
		}
	} while (line != 0xFF);
  400e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400e76:	2bff      	cmp	r3, #255	; 0xff
  400e78:	d1f4      	bne.n	400e64 <sd_mmc_spi_wait_busy+0x2c>
	return true;
  400e7a:	2001      	movs	r0, #1
  400e7c:	e000      	b.n	400e80 <sd_mmc_spi_wait_busy+0x48>
	uint32_t nec_timeout = 200000;
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
		if (!(nec_timeout--)) {
			return false;
  400e7e:	2000      	movs	r0, #0
		}
	} while (line != 0xFF);
	return true;
}
  400e80:	b002      	add	sp, #8
  400e82:	bd70      	pop	{r4, r5, r6, pc}
  400e84:	40008000 	.word	0x40008000
  400e88:	00401631 	.word	0x00401631
  400e8c:	00030d40 	.word	0x00030d40

00400e90 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
  400e90:	b570      	push	{r4, r5, r6, lr}
  400e92:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
  400e94:	4b15      	ldr	r3, [pc, #84]	; (400eec <sd_mmc_spi_stop_multiwrite_block+0x5c>)
  400e96:	881b      	ldrh	r3, [r3, #0]
  400e98:	2b01      	cmp	r3, #1
  400e9a:	d020      	beq.n	400ede <sd_mmc_spi_stop_multiwrite_block+0x4e>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
  400e9c:	4a14      	ldr	r2, [pc, #80]	; (400ef0 <sd_mmc_spi_stop_multiwrite_block+0x60>)
  400e9e:	8812      	ldrh	r2, [r2, #0]
  400ea0:	4914      	ldr	r1, [pc, #80]	; (400ef4 <sd_mmc_spi_stop_multiwrite_block+0x64>)
  400ea2:	6809      	ldr	r1, [r1, #0]
  400ea4:	fbb1 f2f2 	udiv	r2, r1, r2
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
  400ea8:	4293      	cmp	r3, r2
  400eaa:	d81a      	bhi.n	400ee2 <sd_mmc_spi_stop_multiwrite_block+0x52>
		return true; // It is not the End of multi write
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
  400eac:	ac02      	add	r4, sp, #8
  400eae:	23ff      	movs	r3, #255	; 0xff
  400eb0:	f804 3d01 	strb.w	r3, [r4, #-1]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  400eb4:	4e10      	ldr	r6, [pc, #64]	; (400ef8 <sd_mmc_spi_stop_multiwrite_block+0x68>)
  400eb6:	4630      	mov	r0, r6
  400eb8:	4621      	mov	r1, r4
  400eba:	2201      	movs	r2, #1
  400ebc:	4d0f      	ldr	r5, [pc, #60]	; (400efc <sd_mmc_spi_stop_multiwrite_block+0x6c>)
  400ebe:	47a8      	blx	r5
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
  400ec0:	23fd      	movs	r3, #253	; 0xfd
  400ec2:	f88d 3007 	strb.w	r3, [sp, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  400ec6:	4630      	mov	r0, r6
  400ec8:	4621      	mov	r1, r4
  400eca:	2201      	movs	r2, #1
  400ecc:	47a8      	blx	r5
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
  400ece:	4b0c      	ldr	r3, [pc, #48]	; (400f00 <sd_mmc_spi_stop_multiwrite_block+0x70>)
  400ed0:	4798      	blx	r3
  400ed2:	4603      	mov	r3, r0
  400ed4:	b930      	cbnz	r0, 400ee4 <sd_mmc_spi_stop_multiwrite_block+0x54>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  400ed6:	2105      	movs	r1, #5
  400ed8:	4a0a      	ldr	r2, [pc, #40]	; (400f04 <sd_mmc_spi_stop_multiwrite_block+0x74>)
  400eda:	7011      	strb	r1, [r2, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
  400edc:	e002      	b.n	400ee4 <sd_mmc_spi_stop_multiwrite_block+0x54>
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
		return true; // Single block write
  400ede:	2301      	movs	r3, #1
  400ee0:	e000      	b.n	400ee4 <sd_mmc_spi_stop_multiwrite_block+0x54>
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
		return true; // It is not the End of multi write
  400ee2:	2301      	movs	r3, #1
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
  400ee4:	4618      	mov	r0, r3
  400ee6:	b002      	add	sp, #8
  400ee8:	bd70      	pop	{r4, r5, r6, pc}
  400eea:	bf00      	nop
  400eec:	20000ce4 	.word	0x20000ce4
  400ef0:	20000cec 	.word	0x20000cec
  400ef4:	20000ce8 	.word	0x20000ce8
  400ef8:	40008000 	.word	0x40008000
  400efc:	004015f9 	.word	0x004015f9
  400f00:	00400e39 	.word	0x00400e39
  400f04:	20000cee 	.word	0x20000cee

00400f08 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
  400f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f0a:	b083      	sub	sp, #12
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
  400f0c:	ad02      	add	r5, sp, #8
  400f0e:	2300      	movs	r3, #0
  400f10:	f805 3d01 	strb.w	r3, [r5, #-1]!
  400f14:	4c10      	ldr	r4, [pc, #64]	; (400f58 <sd_mmc_spi_start_read_block+0x50>)
		if (i-- == 0) {
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  400f16:	4f11      	ldr	r7, [pc, #68]	; (400f5c <sd_mmc_spi_start_read_block+0x54>)
  400f18:	4e11      	ldr	r6, [pc, #68]	; (400f60 <sd_mmc_spi_start_read_block+0x58>)
  400f1a:	e006      	b.n	400f2a <sd_mmc_spi_start_read_block+0x22>
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
	i = 500000;
	do {
		if (i-- == 0) {
  400f1c:	3c01      	subs	r4, #1
  400f1e:	d104      	bne.n	400f2a <sd_mmc_spi_start_read_block+0x22>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
  400f20:	2204      	movs	r2, #4
  400f22:	4b10      	ldr	r3, [pc, #64]	; (400f64 <sd_mmc_spi_start_read_block+0x5c>)
  400f24:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
  400f26:	2000      	movs	r0, #0
  400f28:	e014      	b.n	400f54 <sd_mmc_spi_start_read_block+0x4c>
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  400f2a:	4638      	mov	r0, r7
  400f2c:	4629      	mov	r1, r5
  400f2e:	2201      	movs	r2, #1
  400f30:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
  400f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400f36:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  400f3a:	d108      	bne.n	400f4e <sd_mmc_spi_start_read_block+0x46>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
  400f3c:	f013 0f07 	tst.w	r3, #7
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
  400f40:	bf14      	ite	ne
  400f42:	2207      	movne	r2, #7
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
  400f44:	220b      	moveq	r2, #11
  400f46:	4b07      	ldr	r3, [pc, #28]	; (400f64 <sd_mmc_spi_start_read_block+0x5c>)
  400f48:	701a      	strb	r2, [r3, #0]
			}
			return false;
  400f4a:	2000      	movs	r0, #0
  400f4c:	e002      	b.n	400f54 <sd_mmc_spi_start_read_block+0x4c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
  400f4e:	2bfe      	cmp	r3, #254	; 0xfe
  400f50:	d1e4      	bne.n	400f1c <sd_mmc_spi_start_read_block+0x14>

	return true;
  400f52:	2001      	movs	r0, #1
}
  400f54:	b003      	add	sp, #12
  400f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f58:	0007a120 	.word	0x0007a120
  400f5c:	40008000 	.word	0x40008000
  400f60:	00401631 	.word	0x00401631
  400f64:	20000cee 	.word	0x20000cee

00400f68 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
  400f68:	b510      	push	{r4, lr}
  400f6a:	b082      	sub	sp, #8
	uint8_t resp;
	uint16_t crc;

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
  400f6c:	a902      	add	r1, sp, #8
  400f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400f72:	f821 3d04 	strh.w	r3, [r1, #-4]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
  400f76:	4c12      	ldr	r4, [pc, #72]	; (400fc0 <sd_mmc_spi_stop_write_block+0x58>)
  400f78:	4620      	mov	r0, r4
  400f7a:	2202      	movs	r2, #2
  400f7c:	4b11      	ldr	r3, [pc, #68]	; (400fc4 <sd_mmc_spi_stop_write_block+0x5c>)
  400f7e:	4798      	blx	r3
	// Receiv data response token
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
  400f80:	4620      	mov	r0, r4
  400f82:	f10d 0107 	add.w	r1, sp, #7
  400f86:	2201      	movs	r2, #1
  400f88:	4b0f      	ldr	r3, [pc, #60]	; (400fc8 <sd_mmc_spi_stop_write_block+0x60>)
  400f8a:	4798      	blx	r3
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
  400f8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400f90:	f003 0211 	and.w	r2, r3, #17
  400f94:	2a01      	cmp	r2, #1
  400f96:	d004      	beq.n	400fa2 <sd_mmc_spi_stop_write_block+0x3a>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  400f98:	2201      	movs	r2, #1
  400f9a:	4b0c      	ldr	r3, [pc, #48]	; (400fcc <sd_mmc_spi_stop_write_block+0x64>)
  400f9c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
  400f9e:	2000      	movs	r0, #0
  400fa0:	e00c      	b.n	400fbc <sd_mmc_spi_stop_write_block+0x54>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
  400fa2:	f003 031e 	and.w	r3, r3, #30
  400fa6:	2b04      	cmp	r3, #4
  400fa8:	d007      	beq.n	400fba <sd_mmc_spi_stop_write_block+0x52>
  400faa:	2b0a      	cmp	r3, #10
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
  400fac:	bf0c      	ite	eq
  400fae:	2208      	moveq	r2, #8
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
  400fb0:	220a      	movne	r2, #10
  400fb2:	4b06      	ldr	r3, [pc, #24]	; (400fcc <sd_mmc_spi_stop_write_block+0x64>)
  400fb4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
  400fb6:	2000      	movs	r0, #0
  400fb8:	e000      	b.n	400fbc <sd_mmc_spi_stop_write_block+0x54>
	}
	return true;
  400fba:	2001      	movs	r0, #1
}
  400fbc:	b002      	add	sp, #8
  400fbe:	bd10      	pop	{r4, pc}
  400fc0:	40008000 	.word	0x40008000
  400fc4:	004015f9 	.word	0x004015f9
  400fc8:	00401631 	.word	0x00401631
  400fcc:	20000cee 	.word	0x20000cee

00400fd0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
  400fd0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  400fd2:	2200      	movs	r2, #0
  400fd4:	4b06      	ldr	r3, [pc, #24]	; (400ff0 <sd_mmc_spi_init+0x20>)
  400fd6:	701a      	strb	r2, [r3, #0]
 *
 * \return 1 if the SPI is enabled, otherwise 0.
 */
static inline uint32_t spi_is_enabled(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  400fd8:	4b06      	ldr	r3, [pc, #24]	; (400ff4 <sd_mmc_spi_init+0x24>)
  400fda:	691b      	ldr	r3, [r3, #16]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  400fdc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400fe0:	d105      	bne.n	400fee <sd_mmc_spi_init+0x1e>
		spi_master_init(SD_MMC_SPI);
  400fe2:	4c04      	ldr	r4, [pc, #16]	; (400ff4 <sd_mmc_spi_init+0x24>)
  400fe4:	4620      	mov	r0, r4
  400fe6:	4b04      	ldr	r3, [pc, #16]	; (400ff8 <sd_mmc_spi_init+0x28>)
  400fe8:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400fea:	2301      	movs	r3, #1
  400fec:	6023      	str	r3, [r4, #0]
  400fee:	bd10      	pop	{r4, pc}
  400ff0:	20000cee 	.word	0x20000cee
  400ff4:	40008000 	.word	0x40008000
  400ff8:	004014d9 	.word	0x004014d9

00400ffc <sd_mmc_spi_select_device>:
#endif
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
  400ffc:	b570      	push	{r4, r5, r6, lr}
  400ffe:	b082      	sub	sp, #8
  401000:	460b      	mov	r3, r1
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401002:	2200      	movs	r2, #0
  401004:	4908      	ldr	r1, [pc, #32]	; (401028 <sd_mmc_spi_select_device+0x2c>)
  401006:	700a      	strb	r2, [r1, #0]
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
  401008:	4c08      	ldr	r4, [pc, #32]	; (40102c <sd_mmc_spi_select_device+0x30>)
  40100a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  40100e:	4d08      	ldr	r5, [pc, #32]	; (401030 <sd_mmc_spi_select_device+0x34>)
  401010:	9200      	str	r2, [sp, #0]
  401012:	4628      	mov	r0, r5
  401014:	4621      	mov	r1, r4
  401016:	4e07      	ldr	r6, [pc, #28]	; (401034 <sd_mmc_spi_select_device+0x38>)
  401018:	47b0      	blx	r6
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  40101a:	4628      	mov	r0, r5
  40101c:	4621      	mov	r1, r4
  40101e:	4b06      	ldr	r3, [pc, #24]	; (401038 <sd_mmc_spi_select_device+0x3c>)
  401020:	4798      	blx	r3
}
  401022:	b002      	add	sp, #8
  401024:	bd70      	pop	{r4, r5, r6, pc}
  401026:	bf00      	nop
  401028:	20000cee 	.word	0x20000cee
  40102c:	2000042c 	.word	0x2000042c
  401030:	40008000 	.word	0x40008000
  401034:	0040152d 	.word	0x0040152d
  401038:	004015a9 	.word	0x004015a9

0040103c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
  40103c:	b508      	push	{r3, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40103e:	2200      	movs	r2, #0
  401040:	4b04      	ldr	r3, [pc, #16]	; (401054 <sd_mmc_spi_deselect_device+0x18>)
  401042:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  401044:	4904      	ldr	r1, [pc, #16]	; (401058 <sd_mmc_spi_deselect_device+0x1c>)
  401046:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  40104a:	4804      	ldr	r0, [pc, #16]	; (40105c <sd_mmc_spi_deselect_device+0x20>)
  40104c:	4b04      	ldr	r3, [pc, #16]	; (401060 <sd_mmc_spi_deselect_device+0x24>)
  40104e:	4798      	blx	r3
  401050:	bd08      	pop	{r3, pc}
  401052:	bf00      	nop
  401054:	20000cee 	.word	0x20000cee
  401058:	2000042c 	.word	0x2000042c
  40105c:	40008000 	.word	0x40008000
  401060:	004015d9 	.word	0x004015d9

00401064 <sd_mmc_spi_send_clock>:
}

void sd_mmc_spi_send_clock(void)
{
  401064:	b5f0      	push	{r4, r5, r6, r7, lr}
  401066:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
  401068:	ad02      	add	r5, sp, #8
  40106a:	23ff      	movs	r3, #255	; 0xff
  40106c:	f805 3d01 	strb.w	r3, [r5, #-1]!

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401070:	2200      	movs	r2, #0
  401072:	4b07      	ldr	r3, [pc, #28]	; (401090 <sd_mmc_spi_send_clock+0x2c>)
  401074:	701a      	strb	r2, [r3, #0]
  401076:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
  401078:	4f06      	ldr	r7, [pc, #24]	; (401094 <sd_mmc_spi_send_clock+0x30>)
  40107a:	4e07      	ldr	r6, [pc, #28]	; (401098 <sd_mmc_spi_send_clock+0x34>)
  40107c:	4638      	mov	r0, r7
  40107e:	4629      	mov	r1, r5
  401080:	2201      	movs	r2, #1
  401082:	47b0      	blx	r6
  401084:	1e63      	subs	r3, r4, #1
	uint8_t i;
	uint8_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
  401086:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40108a:	d1f7      	bne.n	40107c <sd_mmc_spi_send_clock+0x18>
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
	}
}
  40108c:	b003      	add	sp, #12
  40108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401090:	20000cee 	.word	0x20000cee
  401094:	40008000 	.word	0x40008000
  401098:	004015f9 	.word	0x004015f9

0040109c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
  40109c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4010a0:	b085      	sub	sp, #20
  4010a2:	4606      	mov	r6, r0
  4010a4:	4690      	mov	r8, r2
  4010a6:	461f      	mov	r7, r3
	uint8_t dummy = 0xFF;
  4010a8:	23ff      	movs	r3, #255	; 0xff
  4010aa:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4010ae:	2300      	movs	r3, #0
  4010b0:	4a51      	ldr	r2, [pc, #324]	; (4011f8 <sd_mmc_spi_adtc_start+0x15c>)
  4010b2:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
  4010b4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  4010b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4010bc:	f88d 2008 	strb.w	r2, [sp, #8]
	cmd_token[1] = arg >> 24;
  4010c0:	0e0a      	lsrs	r2, r1, #24
  4010c2:	f88d 2009 	strb.w	r2, [sp, #9]
	cmd_token[2] = arg >> 16;
  4010c6:	0c0a      	lsrs	r2, r1, #16
  4010c8:	f88d 200a 	strb.w	r2, [sp, #10]
	cmd_token[3] = arg >> 8;
  4010cc:	0a0a      	lsrs	r2, r1, #8
  4010ce:	f88d 200b 	strb.w	r2, [sp, #11]
	cmd_token[4] = arg;
  4010d2:	f88d 100c 	strb.w	r1, [sp, #12]
  4010d6:	f10d 0207 	add.w	r2, sp, #7
  4010da:	f10d 0e0c 	add.w	lr, sp, #12
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
	uint8_t crc, value, i;

	crc = 0;
  4010de:	4619      	mov	r1, r3
	while (size--) {
		value = *buf++;
  4010e0:	2008      	movs	r0, #8
  4010e2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
  4010e6:	4605      	mov	r5, r0
		for (i = 0; i < 8; i++) {
			crc <<= 1;
  4010e8:	0049      	lsls	r1, r1, #1
  4010ea:	b2c9      	uxtb	r1, r1
			if ((value & 0x80) ^ (crc & 0x80)) {
  4010ec:	ea84 0301 	eor.w	r3, r4, r1
  4010f0:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc ^= 0x09;
  4010f4:	bf18      	it	ne
  4010f6:	f081 0109 	eorne.w	r1, r1, #9
			}
			value <<= 1;
  4010fa:	0064      	lsls	r4, r4, #1
  4010fc:	b2e4      	uxtb	r4, r4
  4010fe:	3d01      	subs	r5, #1
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
		value = *buf++;
		for (i = 0; i < 8; i++) {
  401100:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  401104:	d1f0      	bne.n	4010e8 <sd_mmc_spi_adtc_start+0x4c>
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
  401106:	4572      	cmp	r2, lr
  401108:	d1eb      	bne.n	4010e2 <sd_mmc_spi_adtc_start+0x46>
				crc ^= 0x09;
			}
			value <<= 1;
		}
	}
	crc = (crc << 1) | 1;
  40110a:	004b      	lsls	r3, r1, #1
  40110c:	f043 0301 	orr.w	r3, r3, #1
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
	cmd_token[1] = arg >> 24;
	cmd_token[2] = arg >> 16;
	cmd_token[3] = arg >> 8;
	cmd_token[4] = arg;
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
  401110:	f88d 300d 	strb.w	r3, [sp, #13]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  401114:	4c39      	ldr	r4, [pc, #228]	; (4011fc <sd_mmc_spi_adtc_start+0x160>)
  401116:	4620      	mov	r0, r4
  401118:	f10d 010f 	add.w	r1, sp, #15
  40111c:	2201      	movs	r2, #1
  40111e:	4d38      	ldr	r5, [pc, #224]	; (401200 <sd_mmc_spi_adtc_start+0x164>)
  401120:	47a8      	blx	r5
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
  401122:	4620      	mov	r0, r4
  401124:	a902      	add	r1, sp, #8
  401126:	2206      	movs	r2, #6
  401128:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
  40112a:	a904      	add	r1, sp, #16
  40112c:	23ff      	movs	r3, #255	; 0xff
  40112e:	f801 3d09 	strb.w	r3, [r1, #-9]!
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
  401132:	4620      	mov	r0, r4
  401134:	2201      	movs	r2, #1
  401136:	4b33      	ldr	r3, [pc, #204]	; (401204 <sd_mmc_spi_adtc_start+0x168>)
  401138:	4798      	blx	r3
  40113a:	2407      	movs	r4, #7
	ncr_timeout = 7;
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
  40113c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4011fc <sd_mmc_spi_adtc_start+0x160>
  401140:	4d30      	ldr	r5, [pc, #192]	; (401204 <sd_mmc_spi_adtc_start+0x168>)
  401142:	4648      	mov	r0, r9
  401144:	f10d 0107 	add.w	r1, sp, #7
  401148:	2201      	movs	r2, #1
  40114a:	47a8      	blx	r5
		if ((r1 & R1_SPI_ERROR) == 0) {
  40114c:	f89d 2007 	ldrb.w	r2, [sp, #7]
  401150:	f012 0f80 	tst.w	r2, #128	; 0x80
  401154:	d008      	beq.n	401168 <sd_mmc_spi_adtc_start+0xcc>
  401156:	1e63      	subs	r3, r4, #1
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
  401158:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40115c:	d1f1      	bne.n	401142 <sd_mmc_spi_adtc_start+0xa6>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
  40115e:	2202      	movs	r2, #2
  401160:	4b25      	ldr	r3, [pc, #148]	; (4011f8 <sd_mmc_spi_adtc_start+0x15c>)
  401162:	701a      	strb	r2, [r3, #0]
			return false;
  401164:	2300      	movs	r3, #0
  401166:	e043      	b.n	4011f0 <sd_mmc_spi_adtc_start+0x154>
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
  401168:	4b27      	ldr	r3, [pc, #156]	; (401208 <sd_mmc_spi_adtc_start+0x16c>)
  40116a:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
  40116c:	f012 0f08 	tst.w	r2, #8
  401170:	d004      	beq.n	40117c <sd_mmc_spi_adtc_start+0xe0>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
  401172:	2206      	movs	r2, #6
  401174:	4b20      	ldr	r3, [pc, #128]	; (4011f8 <sd_mmc_spi_adtc_start+0x15c>)
  401176:	701a      	strb	r2, [r3, #0]
		return false;
  401178:	2300      	movs	r3, #0
  40117a:	e039      	b.n	4011f0 <sd_mmc_spi_adtc_start+0x154>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
  40117c:	f012 0f04 	tst.w	r2, #4
  401180:	d004      	beq.n	40118c <sd_mmc_spi_adtc_start+0xf0>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
  401182:	2209      	movs	r2, #9
  401184:	4b1c      	ldr	r3, [pc, #112]	; (4011f8 <sd_mmc_spi_adtc_start+0x15c>)
  401186:	701a      	strb	r2, [r3, #0]
		return false;
  401188:	2300      	movs	r3, #0
  40118a:	e031      	b.n	4011f0 <sd_mmc_spi_adtc_start+0x154>
	}
	if (r1 & ~R1_SPI_IDLE) {
  40118c:	f032 0301 	bics.w	r3, r2, #1
  401190:	d004      	beq.n	40119c <sd_mmc_spi_adtc_start+0x100>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  401192:	2201      	movs	r2, #1
  401194:	4b18      	ldr	r3, [pc, #96]	; (4011f8 <sd_mmc_spi_adtc_start+0x15c>)
  401196:	701a      	strb	r2, [r3, #0]
		return false;
  401198:	2300      	movs	r3, #0
  40119a:	e029      	b.n	4011f0 <sd_mmc_spi_adtc_start+0x154>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
  40119c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
  4011a0:	d007      	beq.n	4011b2 <sd_mmc_spi_adtc_start+0x116>
		if (!sd_mmc_spi_wait_busy()) {
  4011a2:	4b1a      	ldr	r3, [pc, #104]	; (40120c <sd_mmc_spi_adtc_start+0x170>)
  4011a4:	4798      	blx	r3
  4011a6:	4603      	mov	r3, r0
  4011a8:	b918      	cbnz	r0, 4011b2 <sd_mmc_spi_adtc_start+0x116>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
  4011aa:	2103      	movs	r1, #3
  4011ac:	4a12      	ldr	r2, [pc, #72]	; (4011f8 <sd_mmc_spi_adtc_start+0x15c>)
  4011ae:	7011      	strb	r1, [r2, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
  4011b0:	e01e      	b.n	4011f0 <sd_mmc_spi_adtc_start+0x154>
		}
	}
	if (cmd & SDMMC_RESP_8) {
  4011b2:	f416 7f00 	tst.w	r6, #512	; 0x200
  4011b6:	d006      	beq.n	4011c6 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_response_32 = 0;
  4011b8:	4913      	ldr	r1, [pc, #76]	; (401208 <sd_mmc_spi_adtc_start+0x16c>)
  4011ba:	2300      	movs	r3, #0
  4011bc:	600b      	str	r3, [r1, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
  4011be:	480f      	ldr	r0, [pc, #60]	; (4011fc <sd_mmc_spi_adtc_start+0x160>)
  4011c0:	2201      	movs	r2, #1
  4011c2:	4b10      	ldr	r3, [pc, #64]	; (401204 <sd_mmc_spi_adtc_start+0x168>)
  4011c4:	4798      	blx	r3
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
	}
	if (cmd & SDMMC_RESP_32) {
  4011c6:	f416 6f80 	tst.w	r6, #1024	; 0x400
  4011ca:	d008      	beq.n	4011de <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
  4011cc:	4c0e      	ldr	r4, [pc, #56]	; (401208 <sd_mmc_spi_adtc_start+0x16c>)
  4011ce:	480b      	ldr	r0, [pc, #44]	; (4011fc <sd_mmc_spi_adtc_start+0x160>)
  4011d0:	4621      	mov	r1, r4
  4011d2:	2204      	movs	r2, #4
  4011d4:	4b0b      	ldr	r3, [pc, #44]	; (401204 <sd_mmc_spi_adtc_start+0x168>)
  4011d6:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
  4011d8:	6823      	ldr	r3, [r4, #0]
  4011da:	ba1b      	rev	r3, r3
  4011dc:	6023      	str	r3, [r4, #0]
	}

	sd_mmc_spi_block_size = block_size;
  4011de:	4b0c      	ldr	r3, [pc, #48]	; (401210 <sd_mmc_spi_adtc_start+0x174>)
  4011e0:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_spi_nb_block = nb_block;
  4011e4:	4b0b      	ldr	r3, [pc, #44]	; (401214 <sd_mmc_spi_adtc_start+0x178>)
  4011e6:	801f      	strh	r7, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
  4011e8:	2200      	movs	r2, #0
  4011ea:	4b0b      	ldr	r3, [pc, #44]	; (401218 <sd_mmc_spi_adtc_start+0x17c>)
  4011ec:	601a      	str	r2, [r3, #0]
	return true; // Command complete
  4011ee:	2301      	movs	r3, #1
}
  4011f0:	4618      	mov	r0, r3
  4011f2:	b005      	add	sp, #20
  4011f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011f8:	20000cee 	.word	0x20000cee
  4011fc:	40008000 	.word	0x40008000
  401200:	004015f9 	.word	0x004015f9
  401204:	00401631 	.word	0x00401631
  401208:	20000cf0 	.word	0x20000cf0
  40120c:	00400e39 	.word	0x00400e39
  401210:	20000cec 	.word	0x20000cec
  401214:	20000ce4 	.word	0x20000ce4
  401218:	20000ce8 	.word	0x20000ce8

0040121c <sd_mmc_spi_send_cmd>:
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
	}
}

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  40121c:	b510      	push	{r4, lr}
  40121e:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
  401220:	2300      	movs	r3, #0
  401222:	9300      	str	r3, [sp, #0]
  401224:	461a      	mov	r2, r3
  401226:	4c02      	ldr	r4, [pc, #8]	; (401230 <sd_mmc_spi_send_cmd+0x14>)
  401228:	47a0      	blx	r4
}
  40122a:	b002      	add	sp, #8
  40122c:	bd10      	pop	{r4, pc}
  40122e:	bf00      	nop
  401230:	0040109d 	.word	0x0040109d

00401234 <sd_mmc_spi_get_response>:
}

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
}
  401234:	4b01      	ldr	r3, [pc, #4]	; (40123c <sd_mmc_spi_get_response+0x8>)
  401236:	6818      	ldr	r0, [r3, #0]
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	20000cf0 	.word	0x20000cf0

00401240 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
  401240:	b530      	push	{r4, r5, lr}
  401242:	b083      	sub	sp, #12
  401244:	4605      	mov	r5, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401246:	2200      	movs	r2, #0
  401248:	4b14      	ldr	r3, [pc, #80]	; (40129c <sd_mmc_spi_read_word+0x5c>)
  40124a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  40124c:	4b14      	ldr	r3, [pc, #80]	; (4012a0 <sd_mmc_spi_read_word+0x60>)
  40124e:	881b      	ldrh	r3, [r3, #0]
  401250:	4a14      	ldr	r2, [pc, #80]	; (4012a4 <sd_mmc_spi_read_word+0x64>)
  401252:	6812      	ldr	r2, [r2, #0]
  401254:	fbb2 f4f3 	udiv	r4, r2, r3
  401258:	fb03 2314 	mls	r3, r3, r4, r2
  40125c:	b91b      	cbnz	r3, 401266 <sd_mmc_spi_read_word+0x26>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
  40125e:	4b12      	ldr	r3, [pc, #72]	; (4012a8 <sd_mmc_spi_read_word+0x68>)
  401260:	4798      	blx	r3
  401262:	4603      	mov	r3, r0
  401264:	b1b8      	cbz	r0, 401296 <sd_mmc_spi_read_word+0x56>
			return false;
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
  401266:	4811      	ldr	r0, [pc, #68]	; (4012ac <sd_mmc_spi_read_word+0x6c>)
  401268:	4629      	mov	r1, r5
  40126a:	2204      	movs	r2, #4
  40126c:	4b10      	ldr	r3, [pc, #64]	; (4012b0 <sd_mmc_spi_read_word+0x70>)
  40126e:	4798      	blx	r3
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
  401270:	4a0c      	ldr	r2, [pc, #48]	; (4012a4 <sd_mmc_spi_read_word+0x64>)
  401272:	6813      	ldr	r3, [r2, #0]
  401274:	3304      	adds	r3, #4
  401276:	6013      	str	r3, [r2, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  401278:	4a09      	ldr	r2, [pc, #36]	; (4012a0 <sd_mmc_spi_read_word+0x60>)
  40127a:	8812      	ldrh	r2, [r2, #0]
  40127c:	fbb3 f1f2 	udiv	r1, r3, r2
  401280:	fb02 3311 	mls	r3, r2, r1, r3
  401284:	b933      	cbnz	r3, 401294 <sd_mmc_spi_read_word+0x54>
 */
static void sd_mmc_spi_stop_read_block(void)
{
	uint8_t crc[2];
	// Read 16-bit CRC (not cheked)
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  401286:	4809      	ldr	r0, [pc, #36]	; (4012ac <sd_mmc_spi_read_word+0x6c>)
  401288:	a901      	add	r1, sp, #4
  40128a:	2202      	movs	r2, #2
  40128c:	4b08      	ldr	r3, [pc, #32]	; (4012b0 <sd_mmc_spi_read_word+0x70>)
  40128e:	4798      	blx	r3

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
  401290:	2301      	movs	r3, #1
  401292:	e000      	b.n	401296 <sd_mmc_spi_read_word+0x56>
  401294:	2301      	movs	r3, #1
}
  401296:	4618      	mov	r0, r3
  401298:	b003      	add	sp, #12
  40129a:	bd30      	pop	{r4, r5, pc}
  40129c:	20000cee 	.word	0x20000cee
  4012a0:	20000cec 	.word	0x20000cec
  4012a4:	20000ce8 	.word	0x20000ce8
  4012a8:	00400f09 	.word	0x00400f09
  4012ac:	40008000 	.word	0x40008000
  4012b0:	00401631 	.word	0x00401631

004012b4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
  4012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012b8:	b083      	sub	sp, #12
  4012ba:	4683      	mov	fp, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4012bc:	2200      	movs	r2, #0
  4012be:	4b14      	ldr	r3, [pc, #80]	; (401310 <sd_mmc_spi_start_read_blocks+0x5c>)
  4012c0:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
  4012c2:	460d      	mov	r5, r1
  4012c4:	b1e9      	cbz	r1, 401302 <sd_mmc_spi_start_read_blocks+0x4e>
bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
  4012c6:	4614      	mov	r4, r2
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  4012c8:	f8df a054 	ldr.w	sl, [pc, #84]	; 401320 <sd_mmc_spi_start_read_blocks+0x6c>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  4012cc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 401324 <sd_mmc_spi_start_read_blocks+0x70>
  4012d0:	4f10      	ldr	r7, [pc, #64]	; (401314 <sd_mmc_spi_start_read_blocks+0x60>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  4012d2:	47d0      	blx	sl
  4012d4:	4681      	mov	r9, r0
  4012d6:	b1b0      	cbz	r0, 401306 <sd_mmc_spi_start_read_blocks+0x52>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  4012d8:	4640      	mov	r0, r8
  4012da:	eb0b 0104 	add.w	r1, fp, r4
  4012de:	883a      	ldrh	r2, [r7, #0]
  4012e0:	4e0d      	ldr	r6, [pc, #52]	; (401318 <sd_mmc_spi_start_read_blocks+0x64>)
  4012e2:	47b0      	blx	r6
		pos += sd_mmc_spi_block_size;
  4012e4:	883a      	ldrh	r2, [r7, #0]
  4012e6:	4414      	add	r4, r2
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  4012e8:	4b0c      	ldr	r3, [pc, #48]	; (40131c <sd_mmc_spi_start_read_blocks+0x68>)
  4012ea:	6819      	ldr	r1, [r3, #0]
  4012ec:	440a      	add	r2, r1
  4012ee:	601a      	str	r2, [r3, #0]
 */
static void sd_mmc_spi_stop_read_block(void)
{
	uint8_t crc[2];
	// Read 16-bit CRC (not cheked)
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  4012f0:	4640      	mov	r0, r8
  4012f2:	a901      	add	r1, sp, #4
  4012f4:	2202      	movs	r2, #2
  4012f6:	47b0      	blx	r6
  4012f8:	3d01      	subs	r5, #1
  4012fa:	b2ad      	uxth	r5, r5
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
  4012fc:	2d00      	cmp	r5, #0
  4012fe:	d1e8      	bne.n	4012d2 <sd_mmc_spi_start_read_blocks+0x1e>
  401300:	e001      	b.n	401306 <sd_mmc_spi_start_read_blocks+0x52>
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;

		sd_mmc_spi_stop_read_block();
	}
	return true;
  401302:	f04f 0901 	mov.w	r9, #1
}
  401306:	4648      	mov	r0, r9
  401308:	b003      	add	sp, #12
  40130a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40130e:	bf00      	nop
  401310:	20000cee 	.word	0x20000cee
  401314:	20000cec 	.word	0x20000cec
  401318:	00401631 	.word	0x00401631
  40131c:	20000ce8 	.word	0x20000ce8
  401320:	00400f09 	.word	0x00400f09
  401324:	40008000 	.word	0x40008000

00401328 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
  401328:	2001      	movs	r0, #1
  40132a:	4770      	bx	lr

0040132c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
  40132c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401330:	4681      	mov	r9, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401332:	2500      	movs	r5, #0
  401334:	4b16      	ldr	r3, [pc, #88]	; (401390 <sd_mmc_spi_start_write_blocks+0x64>)
  401336:	701d      	strb	r5, [r3, #0]
  401338:	3901      	subs	r1, #1
  40133a:	b28c      	uxth	r4, r1
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
  40133c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4013ac <sd_mmc_spi_start_write_blocks+0x80>

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  401340:	4f14      	ldr	r7, [pc, #80]	; (401394 <sd_mmc_spi_start_write_blocks+0x68>)
  401342:	4e15      	ldr	r6, [pc, #84]	; (401398 <sd_mmc_spi_start_write_blocks+0x6c>)
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
  401344:	e01b      	b.n	40137e <sd_mmc_spi_start_write_blocks+0x52>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
  401346:	47c0      	blx	r8

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  401348:	4638      	mov	r0, r7
  40134a:	eb09 0105 	add.w	r1, r9, r5
  40134e:	8832      	ldrh	r2, [r6, #0]
  401350:	4b12      	ldr	r3, [pc, #72]	; (40139c <sd_mmc_spi_start_write_blocks+0x70>)
  401352:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
  401354:	8832      	ldrh	r2, [r6, #0]
  401356:	4415      	add	r5, r2
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  401358:	4b11      	ldr	r3, [pc, #68]	; (4013a0 <sd_mmc_spi_start_write_blocks+0x74>)
  40135a:	6819      	ldr	r1, [r3, #0]
  40135c:	440a      	add	r2, r1
  40135e:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
  401360:	4b10      	ldr	r3, [pc, #64]	; (4013a4 <sd_mmc_spi_start_write_blocks+0x78>)
  401362:	4798      	blx	r3
  401364:	4603      	mov	r3, r0
  401366:	b178      	cbz	r0, 401388 <sd_mmc_spi_start_write_blocks+0x5c>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
  401368:	b13c      	cbz	r4, 40137a <sd_mmc_spi_start_write_blocks+0x4e>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
  40136a:	4b0f      	ldr	r3, [pc, #60]	; (4013a8 <sd_mmc_spi_start_write_blocks+0x7c>)
  40136c:	4798      	blx	r3
  40136e:	4603      	mov	r3, r0
  401370:	b918      	cbnz	r0, 40137a <sd_mmc_spi_start_write_blocks+0x4e>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  401372:	2105      	movs	r1, #5
  401374:	4a06      	ldr	r2, [pc, #24]	; (401390 <sd_mmc_spi_start_write_blocks+0x64>)
  401376:	7011      	strb	r1, [r2, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
  401378:	e006      	b.n	401388 <sd_mmc_spi_start_write_blocks+0x5c>
  40137a:	3c01      	subs	r4, #1
  40137c:	b2a4      	uxth	r4, r4
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
  40137e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401382:	429c      	cmp	r4, r3
  401384:	d1df      	bne.n	401346 <sd_mmc_spi_start_write_blocks+0x1a>
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
			}
		}
	}
	return true;
  401386:	2301      	movs	r3, #1
}
  401388:	4618      	mov	r0, r3
  40138a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40138e:	bf00      	nop
  401390:	20000cee 	.word	0x20000cee
  401394:	40008000 	.word	0x40008000
  401398:	20000cec 	.word	0x20000cec
  40139c:	004015f9 	.word	0x004015f9
  4013a0:	20000ce8 	.word	0x20000ce8
  4013a4:	00400f69 	.word	0x00400f69
  4013a8:	00400e39 	.word	0x00400e39
  4013ac:	00400df5 	.word	0x00400df5

004013b0 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
  4013b0:	b508      	push	{r3, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
  4013b2:	4b06      	ldr	r3, [pc, #24]	; (4013cc <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
  4013b4:	4798      	blx	r3
  4013b6:	4603      	mov	r3, r0
  4013b8:	b918      	cbnz	r0, 4013c2 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  4013ba:	2105      	movs	r1, #5
  4013bc:	4a04      	ldr	r2, [pc, #16]	; (4013d0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
  4013be:	7011      	strb	r1, [r2, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
  4013c0:	e002      	b.n	4013c8 <sd_mmc_spi_wait_end_of_write_blocks+0x18>
	}
	return sd_mmc_spi_stop_multiwrite_block();
  4013c2:	4b04      	ldr	r3, [pc, #16]	; (4013d4 <sd_mmc_spi_wait_end_of_write_blocks+0x24>)
  4013c4:	4798      	blx	r3
  4013c6:	4603      	mov	r3, r0
}
  4013c8:	4618      	mov	r0, r3
  4013ca:	bd08      	pop	{r3, pc}
  4013cc:	00400e39 	.word	0x00400e39
  4013d0:	20000cee 	.word	0x20000cee
  4013d4:	00400e91 	.word	0x00400e91

004013d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4013d8:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4013da:	480e      	ldr	r0, [pc, #56]	; (401414 <sysclk_init+0x3c>)
  4013dc:	4b0e      	ldr	r3, [pc, #56]	; (401418 <sysclk_init+0x40>)
  4013de:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4013e0:	2000      	movs	r0, #0
  4013e2:	213e      	movs	r1, #62	; 0x3e
  4013e4:	4b0d      	ldr	r3, [pc, #52]	; (40141c <sysclk_init+0x44>)
  4013e6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4013e8:	4c0d      	ldr	r4, [pc, #52]	; (401420 <sysclk_init+0x48>)
  4013ea:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4013ec:	2800      	cmp	r0, #0
  4013ee:	d0fc      	beq.n	4013ea <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4013f0:	4b0c      	ldr	r3, [pc, #48]	; (401424 <sysclk_init+0x4c>)
  4013f2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4013f4:	4a0c      	ldr	r2, [pc, #48]	; (401428 <sysclk_init+0x50>)
  4013f6:	4b0d      	ldr	r3, [pc, #52]	; (40142c <sysclk_init+0x54>)
  4013f8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4013fa:	4c0d      	ldr	r4, [pc, #52]	; (401430 <sysclk_init+0x58>)
  4013fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4013fe:	2800      	cmp	r0, #0
  401400:	d0fc      	beq.n	4013fc <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401402:	2010      	movs	r0, #16
  401404:	4b0b      	ldr	r3, [pc, #44]	; (401434 <sysclk_init+0x5c>)
  401406:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401408:	4b0b      	ldr	r3, [pc, #44]	; (401438 <sysclk_init+0x60>)
  40140a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40140c:	4801      	ldr	r0, [pc, #4]	; (401414 <sysclk_init+0x3c>)
  40140e:	4b02      	ldr	r3, [pc, #8]	; (401418 <sysclk_init+0x40>)
  401410:	4798      	blx	r3
  401412:	bd10      	pop	{r4, pc}
  401414:	07270e00 	.word	0x07270e00
  401418:	0040235d 	.word	0x0040235d
  40141c:	00401db5 	.word	0x00401db5
  401420:	00401e09 	.word	0x00401e09
  401424:	00401e19 	.word	0x00401e19
  401428:	20133f01 	.word	0x20133f01
  40142c:	400e0400 	.word	0x400e0400
  401430:	00401e29 	.word	0x00401e29
  401434:	00401d51 	.word	0x00401d51
  401438:	00402249 	.word	0x00402249

0040143c <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
  40143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401440:	b083      	sub	sp, #12
  401442:	4605      	mov	r5, r0
	while (len) {
  401444:	4616      	mov	r6, r2
  401446:	2a00      	cmp	r2, #0
  401448:	d035      	beq.n	4014b6 <usart_serial_write_packet+0x7a>
  40144a:	f101 38ff 	add.w	r8, r1, #4294967295
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40144e:	4f1c      	ldr	r7, [pc, #112]	; (4014c0 <usart_serial_write_packet+0x84>)
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401450:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4014cc <usart_serial_write_packet+0x90>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
  401454:	f8df b070 	ldr.w	fp, [pc, #112]	; 4014c8 <usart_serial_write_packet+0x8c>
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
  401458:	4b1a      	ldr	r3, [pc, #104]	; (4014c4 <usart_serial_write_packet+0x88>)
  40145a:	9301      	str	r3, [sp, #4]
		usart_serial_putchar(usart, *data);
  40145c:	f818 4f01 	ldrb.w	r4, [r8, #1]!
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401460:	42bd      	cmp	r5, r7
  401462:	d107      	bne.n	401474 <usart_serial_write_packet+0x38>
		while (uart_write((Uart*)p_usart, c)!=0);
  401464:	f8df a068 	ldr.w	sl, [pc, #104]	; 4014d0 <usart_serial_write_packet+0x94>
  401468:	4638      	mov	r0, r7
  40146a:	4621      	mov	r1, r4
  40146c:	47d0      	blx	sl
  40146e:	2800      	cmp	r0, #0
  401470:	d1fa      	bne.n	401468 <usart_serial_write_packet+0x2c>
  401472:	e01e      	b.n	4014b2 <usart_serial_write_packet+0x76>
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401474:	4b13      	ldr	r3, [pc, #76]	; (4014c4 <usart_serial_write_packet+0x88>)
  401476:	429d      	cmp	r5, r3
  401478:	d107      	bne.n	40148a <usart_serial_write_packet+0x4e>
		while (uart_write((Uart*)p_usart, c)!=0);
  40147a:	f8df a054 	ldr.w	sl, [pc, #84]	; 4014d0 <usart_serial_write_packet+0x94>
  40147e:	9801      	ldr	r0, [sp, #4]
  401480:	4621      	mov	r1, r4
  401482:	47d0      	blx	sl
  401484:	2800      	cmp	r0, #0
  401486:	d1fa      	bne.n	40147e <usart_serial_write_packet+0x42>
  401488:	e013      	b.n	4014b2 <usart_serial_write_packet+0x76>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40148a:	454d      	cmp	r5, r9
  40148c:	d107      	bne.n	40149e <usart_serial_write_packet+0x62>
		while (usart_write(p_usart, c)!=0);
  40148e:	f8df a044 	ldr.w	sl, [pc, #68]	; 4014d4 <usart_serial_write_packet+0x98>
  401492:	4648      	mov	r0, r9
  401494:	4621      	mov	r1, r4
  401496:	47d0      	blx	sl
  401498:	2800      	cmp	r0, #0
  40149a:	d1fa      	bne.n	401492 <usart_serial_write_packet+0x56>
  40149c:	e009      	b.n	4014b2 <usart_serial_write_packet+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40149e:	4b0a      	ldr	r3, [pc, #40]	; (4014c8 <usart_serial_write_packet+0x8c>)
  4014a0:	429d      	cmp	r5, r3
  4014a2:	d106      	bne.n	4014b2 <usart_serial_write_packet+0x76>
		while (usart_write(p_usart, c)!=0);
  4014a4:	f8df a02c 	ldr.w	sl, [pc, #44]	; 4014d4 <usart_serial_write_packet+0x98>
  4014a8:	4658      	mov	r0, fp
  4014aa:	4621      	mov	r1, r4
  4014ac:	47d0      	blx	sl
  4014ae:	2800      	cmp	r0, #0
  4014b0:	d1fa      	bne.n	4014a8 <usart_serial_write_packet+0x6c>
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4014b2:	3e01      	subs	r6, #1
  4014b4:	d1d2      	bne.n	40145c <usart_serial_write_packet+0x20>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
  4014b6:	2000      	movs	r0, #0
  4014b8:	b003      	add	sp, #12
  4014ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014be:	bf00      	nop
  4014c0:	400e0600 	.word	0x400e0600
  4014c4:	400e0800 	.word	0x400e0800
  4014c8:	40028000 	.word	0x40028000
  4014cc:	40024000 	.word	0x40024000
  4014d0:	00402155 	.word	0x00402155
  4014d4:	00402175 	.word	0x00402175

004014d8 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4014d8:	b510      	push	{r4, lr}
  4014da:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4014dc:	4b10      	ldr	r3, [pc, #64]	; (401520 <spi_master_init+0x48>)
  4014de:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4014e0:	2380      	movs	r3, #128	; 0x80
  4014e2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4014e4:	6863      	ldr	r3, [r4, #4]
  4014e6:	f043 0301 	orr.w	r3, r3, #1
  4014ea:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4014ec:	6863      	ldr	r3, [r4, #4]
  4014ee:	f043 0310 	orr.w	r3, r3, #16
  4014f2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4014f4:	6863      	ldr	r3, [r4, #4]
  4014f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4014fa:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4014fc:	4620      	mov	r0, r4
  4014fe:	2100      	movs	r1, #0
  401500:	4b08      	ldr	r3, [pc, #32]	; (401524 <spi_master_init+0x4c>)
  401502:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401504:	6863      	ldr	r3, [r4, #4]
  401506:	f023 0302 	bic.w	r3, r3, #2
  40150a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40150c:	6863      	ldr	r3, [r4, #4]
  40150e:	f023 0304 	bic.w	r3, r3, #4
  401512:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  401514:	4620      	mov	r0, r4
  401516:	2100      	movs	r1, #0
  401518:	4b03      	ldr	r3, [pc, #12]	; (401528 <spi_master_init+0x50>)
  40151a:	4798      	blx	r3
  40151c:	bd10      	pop	{r4, pc}
  40151e:	bf00      	nop
  401520:	00401ea9 	.word	0x00401ea9
  401524:	00401eb9 	.word	0x00401eb9
  401528:	00401ed1 	.word	0x00401ed1

0040152c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40152e:	4605      	mov	r5, r0
  401530:	460c      	mov	r4, r1
  401532:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  401534:	4618      	mov	r0, r3
  401536:	4914      	ldr	r1, [pc, #80]	; (401588 <spi_master_setup_device+0x5c>)
  401538:	4b14      	ldr	r3, [pc, #80]	; (40158c <spi_master_setup_device+0x60>)
  40153a:	4798      	blx	r3
  40153c:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  40153e:	4628      	mov	r0, r5
  401540:	6821      	ldr	r1, [r4, #0]
  401542:	2200      	movs	r2, #0
  401544:	4613      	mov	r3, r2
  401546:	f8df c05c 	ldr.w	ip, [pc, #92]	; 4015a4 <spi_master_setup_device+0x78>
  40154a:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40154c:	4628      	mov	r0, r5
  40154e:	6821      	ldr	r1, [r4, #0]
  401550:	2208      	movs	r2, #8
  401552:	4b0f      	ldr	r3, [pc, #60]	; (401590 <spi_master_setup_device+0x64>)
  401554:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  401556:	4628      	mov	r0, r5
  401558:	6821      	ldr	r1, [r4, #0]
  40155a:	b2fa      	uxtb	r2, r7
  40155c:	4b0d      	ldr	r3, [pc, #52]	; (401594 <spi_master_setup_device+0x68>)
  40155e:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  401560:	4628      	mov	r0, r5
  401562:	6821      	ldr	r1, [r4, #0]
  401564:	2208      	movs	r2, #8
  401566:	4b0c      	ldr	r3, [pc, #48]	; (401598 <spi_master_setup_device+0x6c>)
  401568:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40156a:	4628      	mov	r0, r5
  40156c:	6821      	ldr	r1, [r4, #0]
  40156e:	0872      	lsrs	r2, r6, #1
  401570:	4b0a      	ldr	r3, [pc, #40]	; (40159c <spi_master_setup_device+0x70>)
  401572:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  401574:	f086 0201 	eor.w	r2, r6, #1
  401578:	4628      	mov	r0, r5
  40157a:	6821      	ldr	r1, [r4, #0]
  40157c:	f002 0201 	and.w	r2, r2, #1
  401580:	4b07      	ldr	r3, [pc, #28]	; (4015a0 <spi_master_setup_device+0x74>)
  401582:	4798      	blx	r3
  401584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401586:	bf00      	nop
  401588:	07270e00 	.word	0x07270e00
  40158c:	00401f7d 	.word	0x00401f7d
  401590:	00401f69 	.word	0x00401f69
  401594:	00401f95 	.word	0x00401f95
  401598:	00401f25 	.word	0x00401f25
  40159c:	00401ee5 	.word	0x00401ee5
  4015a0:	00401f05 	.word	0x00401f05
  4015a4:	00401fad 	.word	0x00401fad

004015a8 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4015a8:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4015aa:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4015ac:	f013 0f04 	tst.w	r3, #4
  4015b0:	d005      	beq.n	4015be <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4015b2:	6809      	ldr	r1, [r1, #0]
  4015b4:	290f      	cmp	r1, #15
  4015b6:	d80b      	bhi.n	4015d0 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4015b8:	4b06      	ldr	r3, [pc, #24]	; (4015d4 <spi_select_device+0x2c>)
  4015ba:	4798      	blx	r3
  4015bc:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4015be:	680b      	ldr	r3, [r1, #0]
  4015c0:	2b03      	cmp	r3, #3
  4015c2:	d805      	bhi.n	4015d0 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4015c4:	2201      	movs	r2, #1
  4015c6:	fa02 f103 	lsl.w	r1, r2, r3
  4015ca:	43c9      	mvns	r1, r1
  4015cc:	4b01      	ldr	r3, [pc, #4]	; (4015d4 <spi_select_device+0x2c>)
  4015ce:	4798      	blx	r3
  4015d0:	bd08      	pop	{r3, pc}
  4015d2:	bf00      	nop
  4015d4:	00401eb9 	.word	0x00401eb9

004015d8 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  4015d8:	b510      	push	{r4, lr}
  4015da:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4015dc:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  4015de:	f413 7f00 	tst.w	r3, #512	; 0x200
  4015e2:	d0fb      	beq.n	4015dc <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4015e4:	4620      	mov	r0, r4
  4015e6:	210f      	movs	r1, #15
  4015e8:	4b02      	ldr	r3, [pc, #8]	; (4015f4 <spi_deselect_device+0x1c>)
  4015ea:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4015ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4015f0:	6023      	str	r3, [r4, #0]
  4015f2:	bd10      	pop	{r4, pc}
  4015f4:	00401eb9 	.word	0x00401eb9

004015f8 <spi_write_packet>:
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  4015f8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4015fa:	4617      	mov	r7, r2
  4015fc:	b922      	cbnz	r2, 401608 <spi_write_packet+0x10>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4015fe:	2000      	movs	r0, #0
  401600:	e013      	b.n	40162a <spi_write_packet+0x32>
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  401602:	3b01      	subs	r3, #1
  401604:	d104      	bne.n	401610 <spi_write_packet+0x18>
  401606:	e00d      	b.n	401624 <spi_write_packet+0x2c>
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
  401608:	2500      	movs	r5, #0
  40160a:	f643 2699 	movw	r6, #15001	; 0x3a99
  40160e:	4633      	mov	r3, r6
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  401610:	6904      	ldr	r4, [r0, #16]
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  401612:	f014 0f02 	tst.w	r4, #2
  401616:	d0f4      	beq.n	401602 <spi_write_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401618:	5d4b      	ldrb	r3, [r1, r5]
  40161a:	60c3      	str	r3, [r0, #12]
				return ERR_TIMEOUT;
			}
		}
		val = data[i];
		spi_write_single(p_spi, val);
		i++;
  40161c:	3501      	adds	r5, #1
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  40161e:	42af      	cmp	r7, r5
  401620:	d1f5      	bne.n	40160e <spi_write_packet+0x16>
  401622:	e001      	b.n	401628 <spi_write_packet+0x30>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  401624:	20fd      	movs	r0, #253	; 0xfd
  401626:	e000      	b.n	40162a <spi_write_packet+0x32>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  401628:	2000      	movs	r0, #0
}
  40162a:	b240      	sxtb	r0, r0
  40162c:	bcf0      	pop	{r4, r5, r6, r7}
  40162e:	4770      	bx	lr

00401630 <spi_read_packet>:
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  401630:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  401632:	4694      	mov	ip, r2
  401634:	b922      	cbnz	r2, 401640 <spi_read_packet+0x10>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  401636:	2000      	movs	r0, #0
  401638:	e021      	b.n	40167e <spi_read_packet+0x4e>
	uint32_t i = 0;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  40163a:	3b01      	subs	r3, #1
  40163c:	d107      	bne.n	40164e <spi_read_packet+0x1e>
  40163e:	e019      	b.n	401674 <spi_read_packet+0x44>
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;
  401640:	2600      	movs	r6, #0
  401642:	f643 2799 	movw	r7, #15001	; 0x3a99
  401646:	22ff      	movs	r2, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  401648:	f240 2501 	movw	r5, #513	; 0x201
  40164c:	463b      	mov	r3, r7
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  40164e:	6904      	ldr	r4, [r0, #16]

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  401650:	f014 0f02 	tst.w	r4, #2
  401654:	d0f1      	beq.n	40163a <spi_read_packet+0xa>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401656:	60c2      	str	r2, [r0, #12]
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  401658:	463b      	mov	r3, r7
  40165a:	e001      	b.n	401660 <spi_read_packet+0x30>
			if (!timeout--) {
  40165c:	3b01      	subs	r3, #1
  40165e:	d00b      	beq.n	401678 <spi_read_packet+0x48>
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  401660:	6904      	ldr	r4, [r0, #16]
  401662:	402c      	ands	r4, r5
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  401664:	42ac      	cmp	r4, r5
  401666:	d1f9      	bne.n	40165c <spi_read_packet+0x2c>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  401668:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  40166a:	558b      	strb	r3, [r1, r6]
			}
		}
		spi_read_single(p_spi, &val);

		data[i] = val;
		i++;
  40166c:	3601      	adds	r6, #1
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  40166e:	45b4      	cmp	ip, r6
  401670:	d1ec      	bne.n	40164c <spi_read_packet+0x1c>
  401672:	e003      	b.n	40167c <spi_read_packet+0x4c>
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  401674:	20fd      	movs	r0, #253	; 0xfd
  401676:	e002      	b.n	40167e <spi_read_packet+0x4e>
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  401678:	20fd      	movs	r0, #253	; 0xfd
  40167a:	e000      	b.n	40167e <spi_read_packet+0x4e>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  40167c:	2000      	movs	r0, #0
}
  40167e:	b240      	sxtb	r0, r0
  401680:	bcf0      	pop	{r4, r5, r6, r7}
  401682:	4770      	bx	lr

00401684 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  401684:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401686:	b910      	cbnz	r0, 40168e <mem_test_unit_ready+0xa>
  401688:	4b02      	ldr	r3, [pc, #8]	; (401694 <mem_test_unit_ready+0x10>)
  40168a:	4798      	blx	r3
  40168c:	bd08      	pop	{r3, pc}
  40168e:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
  401690:	bd08      	pop	{r3, pc}
  401692:	bf00      	nop
  401694:	00400d05 	.word	0x00400d05

00401698 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  401698:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40169a:	b918      	cbnz	r0, 4016a4 <mem_read_capacity+0xc>
  40169c:	4608      	mov	r0, r1
  40169e:	4b02      	ldr	r3, [pc, #8]	; (4016a8 <mem_read_capacity+0x10>)
  4016a0:	4798      	blx	r3
  4016a2:	bd08      	pop	{r3, pc}
  4016a4:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
  4016a6:	bd08      	pop	{r3, pc}
  4016a8:	00400d35 	.word	0x00400d35

004016ac <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  4016ac:	f1d0 0001 	rsbs	r0, r0, #1
  4016b0:	bf38      	it	cc
  4016b2:	2000      	movcc	r0, #0
  4016b4:	4770      	bx	lr
  4016b6:	bf00      	nop

004016b8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  4016b8:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4016ba:	b910      	cbnz	r0, 4016c2 <mem_wr_protect+0xa>
  4016bc:	4b02      	ldr	r3, [pc, #8]	; (4016c8 <mem_wr_protect+0x10>)
  4016be:	4798      	blx	r3
  4016c0:	bd08      	pop	{r3, pc}
  4016c2:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
  4016c4:	bd08      	pop	{r3, pc}
  4016c6:	bf00      	nop
  4016c8:	00400d45 	.word	0x00400d45

004016cc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  4016cc:	b508      	push	{r3, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  4016ce:	b920      	cbnz	r0, 4016da <memory_2_ram+0xe>
  4016d0:	4608      	mov	r0, r1
  4016d2:	4611      	mov	r1, r2
  4016d4:	4b02      	ldr	r3, [pc, #8]	; (4016e0 <memory_2_ram+0x14>)
  4016d6:	4798      	blx	r3
  4016d8:	bd08      	pop	{r3, pc}
  4016da:	2001      	movs	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
  4016dc:	bd08      	pop	{r3, pc}
  4016de:	bf00      	nop
  4016e0:	00400d91 	.word	0x00400d91

004016e4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  4016e4:	b508      	push	{r3, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  4016e6:	b920      	cbnz	r0, 4016f2 <ram_2_memory+0xe>
  4016e8:	4608      	mov	r0, r1
  4016ea:	4611      	mov	r1, r2
  4016ec:	4b02      	ldr	r3, [pc, #8]	; (4016f8 <ram_2_memory+0x14>)
  4016ee:	4798      	blx	r3
  4016f0:	bd08      	pop	{r3, pc}
  4016f2:	2001      	movs	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
  4016f4:	bd08      	pop	{r3, pc}
  4016f6:	bf00      	nop
  4016f8:	00400de1 	.word	0x00400de1

004016fc <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4016fe:	4838      	ldr	r0, [pc, #224]	; (4017e0 <board_init+0xe4>)
  401700:	4b38      	ldr	r3, [pc, #224]	; (4017e4 <board_init+0xe8>)
  401702:	4798      	blx	r3
  401704:	200b      	movs	r0, #11
  401706:	4c38      	ldr	r4, [pc, #224]	; (4017e8 <board_init+0xec>)
  401708:	47a0      	blx	r4
  40170a:	200c      	movs	r0, #12
  40170c:	47a0      	blx	r4
  40170e:	200d      	movs	r0, #13
  401710:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401712:	4b36      	ldr	r3, [pc, #216]	; (4017ec <board_init+0xf0>)
  401714:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401718:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40171a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40171c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401720:	4c33      	ldr	r4, [pc, #204]	; (4017f0 <board_init+0xf4>)
  401722:	2504      	movs	r5, #4
  401724:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401726:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40172a:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40172c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401730:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401732:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401734:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401738:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40173a:	f022 0204 	bic.w	r2, r2, #4
  40173e:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401740:	6f62      	ldr	r2, [r4, #116]	; 0x74
  401742:	f022 0204 	bic.w	r2, r2, #4
  401746:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40174c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40174e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401750:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401754:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401758:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40175a:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40175c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401760:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401764:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401766:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401768:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40176c:	4821      	ldr	r0, [pc, #132]	; (4017f4 <board_init+0xf8>)
  40176e:	210c      	movs	r1, #12
  401770:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401774:	4b20      	ldr	r3, [pc, #128]	; (4017f8 <board_init+0xfc>)
  401776:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401778:	4f20      	ldr	r7, [pc, #128]	; (4017fc <board_init+0x100>)
  40177a:	2003      	movs	r0, #3
  40177c:	4639      	mov	r1, r7
  40177e:	4e20      	ldr	r6, [pc, #128]	; (401800 <board_init+0x104>)
  401780:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401782:	4628      	mov	r0, r5
  401784:	4639      	mov	r1, r7
  401786:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  401788:	200c      	movs	r0, #12
  40178a:	4639      	mov	r1, r7
  40178c:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40178e:	200d      	movs	r0, #13
  401790:	4639      	mov	r1, r7
  401792:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  401794:	200e      	movs	r0, #14
  401796:	4639      	mov	r1, r7
  401798:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  40179a:	2009      	movs	r0, #9
  40179c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4017a0:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  4017a2:	200a      	movs	r0, #10
  4017a4:	4917      	ldr	r1, [pc, #92]	; (401804 <board_init+0x108>)
  4017a6:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  4017a8:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  4017ac:	2055      	movs	r0, #85	; 0x55
  4017ae:	4639      	mov	r1, r7
  4017b0:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  4017b2:	205f      	movs	r0, #95	; 0x5f
  4017b4:	4639      	mov	r1, r7
  4017b6:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4017b8:	204c      	movs	r0, #76	; 0x4c
  4017ba:	4913      	ldr	r1, [pc, #76]	; (401808 <board_init+0x10c>)
  4017bc:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4017be:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4017c0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4017c4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4017c6:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4017c8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4017cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4017ce:	f023 0304 	bic.w	r3, r3, #4
  4017d2:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4017d4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4017d6:	f023 0304 	bic.w	r3, r3, #4
  4017da:	6763      	str	r3, [r4, #116]	; 0x74
  4017dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017de:	bf00      	nop
  4017e0:	400e1450 	.word	0x400e1450
  4017e4:	00402189 	.word	0x00402189
  4017e8:	00401e39 	.word	0x00401e39
  4017ec:	400e1200 	.word	0x400e1200
  4017f0:	400e0e00 	.word	0x400e0e00
  4017f4:	400e1000 	.word	0x400e1000
  4017f8:	00401b01 	.word	0x00401b01
  4017fc:	08000001 	.word	0x08000001
  401800:	004019dd 	.word	0x004019dd
  401804:	10000001 	.word	0x10000001
  401808:	28000001 	.word	0x28000001

0040180c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  40180c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  40180e:	2401      	movs	r4, #1
  401810:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  401812:	2400      	movs	r4, #0
  401814:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  401816:	f240 2502 	movw	r5, #514	; 0x202
  40181a:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  40181e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  401822:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  401826:	6845      	ldr	r5, [r0, #4]
  401828:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  40182a:	0052      	lsls	r2, r2, #1
  40182c:	fbb1 f1f2 	udiv	r1, r1, r2
  401830:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  401832:	022d      	lsls	r5, r5, #8
  401834:	b2ad      	uxth	r5, r5
  401836:	432b      	orrs	r3, r5
  401838:	6043      	str	r3, [r0, #4]
	return 0;
}
  40183a:	4620      	mov	r0, r4
  40183c:	bc30      	pop	{r4, r5}
  40183e:	4770      	bx	lr

00401840 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  401840:	6843      	ldr	r3, [r0, #4]
  401842:	4319      	orrs	r1, r3
  401844:	01d2      	lsls	r2, r2, #7
  401846:	b2d3      	uxtb	r3, r2
  401848:	4319      	orrs	r1, r3
  40184a:	6041      	str	r1, [r0, #4]
  40184c:	4770      	bx	lr
  40184e:	bf00      	nop

00401850 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  401850:	2302      	movs	r3, #2
  401852:	6003      	str	r3, [r0, #0]
  401854:	4770      	bx	lr
  401856:	bf00      	nop

00401858 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  401858:	2301      	movs	r3, #1
  40185a:	fa03 f101 	lsl.w	r1, r3, r1
  40185e:	6101      	str	r1, [r0, #16]
  401860:	4770      	bx	lr
  401862:	bf00      	nop

00401864 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  401864:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  401866:	bf9a      	itte	ls
  401868:	3114      	addls	r1, #20
  40186a:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
  40186e:	2000      	movhi	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
  401870:	4770      	bx	lr
  401872:	bf00      	nop

00401874 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401874:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401878:	0052      	lsls	r2, r2, #1
  40187a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40187e:	fbb3 f3f2 	udiv	r3, r3, r2
  401882:	3b01      	subs	r3, #1
  401884:	f3c3 030d 	ubfx	r3, r3, #0, #14
  401888:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  40188c:	4770      	bx	lr
  40188e:	bf00      	nop

00401890 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401890:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401892:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401894:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401898:	d02e      	beq.n	4018f8 <pio_set_peripheral+0x68>
  40189a:	d808      	bhi.n	4018ae <pio_set_peripheral+0x1e>
  40189c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4018a0:	d014      	beq.n	4018cc <pio_set_peripheral+0x3c>
  4018a2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4018a6:	d01d      	beq.n	4018e4 <pio_set_peripheral+0x54>
  4018a8:	2900      	cmp	r1, #0
  4018aa:	d135      	bne.n	401918 <pio_set_peripheral+0x88>
  4018ac:	e035      	b.n	40191a <pio_set_peripheral+0x8a>
  4018ae:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4018b2:	d032      	beq.n	40191a <pio_set_peripheral+0x8a>
  4018b4:	d803      	bhi.n	4018be <pio_set_peripheral+0x2e>
  4018b6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4018ba:	d027      	beq.n	40190c <pio_set_peripheral+0x7c>
  4018bc:	e02c      	b.n	401918 <pio_set_peripheral+0x88>
  4018be:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4018c2:	d02a      	beq.n	40191a <pio_set_peripheral+0x8a>
  4018c4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4018c8:	d027      	beq.n	40191a <pio_set_peripheral+0x8a>
  4018ca:	e025      	b.n	401918 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4018cc:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4018ce:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4018d0:	43d3      	mvns	r3, r2
  4018d2:	4021      	ands	r1, r4
  4018d4:	4019      	ands	r1, r3
  4018d6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4018d8:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4018da:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4018dc:	4021      	ands	r1, r4
  4018de:	400b      	ands	r3, r1
  4018e0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4018e2:	e019      	b.n	401918 <pio_set_peripheral+0x88>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4018e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4018e6:	4313      	orrs	r3, r2
  4018e8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4018ea:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4018ec:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4018ee:	400b      	ands	r3, r1
  4018f0:	ea23 0302 	bic.w	r3, r3, r2
  4018f4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4018f6:	e00f      	b.n	401918 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4018f8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4018fa:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4018fc:	400b      	ands	r3, r1
  4018fe:	ea23 0302 	bic.w	r3, r3, r2
  401902:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401904:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401906:	4313      	orrs	r3, r2
  401908:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40190a:	e005      	b.n	401918 <pio_set_peripheral+0x88>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40190c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40190e:	4313      	orrs	r3, r2
  401910:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401912:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401914:	4313      	orrs	r3, r2
  401916:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401918:	6042      	str	r2, [r0, #4]
}
  40191a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40191e:	4770      	bx	lr

00401920 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401920:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401922:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401926:	bf14      	ite	ne
  401928:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40192a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40192c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401930:	bf14      	ite	ne
  401932:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401934:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401936:	f012 0f02 	tst.w	r2, #2
  40193a:	d002      	beq.n	401942 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40193c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401940:	e004      	b.n	40194c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401942:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401946:	bf18      	it	ne
  401948:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40194c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40194e:	6001      	str	r1, [r0, #0]
  401950:	4770      	bx	lr
  401952:	bf00      	nop

00401954 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401954:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401956:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401958:	9c01      	ldr	r4, [sp, #4]
  40195a:	b10c      	cbz	r4, 401960 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  40195c:	6641      	str	r1, [r0, #100]	; 0x64
  40195e:	e000      	b.n	401962 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401960:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401962:	b10b      	cbz	r3, 401968 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401964:	6501      	str	r1, [r0, #80]	; 0x50
  401966:	e000      	b.n	40196a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401968:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40196a:	b10a      	cbz	r2, 401970 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  40196c:	6301      	str	r1, [r0, #48]	; 0x30
  40196e:	e000      	b.n	401972 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401970:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401972:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401974:	6001      	str	r1, [r0, #0]
}
  401976:	f85d 4b04 	ldr.w	r4, [sp], #4
  40197a:	4770      	bx	lr

0040197c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40197c:	f012 0f10 	tst.w	r2, #16
  401980:	d010      	beq.n	4019a4 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401982:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401986:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40198a:	bf14      	ite	ne
  40198c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401990:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401994:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401998:	bf14      	ite	ne
  40199a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40199e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4019a2:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4019a4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4019a8:	4770      	bx	lr
  4019aa:	bf00      	nop

004019ac <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  4019ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  4019ae:	6401      	str	r1, [r0, #64]	; 0x40
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop

004019b4 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4019b4:	6441      	str	r1, [r0, #68]	; 0x44
  4019b6:	4770      	bx	lr

004019b8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4019b8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4019ba:	4770      	bx	lr

004019bc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4019bc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4019be:	4770      	bx	lr

004019c0 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4019c0:	0943      	lsrs	r3, r0, #5
  4019c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4019c6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4019ca:	025b      	lsls	r3, r3, #9
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  4019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4019ce:	f000 001f 	and.w	r0, r0, #31
  4019d2:	fa23 f000 	lsr.w	r0, r3, r0
}
  4019d6:	f000 0001 	and.w	r0, r0, #1
  4019da:	4770      	bx	lr

004019dc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4019dc:	b570      	push	{r4, r5, r6, lr}
  4019de:	b082      	sub	sp, #8
  4019e0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4019e2:	0944      	lsrs	r4, r0, #5
  4019e4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  4019e8:	f204 7407 	addw	r4, r4, #1799	; 0x707
  4019ec:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4019ee:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  4019f2:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  4019f6:	d047      	beq.n	401a88 <pio_configure_pin+0xac>
  4019f8:	d809      	bhi.n	401a0e <pio_configure_pin+0x32>
  4019fa:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  4019fe:	d021      	beq.n	401a44 <pio_configure_pin+0x68>
  401a00:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  401a04:	d02f      	beq.n	401a66 <pio_configure_pin+0x8a>
  401a06:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  401a0a:	d16f      	bne.n	401aec <pio_configure_pin+0x110>
  401a0c:	e009      	b.n	401a22 <pio_configure_pin+0x46>
  401a0e:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  401a12:	d055      	beq.n	401ac0 <pio_configure_pin+0xe4>
  401a14:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401a18:	d052      	beq.n	401ac0 <pio_configure_pin+0xe4>
  401a1a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  401a1e:	d044      	beq.n	401aaa <pio_configure_pin+0xce>
  401a20:	e064      	b.n	401aec <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401a22:	f000 001f 	and.w	r0, r0, #31
  401a26:	2401      	movs	r4, #1
  401a28:	4084      	lsls	r4, r0
  401a2a:	4630      	mov	r0, r6
  401a2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401a30:	4622      	mov	r2, r4
  401a32:	4b30      	ldr	r3, [pc, #192]	; (401af4 <pio_configure_pin+0x118>)
  401a34:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401a36:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401a3a:	bf14      	ite	ne
  401a3c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401a3e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401a40:	2001      	movs	r0, #1
  401a42:	e054      	b.n	401aee <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401a44:	f000 001f 	and.w	r0, r0, #31
  401a48:	2401      	movs	r4, #1
  401a4a:	4084      	lsls	r4, r0
  401a4c:	4630      	mov	r0, r6
  401a4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401a52:	4622      	mov	r2, r4
  401a54:	4b27      	ldr	r3, [pc, #156]	; (401af4 <pio_configure_pin+0x118>)
  401a56:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401a58:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401a5c:	bf14      	ite	ne
  401a5e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401a60:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401a62:	2001      	movs	r0, #1
  401a64:	e043      	b.n	401aee <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401a66:	f000 001f 	and.w	r0, r0, #31
  401a6a:	2401      	movs	r4, #1
  401a6c:	4084      	lsls	r4, r0
  401a6e:	4630      	mov	r0, r6
  401a70:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401a74:	4622      	mov	r2, r4
  401a76:	4b1f      	ldr	r3, [pc, #124]	; (401af4 <pio_configure_pin+0x118>)
  401a78:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401a7a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401a7e:	bf14      	ite	ne
  401a80:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401a82:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401a84:	2001      	movs	r0, #1
  401a86:	e032      	b.n	401aee <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401a88:	f000 001f 	and.w	r0, r0, #31
  401a8c:	2401      	movs	r4, #1
  401a8e:	4084      	lsls	r4, r0
  401a90:	4630      	mov	r0, r6
  401a92:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401a96:	4622      	mov	r2, r4
  401a98:	4b16      	ldr	r3, [pc, #88]	; (401af4 <pio_configure_pin+0x118>)
  401a9a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401a9c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401aa0:	bf14      	ite	ne
  401aa2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401aa4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401aa6:	2001      	movs	r0, #1
  401aa8:	e021      	b.n	401aee <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401aaa:	f000 011f 	and.w	r1, r0, #31
  401aae:	2401      	movs	r4, #1
  401ab0:	4630      	mov	r0, r6
  401ab2:	fa04 f101 	lsl.w	r1, r4, r1
  401ab6:	462a      	mov	r2, r5
  401ab8:	4b0f      	ldr	r3, [pc, #60]	; (401af8 <pio_configure_pin+0x11c>)
  401aba:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  401abc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401abe:	e016      	b.n	401aee <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401ac0:	f000 011f 	and.w	r1, r0, #31
  401ac4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401ac6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401aca:	ea05 0304 	and.w	r3, r5, r4
  401ace:	9300      	str	r3, [sp, #0]
  401ad0:	4630      	mov	r0, r6
  401ad2:	fa04 f101 	lsl.w	r1, r4, r1
  401ad6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401ada:	bf14      	ite	ne
  401adc:	2200      	movne	r2, #0
  401ade:	2201      	moveq	r2, #1
  401ae0:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401ae4:	4d05      	ldr	r5, [pc, #20]	; (401afc <pio_configure_pin+0x120>)
  401ae6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  401ae8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401aea:	e000      	b.n	401aee <pio_configure_pin+0x112>

	default:
		return 0;
  401aec:	2000      	movs	r0, #0
	}

	return 1;
}
  401aee:	b002      	add	sp, #8
  401af0:	bd70      	pop	{r4, r5, r6, pc}
  401af2:	bf00      	nop
  401af4:	00401891 	.word	0x00401891
  401af8:	00401921 	.word	0x00401921
  401afc:	00401955 	.word	0x00401955

00401b00 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401b00:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b02:	b083      	sub	sp, #12
  401b04:	4607      	mov	r7, r0
  401b06:	460e      	mov	r6, r1
  401b08:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401b0a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  401b0e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  401b12:	d038      	beq.n	401b86 <pio_configure_pin_group+0x86>
  401b14:	d809      	bhi.n	401b2a <pio_configure_pin_group+0x2a>
  401b16:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  401b1a:	d01c      	beq.n	401b56 <pio_configure_pin_group+0x56>
  401b1c:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  401b20:	d025      	beq.n	401b6e <pio_configure_pin_group+0x6e>
  401b22:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  401b26:	d150      	bne.n	401bca <pio_configure_pin_group+0xca>
  401b28:	e009      	b.n	401b3e <pio_configure_pin_group+0x3e>
  401b2a:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  401b2e:	d03a      	beq.n	401ba6 <pio_configure_pin_group+0xa6>
  401b30:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401b34:	d037      	beq.n	401ba6 <pio_configure_pin_group+0xa6>
  401b36:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  401b3a:	d030      	beq.n	401b9e <pio_configure_pin_group+0x9e>
  401b3c:	e045      	b.n	401bca <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401b3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b42:	4632      	mov	r2, r6
  401b44:	4b22      	ldr	r3, [pc, #136]	; (401bd0 <pio_configure_pin_group+0xd0>)
  401b46:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b48:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401b4c:	bf14      	ite	ne
  401b4e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401b50:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401b52:	2001      	movs	r0, #1
  401b54:	e03a      	b.n	401bcc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401b56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401b5a:	4632      	mov	r2, r6
  401b5c:	4b1c      	ldr	r3, [pc, #112]	; (401bd0 <pio_configure_pin_group+0xd0>)
  401b5e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b60:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401b64:	bf14      	ite	ne
  401b66:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401b68:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401b6a:	2001      	movs	r0, #1
  401b6c:	e02e      	b.n	401bcc <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401b6e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401b72:	4632      	mov	r2, r6
  401b74:	4b16      	ldr	r3, [pc, #88]	; (401bd0 <pio_configure_pin_group+0xd0>)
  401b76:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b78:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401b7c:	bf14      	ite	ne
  401b7e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401b80:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401b82:	2001      	movs	r0, #1
  401b84:	e022      	b.n	401bcc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401b86:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401b8a:	4632      	mov	r2, r6
  401b8c:	4b10      	ldr	r3, [pc, #64]	; (401bd0 <pio_configure_pin_group+0xd0>)
  401b8e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b90:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401b94:	bf14      	ite	ne
  401b96:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401b98:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401b9a:	2001      	movs	r0, #1
  401b9c:	e016      	b.n	401bcc <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401b9e:	4b0d      	ldr	r3, [pc, #52]	; (401bd4 <pio_configure_pin_group+0xd4>)
  401ba0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  401ba2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401ba4:	e012      	b.n	401bcc <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401ba6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401baa:	f005 0301 	and.w	r3, r5, #1
  401bae:	9300      	str	r3, [sp, #0]
  401bb0:	4638      	mov	r0, r7
  401bb2:	4631      	mov	r1, r6
  401bb4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401bb8:	bf14      	ite	ne
  401bba:	2200      	movne	r2, #0
  401bbc:	2201      	moveq	r2, #1
  401bbe:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401bc2:	4c05      	ldr	r4, [pc, #20]	; (401bd8 <pio_configure_pin_group+0xd8>)
  401bc4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  401bc6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401bc8:	e000      	b.n	401bcc <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401bca:	2000      	movs	r0, #0
	}

	return 1;
}
  401bcc:	b003      	add	sp, #12
  401bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401bd0:	00401891 	.word	0x00401891
  401bd4:	00401921 	.word	0x00401921
  401bd8:	00401955 	.word	0x00401955

00401bdc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401be0:	4681      	mov	r9, r0
  401be2:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401be4:	4b14      	ldr	r3, [pc, #80]	; (401c38 <pio_handler_process+0x5c>)
  401be6:	4798      	blx	r3
  401be8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401bea:	4648      	mov	r0, r9
  401bec:	4b13      	ldr	r3, [pc, #76]	; (401c3c <pio_handler_process+0x60>)
  401bee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401bf0:	4005      	ands	r5, r0
  401bf2:	d017      	beq.n	401c24 <pio_handler_process+0x48>
  401bf4:	4f12      	ldr	r7, [pc, #72]	; (401c40 <pio_handler_process+0x64>)
  401bf6:	f107 040c 	add.w	r4, r7, #12
  401bfa:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401bfc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  401c00:	42b3      	cmp	r3, r6
  401c02:	d10a      	bne.n	401c1a <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401c04:	f854 1c08 	ldr.w	r1, [r4, #-8]
  401c08:	4229      	tst	r1, r5
  401c0a:	d006      	beq.n	401c1a <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401c0c:	6823      	ldr	r3, [r4, #0]
  401c0e:	4630      	mov	r0, r6
  401c10:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401c12:	f854 3c08 	ldr.w	r3, [r4, #-8]
  401c16:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401c1a:	42bc      	cmp	r4, r7
  401c1c:	d002      	beq.n	401c24 <pio_handler_process+0x48>
  401c1e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401c20:	2d00      	cmp	r5, #0
  401c22:	d1eb      	bne.n	401bfc <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401c24:	4b07      	ldr	r3, [pc, #28]	; (401c44 <pio_handler_process+0x68>)
  401c26:	681b      	ldr	r3, [r3, #0]
  401c28:	b123      	cbz	r3, 401c34 <pio_handler_process+0x58>
		if (pio_capture_handler) {
  401c2a:	4b07      	ldr	r3, [pc, #28]	; (401c48 <pio_handler_process+0x6c>)
  401c2c:	681b      	ldr	r3, [r3, #0]
  401c2e:	b10b      	cbz	r3, 401c34 <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  401c30:	4648      	mov	r0, r9
  401c32:	4798      	blx	r3
  401c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401c38:	004019b9 	.word	0x004019b9
  401c3c:	004019bd 	.word	0x004019bd
  401c40:	20000cfc 	.word	0x20000cfc
  401c44:	20000dd8 	.word	0x20000dd8
  401c48:	20000cf8 	.word	0x20000cf8

00401c4c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401c4e:	4c0b      	ldr	r4, [pc, #44]	; (401c7c <pio_handler_set+0x30>)
  401c50:	6824      	ldr	r4, [r4, #0]
  401c52:	2c06      	cmp	r4, #6
  401c54:	d810      	bhi.n	401c78 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  401c56:	4f0a      	ldr	r7, [pc, #40]	; (401c80 <pio_handler_set+0x34>)
  401c58:	0126      	lsls	r6, r4, #4
  401c5a:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
  401c5c:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  401c5e:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
  401c60:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
  401c62:	9906      	ldr	r1, [sp, #24]
  401c64:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
  401c66:	3401      	adds	r4, #1
  401c68:	4904      	ldr	r1, [pc, #16]	; (401c7c <pio_handler_set+0x30>)
  401c6a:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401c6c:	4611      	mov	r1, r2
  401c6e:	461a      	mov	r2, r3
  401c70:	4b04      	ldr	r3, [pc, #16]	; (401c84 <pio_handler_set+0x38>)
  401c72:	4798      	blx	r3

	return 0;
  401c74:	2000      	movs	r0, #0
  401c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  401c78:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  401c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c7c:	20000cf4 	.word	0x20000cf4
  401c80:	20000cfc 	.word	0x20000cfc
  401c84:	0040197d 	.word	0x0040197d

00401c88 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401c88:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401c8a:	4802      	ldr	r0, [pc, #8]	; (401c94 <PIOA_Handler+0xc>)
  401c8c:	210b      	movs	r1, #11
  401c8e:	4b02      	ldr	r3, [pc, #8]	; (401c98 <PIOA_Handler+0x10>)
  401c90:	4798      	blx	r3
  401c92:	bd08      	pop	{r3, pc}
  401c94:	400e0e00 	.word	0x400e0e00
  401c98:	00401bdd 	.word	0x00401bdd

00401c9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401c9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401c9e:	4802      	ldr	r0, [pc, #8]	; (401ca8 <PIOB_Handler+0xc>)
  401ca0:	210c      	movs	r1, #12
  401ca2:	4b02      	ldr	r3, [pc, #8]	; (401cac <PIOB_Handler+0x10>)
  401ca4:	4798      	blx	r3
  401ca6:	bd08      	pop	{r3, pc}
  401ca8:	400e1000 	.word	0x400e1000
  401cac:	00401bdd 	.word	0x00401bdd

00401cb0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401cb0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401cb2:	4802      	ldr	r0, [pc, #8]	; (401cbc <PIOC_Handler+0xc>)
  401cb4:	210d      	movs	r1, #13
  401cb6:	4b02      	ldr	r3, [pc, #8]	; (401cc0 <PIOC_Handler+0x10>)
  401cb8:	4798      	blx	r3
  401cba:	bd08      	pop	{r3, pc}
  401cbc:	400e1200 	.word	0x400e1200
  401cc0:	00401bdd 	.word	0x00401bdd

00401cc4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  401cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401cc8:	4605      	mov	r5, r0
  401cca:	460c      	mov	r4, r1
  401ccc:	4691      	mov	r9, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  401cce:	4b1b      	ldr	r3, [pc, #108]	; (401d3c <pio_handler_set_priority+0x78>)
  401cd0:	4798      	blx	r3
  401cd2:	4680      	mov	r8, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  401cd4:	4628      	mov	r0, r5
  401cd6:	f04f 31ff 	mov.w	r1, #4294967295
  401cda:	4b19      	ldr	r3, [pc, #100]	; (401d40 <pio_handler_set_priority+0x7c>)
  401cdc:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  401cde:	4628      	mov	r0, r5
  401ce0:	4b18      	ldr	r3, [pc, #96]	; (401d44 <pio_handler_set_priority+0x80>)
  401ce2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401ce4:	b2e7      	uxtb	r7, r4
  401ce6:	f007 031f 	and.w	r3, r7, #31
  401cea:	2601      	movs	r6, #1
  401cec:	409e      	lsls	r6, r3
  401cee:	0963      	lsrs	r3, r4, #5
  401cf0:	009b      	lsls	r3, r3, #2
  401cf2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  401cf6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  401cfa:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401cfe:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  401d02:	2c00      	cmp	r4, #0
  401d04:	da09      	bge.n	401d1a <pio_handler_set_priority+0x56>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401d06:	f007 070f 	and.w	r7, r7, #15
  401d0a:	ea4f 1909 	mov.w	r9, r9, lsl #4
  401d0e:	fa5f f989 	uxtb.w	r9, r9
  401d12:	4a0d      	ldr	r2, [pc, #52]	; (401d48 <pio_handler_set_priority+0x84>)
  401d14:	f802 9007 	strb.w	r9, [r2, r7]
  401d18:	e009      	b.n	401d2e <pio_handler_set_priority+0x6a>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401d1a:	ea4f 1909 	mov.w	r9, r9, lsl #4
  401d1e:	fa5f f989 	uxtb.w	r9, r9
  401d22:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  401d26:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  401d2a:	f884 9300 	strb.w	r9, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401d2e:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  401d30:	4628      	mov	r0, r5
  401d32:	4641      	mov	r1, r8
  401d34:	4b05      	ldr	r3, [pc, #20]	; (401d4c <pio_handler_set_priority+0x88>)
  401d36:	4798      	blx	r3
  401d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d3c:	004019bd 	.word	0x004019bd
  401d40:	004019b5 	.word	0x004019b5
  401d44:	004019b9 	.word	0x004019b9
  401d48:	e000ed14 	.word	0xe000ed14
  401d4c:	004019ad 	.word	0x004019ad

00401d50 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401d50:	4b17      	ldr	r3, [pc, #92]	; (401db0 <pmc_switch_mck_to_pllack+0x60>)
  401d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  401d58:	4310      	orrs	r0, r2
  401d5a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401d5e:	f013 0f08 	tst.w	r3, #8
  401d62:	d109      	bne.n	401d78 <pmc_switch_mck_to_pllack+0x28>
  401d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401d68:	4911      	ldr	r1, [pc, #68]	; (401db0 <pmc_switch_mck_to_pllack+0x60>)
  401d6a:	e001      	b.n	401d70 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401d6c:	3b01      	subs	r3, #1
  401d6e:	d019      	beq.n	401da4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401d70:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401d72:	f012 0f08 	tst.w	r2, #8
  401d76:	d0f9      	beq.n	401d6c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401d78:	4b0d      	ldr	r3, [pc, #52]	; (401db0 <pmc_switch_mck_to_pllack+0x60>)
  401d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d7c:	f022 0203 	bic.w	r2, r2, #3
  401d80:	f042 0202 	orr.w	r2, r2, #2
  401d84:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401d86:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401d88:	f010 0008 	ands.w	r0, r0, #8
  401d8c:	d10c      	bne.n	401da8 <pmc_switch_mck_to_pllack+0x58>
  401d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401d92:	4907      	ldr	r1, [pc, #28]	; (401db0 <pmc_switch_mck_to_pllack+0x60>)
  401d94:	e001      	b.n	401d9a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401d96:	3b01      	subs	r3, #1
  401d98:	d008      	beq.n	401dac <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401d9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401d9c:	f012 0f08 	tst.w	r2, #8
  401da0:	d0f9      	beq.n	401d96 <pmc_switch_mck_to_pllack+0x46>
  401da2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401da4:	2001      	movs	r0, #1
  401da6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401da8:	2000      	movs	r0, #0
  401daa:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401dac:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401dae:	4770      	bx	lr
  401db0:	400e0400 	.word	0x400e0400

00401db4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401db4:	b138      	cbz	r0, 401dc6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401db6:	4911      	ldr	r1, [pc, #68]	; (401dfc <pmc_switch_mainck_to_xtal+0x48>)
  401db8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401dba:	4a11      	ldr	r2, [pc, #68]	; (401e00 <pmc_switch_mainck_to_xtal+0x4c>)
  401dbc:	401a      	ands	r2, r3
  401dbe:	4b11      	ldr	r3, [pc, #68]	; (401e04 <pmc_switch_mainck_to_xtal+0x50>)
  401dc0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401dc2:	620b      	str	r3, [r1, #32]
  401dc4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401dc6:	4a0d      	ldr	r2, [pc, #52]	; (401dfc <pmc_switch_mainck_to_xtal+0x48>)
  401dc8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401dca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401dce:	f023 0303 	bic.w	r3, r3, #3
  401dd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401dd6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401dda:	0209      	lsls	r1, r1, #8
  401ddc:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401dde:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401de0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401de2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401de4:	f013 0f01 	tst.w	r3, #1
  401de8:	d0fb      	beq.n	401de2 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401dea:	4a04      	ldr	r2, [pc, #16]	; (401dfc <pmc_switch_mainck_to_xtal+0x48>)
  401dec:	6a13      	ldr	r3, [r2, #32]
  401dee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401df6:	6213      	str	r3, [r2, #32]
  401df8:	4770      	bx	lr
  401dfa:	bf00      	nop
  401dfc:	400e0400 	.word	0x400e0400
  401e00:	fec8fffc 	.word	0xfec8fffc
  401e04:	01370002 	.word	0x01370002

00401e08 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401e08:	4b02      	ldr	r3, [pc, #8]	; (401e14 <pmc_osc_is_ready_mainck+0xc>)
  401e0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401e0c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401e10:	4770      	bx	lr
  401e12:	bf00      	nop
  401e14:	400e0400 	.word	0x400e0400

00401e18 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401e18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401e1c:	4b01      	ldr	r3, [pc, #4]	; (401e24 <pmc_disable_pllack+0xc>)
  401e1e:	629a      	str	r2, [r3, #40]	; 0x28
  401e20:	4770      	bx	lr
  401e22:	bf00      	nop
  401e24:	400e0400 	.word	0x400e0400

00401e28 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401e28:	4b02      	ldr	r3, [pc, #8]	; (401e34 <pmc_is_locked_pllack+0xc>)
  401e2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401e2c:	f000 0002 	and.w	r0, r0, #2
  401e30:	4770      	bx	lr
  401e32:	bf00      	nop
  401e34:	400e0400 	.word	0x400e0400

00401e38 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401e38:	2822      	cmp	r0, #34	; 0x22
  401e3a:	d820      	bhi.n	401e7e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  401e3c:	281f      	cmp	r0, #31
  401e3e:	d80d      	bhi.n	401e5c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401e40:	4b12      	ldr	r3, [pc, #72]	; (401e8c <pmc_enable_periph_clk+0x54>)
  401e42:	699a      	ldr	r2, [r3, #24]
  401e44:	2301      	movs	r3, #1
  401e46:	4083      	lsls	r3, r0
  401e48:	401a      	ands	r2, r3
  401e4a:	4293      	cmp	r3, r2
  401e4c:	d019      	beq.n	401e82 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  401e4e:	2301      	movs	r3, #1
  401e50:	fa03 f000 	lsl.w	r0, r3, r0
  401e54:	4b0d      	ldr	r3, [pc, #52]	; (401e8c <pmc_enable_periph_clk+0x54>)
  401e56:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401e58:	2000      	movs	r0, #0
  401e5a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401e5c:	4b0b      	ldr	r3, [pc, #44]	; (401e8c <pmc_enable_periph_clk+0x54>)
  401e5e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401e62:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401e64:	2301      	movs	r3, #1
  401e66:	4083      	lsls	r3, r0
  401e68:	401a      	ands	r2, r3
  401e6a:	4293      	cmp	r3, r2
  401e6c:	d00b      	beq.n	401e86 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  401e6e:	2301      	movs	r3, #1
  401e70:	fa03 f000 	lsl.w	r0, r3, r0
  401e74:	4b05      	ldr	r3, [pc, #20]	; (401e8c <pmc_enable_periph_clk+0x54>)
  401e76:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401e7a:	2000      	movs	r0, #0
  401e7c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401e7e:	2001      	movs	r0, #1
  401e80:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401e82:	2000      	movs	r0, #0
  401e84:	4770      	bx	lr
  401e86:	2000      	movs	r0, #0
}
  401e88:	4770      	bx	lr
  401e8a:	bf00      	nop
  401e8c:	400e0400 	.word	0x400e0400

00401e90 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  401e90:	b121      	cbz	r1, 401e9c <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  401e92:	6843      	ldr	r3, [r0, #4]
  401e94:	f043 0301 	orr.w	r3, r3, #1
  401e98:	6043      	str	r3, [r0, #4]
  401e9a:	4770      	bx	lr
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  401e9c:	6843      	ldr	r3, [r0, #4]
  401e9e:	f023 0301 	bic.w	r3, r3, #1
  401ea2:	6043      	str	r3, [r0, #4]
  401ea4:	4770      	bx	lr
  401ea6:	bf00      	nop

00401ea8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401ea8:	b508      	push	{r3, lr}
  401eaa:	2015      	movs	r0, #21
  401eac:	4b01      	ldr	r3, [pc, #4]	; (401eb4 <spi_enable_clock+0xc>)
  401eae:	4798      	blx	r3
  401eb0:	bd08      	pop	{r3, pc}
  401eb2:	bf00      	nop
  401eb4:	00401e39 	.word	0x00401e39

00401eb8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401eb8:	6843      	ldr	r3, [r0, #4]
  401eba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401ebe:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401ec0:	6843      	ldr	r3, [r0, #4]
  401ec2:	0409      	lsls	r1, r1, #16
  401ec4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401ec8:	430b      	orrs	r3, r1
  401eca:	6043      	str	r3, [r0, #4]
  401ecc:	4770      	bx	lr
  401ece:	bf00      	nop

00401ed0 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401ed0:	6843      	ldr	r3, [r0, #4]
  401ed2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ed6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401ed8:	6843      	ldr	r3, [r0, #4]
  401eda:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401ede:	6041      	str	r1, [r0, #4]
  401ee0:	4770      	bx	lr
  401ee2:	bf00      	nop

00401ee4 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401ee4:	b132      	cbz	r2, 401ef4 <spi_set_clock_polarity+0x10>
  401ee6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401eea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401eec:	f043 0301 	orr.w	r3, r3, #1
  401ef0:	6303      	str	r3, [r0, #48]	; 0x30
  401ef2:	4770      	bx	lr
  401ef4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401ef8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401efa:	f023 0301 	bic.w	r3, r3, #1
  401efe:	6303      	str	r3, [r0, #48]	; 0x30
  401f00:	4770      	bx	lr
  401f02:	bf00      	nop

00401f04 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401f04:	b132      	cbz	r2, 401f14 <spi_set_clock_phase+0x10>
  401f06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401f0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401f0c:	f043 0302 	orr.w	r3, r3, #2
  401f10:	6303      	str	r3, [r0, #48]	; 0x30
  401f12:	4770      	bx	lr
  401f14:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401f18:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401f1a:	f023 0302 	bic.w	r3, r3, #2
  401f1e:	6303      	str	r3, [r0, #48]	; 0x30
  401f20:	4770      	bx	lr
  401f22:	bf00      	nop

00401f24 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401f24:	2a04      	cmp	r2, #4
  401f26:	d10a      	bne.n	401f3e <spi_configure_cs_behavior+0x1a>
  401f28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401f2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401f2e:	f023 0308 	bic.w	r3, r3, #8
  401f32:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401f34:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401f36:	f043 0304 	orr.w	r3, r3, #4
  401f3a:	6303      	str	r3, [r0, #48]	; 0x30
  401f3c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401f3e:	b952      	cbnz	r2, 401f56 <spi_configure_cs_behavior+0x32>
  401f40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401f44:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401f46:	f023 0308 	bic.w	r3, r3, #8
  401f4a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401f4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401f4e:	f023 0304 	bic.w	r3, r3, #4
  401f52:	6303      	str	r3, [r0, #48]	; 0x30
  401f54:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401f56:	2a08      	cmp	r2, #8
  401f58:	d105      	bne.n	401f66 <spi_configure_cs_behavior+0x42>
  401f5a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401f5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401f60:	f043 0308 	orr.w	r3, r3, #8
  401f64:	6303      	str	r3, [r0, #48]	; 0x30
  401f66:	4770      	bx	lr

00401f68 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401f68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401f6c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401f72:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401f74:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f76:	431a      	orrs	r2, r3
  401f78:	630a      	str	r2, [r1, #48]	; 0x30
  401f7a:	4770      	bx	lr

00401f7c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401f7c:	1e43      	subs	r3, r0, #1
  401f7e:	4419      	add	r1, r3
  401f80:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401f84:	1e43      	subs	r3, r0, #1
  401f86:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401f88:	bf94      	ite	ls
  401f8a:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  401f8c:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
  401f90:	b200      	sxth	r0, r0
  401f92:	4770      	bx	lr

00401f94 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  401f94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401f98:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401f9e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401fa0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401fa2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  401fa6:	630a      	str	r2, [r1, #48]	; 0x30
  401fa8:	4770      	bx	lr
  401faa:	bf00      	nop

00401fac <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401fac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401fb0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401fb2:	b280      	uxth	r0, r0
  401fb4:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401fb6:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
  401fb8:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401fbc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  401fc0:	630a      	str	r2, [r1, #48]	; 0x30
  401fc2:	4770      	bx	lr

00401fc4 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401fc4:	4b0f      	ldr	r3, [pc, #60]	; (402004 <twi_set_speed+0x40>)
  401fc6:	4299      	cmp	r1, r3
  401fc8:	d819      	bhi.n	401ffe <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401fca:	0049      	lsls	r1, r1, #1
  401fcc:	fbb2 f2f1 	udiv	r2, r2, r1
  401fd0:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401fd2:	2aff      	cmp	r2, #255	; 0xff
  401fd4:	d907      	bls.n	401fe6 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401fd6:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
  401fd8:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401fda:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401fdc:	2aff      	cmp	r2, #255	; 0xff
  401fde:	d903      	bls.n	401fe8 <twi_set_speed+0x24>
  401fe0:	2b07      	cmp	r3, #7
  401fe2:	d1f9      	bne.n	401fd8 <twi_set_speed+0x14>
  401fe4:	e000      	b.n	401fe8 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401fe6:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401fe8:	0211      	lsls	r1, r2, #8
  401fea:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  401fec:	041b      	lsls	r3, r3, #16
  401fee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401ff2:	430b      	orrs	r3, r1
  401ff4:	b2d2      	uxtb	r2, r2
  401ff6:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  401ff8:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  401ffa:	2000      	movs	r0, #0
  401ffc:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401ffe:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402000:	4770      	bx	lr
  402002:	bf00      	nop
  402004:	00061a80 	.word	0x00061a80

00402008 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  402008:	b538      	push	{r3, r4, r5, lr}
  40200a:	4604      	mov	r4, r0
  40200c:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40200e:	f04f 33ff 	mov.w	r3, #4294967295
  402012:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  402014:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  402016:	2380      	movs	r3, #128	; 0x80
  402018:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  40201a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40201c:	2308      	movs	r3, #8
  40201e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  402020:	2320      	movs	r3, #32
  402022:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  402024:	2304      	movs	r3, #4
  402026:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  402028:	6849      	ldr	r1, [r1, #4]
  40202a:	682a      	ldr	r2, [r5, #0]
  40202c:	4b05      	ldr	r3, [pc, #20]	; (402044 <twi_master_init+0x3c>)
  40202e:	4798      	blx	r3
  402030:	2801      	cmp	r0, #1
  402032:	bf14      	ite	ne
  402034:	2000      	movne	r0, #0
  402036:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  402038:	7a6b      	ldrb	r3, [r5, #9]
  40203a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  40203c:	bf04      	itt	eq
  40203e:	2340      	moveq	r3, #64	; 0x40
  402040:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  402042:	bd38      	pop	{r3, r4, r5, pc}
  402044:	00401fc5 	.word	0x00401fc5

00402048 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  402048:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  40204c:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40204e:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402050:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  402052:	2b00      	cmp	r3, #0
  402054:	d049      	beq.n	4020ea <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  402056:	2200      	movs	r2, #0
  402058:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  40205a:	6848      	ldr	r0, [r1, #4]
  40205c:	0200      	lsls	r0, r0, #8
  40205e:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  402062:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  402066:	7c0d      	ldrb	r5, [r1, #16]
  402068:	042d      	lsls	r5, r5, #16
  40206a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40206e:	4328      	orrs	r0, r5
  402070:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  402072:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  402074:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402076:	b15a      	cbz	r2, 402090 <twi_master_read+0x48>
		return 0;

	val = addr[0];
  402078:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
  40207a:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
  40207c:	bfc4      	itt	gt
  40207e:	784d      	ldrbgt	r5, [r1, #1]
  402080:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
  402084:	2a02      	cmp	r2, #2
  402086:	dd04      	ble.n	402092 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
  402088:	788a      	ldrb	r2, [r1, #2]
  40208a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
  40208e:	e000      	b.n	402092 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402090:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  402092:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
  402094:	2b01      	cmp	r3, #1
  402096:	d104      	bne.n	4020a2 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  402098:	2203      	movs	r2, #3
  40209a:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
  40209c:	f04f 0c01 	mov.w	ip, #1
  4020a0:	e02b      	b.n	4020fa <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4020a2:	2201      	movs	r2, #1
  4020a4:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
  4020a6:	f04f 0c00 	mov.w	ip, #0
  4020aa:	e026      	b.n	4020fa <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4020ac:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
  4020ae:	f411 7f80 	tst.w	r1, #256	; 0x100
  4020b2:	d11c      	bne.n	4020ee <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4020b4:	1e55      	subs	r5, r2, #1
  4020b6:	b1e2      	cbz	r2, 4020f2 <twi_master_read+0xaa>
  4020b8:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4020ba:	2b01      	cmp	r3, #1
  4020bc:	d105      	bne.n	4020ca <twi_master_read+0x82>
  4020be:	f1bc 0f00 	cmp.w	ip, #0
  4020c2:	d102      	bne.n	4020ca <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
  4020c4:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
  4020c8:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
  4020ca:	f011 0f02 	tst.w	r1, #2
  4020ce:	d004      	beq.n	4020da <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4020d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  4020d2:	7032      	strb	r2, [r6, #0]

		cnt--;
  4020d4:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4020d6:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4020d8:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4020da:	2b00      	cmp	r3, #0
  4020dc:	d1e6      	bne.n	4020ac <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4020de:	6a23      	ldr	r3, [r4, #32]
  4020e0:	f013 0f01 	tst.w	r3, #1
  4020e4:	d0fb      	beq.n	4020de <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
  4020e6:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
  4020e8:	e014      	b.n	402114 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4020ea:	2001      	movs	r0, #1
  4020ec:	e012      	b.n	402114 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4020ee:	2005      	movs	r0, #5
  4020f0:	e010      	b.n	402114 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4020f2:	2009      	movs	r0, #9
  4020f4:	e00e      	b.n	402114 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4020f6:	2005      	movs	r0, #5
  4020f8:	e00c      	b.n	402114 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4020fa:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
  4020fc:	f411 7080 	ands.w	r0, r1, #256	; 0x100
  402100:	d1f9      	bne.n	4020f6 <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  402102:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  402106:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
  40210a:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  40210e:	f643 2798 	movw	r7, #15000	; 0x3a98
  402112:	e7d2      	b.n	4020ba <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  402114:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  402118:	4770      	bx	lr
  40211a:	bf00      	nop

0040211c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40211c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40211e:	23ac      	movs	r3, #172	; 0xac
  402120:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402122:	680a      	ldr	r2, [r1, #0]
  402124:	684b      	ldr	r3, [r1, #4]
  402126:	fbb2 f3f3 	udiv	r3, r2, r3
  40212a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40212c:	1e5c      	subs	r4, r3, #1
  40212e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402132:	4294      	cmp	r4, r2
  402134:	d80a      	bhi.n	40214c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  402136:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402138:	688b      	ldr	r3, [r1, #8]
  40213a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40213c:	f240 2302 	movw	r3, #514	; 0x202
  402140:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402144:	2350      	movs	r3, #80	; 0x50
  402146:	6003      	str	r3, [r0, #0]

	return 0;
  402148:	2000      	movs	r0, #0
  40214a:	e000      	b.n	40214e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  40214c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40214e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402152:	4770      	bx	lr

00402154 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402154:	6943      	ldr	r3, [r0, #20]
  402156:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40215a:	bf1a      	itte	ne
  40215c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40215e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402160:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402162:	4770      	bx	lr

00402164 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  402164:	2340      	movs	r3, #64	; 0x40
  402166:	6003      	str	r3, [r0, #0]
  402168:	4770      	bx	lr
  40216a:	bf00      	nop

0040216c <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  40216c:	2310      	movs	r3, #16
  40216e:	6003      	str	r3, [r0, #0]
  402170:	4770      	bx	lr
  402172:	bf00      	nop

00402174 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402174:	6943      	ldr	r3, [r0, #20]
  402176:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40217a:	bf1d      	ittte	ne
  40217c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402180:	61c1      	strne	r1, [r0, #28]
	return 0;
  402182:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  402184:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  402186:	4770      	bx	lr

00402188 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40218c:	6043      	str	r3, [r0, #4]
  40218e:	4770      	bx	lr

00402190 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402190:	e7fe      	b.n	402190 <Dummy_Handler>
  402192:	bf00      	nop

00402194 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402194:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402196:	4b20      	ldr	r3, [pc, #128]	; (402218 <Reset_Handler+0x84>)
  402198:	4a20      	ldr	r2, [pc, #128]	; (40221c <Reset_Handler+0x88>)
  40219a:	429a      	cmp	r2, r3
  40219c:	d912      	bls.n	4021c4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40219e:	4b20      	ldr	r3, [pc, #128]	; (402220 <Reset_Handler+0x8c>)
  4021a0:	4a1d      	ldr	r2, [pc, #116]	; (402218 <Reset_Handler+0x84>)
  4021a2:	429a      	cmp	r2, r3
  4021a4:	d21f      	bcs.n	4021e6 <Reset_Handler+0x52>
  4021a6:	1d13      	adds	r3, r2, #4
  4021a8:	4c1e      	ldr	r4, [pc, #120]	; (402224 <Reset_Handler+0x90>)
  4021aa:	1ae4      	subs	r4, r4, r3
  4021ac:	f024 0403 	bic.w	r4, r4, #3
  4021b0:	3404      	adds	r4, #4
  4021b2:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  4021b4:	4610      	mov	r0, r2
  4021b6:	4919      	ldr	r1, [pc, #100]	; (40221c <Reset_Handler+0x88>)
  4021b8:	585a      	ldr	r2, [r3, r1]
  4021ba:	501a      	str	r2, [r3, r0]
  4021bc:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4021be:	42a3      	cmp	r3, r4
  4021c0:	d1fa      	bne.n	4021b8 <Reset_Handler+0x24>
  4021c2:	e010      	b.n	4021e6 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4021c4:	4b14      	ldr	r3, [pc, #80]	; (402218 <Reset_Handler+0x84>)
  4021c6:	4a15      	ldr	r2, [pc, #84]	; (40221c <Reset_Handler+0x88>)
  4021c8:	429a      	cmp	r2, r3
  4021ca:	d20c      	bcs.n	4021e6 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4021cc:	4a14      	ldr	r2, [pc, #80]	; (402220 <Reset_Handler+0x8c>)
  4021ce:	4619      	mov	r1, r3
  4021d0:	1ad3      	subs	r3, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4021d2:	4815      	ldr	r0, [pc, #84]	; (402228 <Reset_Handler+0x94>)
  4021d4:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4021d6:	b133      	cbz	r3, 4021e6 <Reset_Handler+0x52>
  4021d8:	4613      	mov	r3, r2
  4021da:	1a9c      	subs	r4, r3, r2
			*pDest-- = *pSrc--;
  4021dc:	5824      	ldr	r4, [r4, r0]
  4021de:	f843 4d04 	str.w	r4, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4021e2:	4299      	cmp	r1, r3
  4021e4:	d1f9      	bne.n	4021da <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4021e6:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4021e8:	4b10      	ldr	r3, [pc, #64]	; (40222c <Reset_Handler+0x98>)
  4021ea:	4a11      	ldr	r2, [pc, #68]	; (402230 <Reset_Handler+0x9c>)
  4021ec:	429a      	cmp	r2, r3
  4021ee:	d20b      	bcs.n	402208 <Reset_Handler+0x74>
  4021f0:	1f13      	subs	r3, r2, #4
  4021f2:	4910      	ldr	r1, [pc, #64]	; (402234 <Reset_Handler+0xa0>)
  4021f4:	1ac9      	subs	r1, r1, r3
  4021f6:	f021 0103 	bic.w	r1, r1, #3
  4021fa:	1d1a      	adds	r2, r3, #4
  4021fc:	4411      	add	r1, r2
		*pDest++ = 0;
  4021fe:	2200      	movs	r2, #0
  402200:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402204:	428b      	cmp	r3, r1
  402206:	d1fb      	bne.n	402200 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  402208:	4b0b      	ldr	r3, [pc, #44]	; (402238 <Reset_Handler+0xa4>)
  40220a:	4a0c      	ldr	r2, [pc, #48]	; (40223c <Reset_Handler+0xa8>)
  40220c:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40220e:	4b0c      	ldr	r3, [pc, #48]	; (402240 <Reset_Handler+0xac>)
  402210:	4798      	blx	r3

	/* Branch to main function */
	main();
  402212:	4b0c      	ldr	r3, [pc, #48]	; (402244 <Reset_Handler+0xb0>)
  402214:	4798      	blx	r3
  402216:	e7fe      	b.n	402216 <Reset_Handler+0x82>
  402218:	20000000 	.word	0x20000000
  40221c:	00409d70 	.word	0x00409d70
  402220:	20000cb4 	.word	0x20000cb4
  402224:	20000cb7 	.word	0x20000cb7
  402228:	00409d6c 	.word	0x00409d6c
  40222c:	20001010 	.word	0x20001010
  402230:	20000cb4 	.word	0x20000cb4
  402234:	2000100b 	.word	0x2000100b
  402238:	e000ed00 	.word	0xe000ed00
  40223c:	00400000 	.word	0x00400000
  402240:	004050e9 	.word	0x004050e9
  402244:	00403e5d 	.word	0x00403e5d

00402248 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402248:	4b3d      	ldr	r3, [pc, #244]	; (402340 <SystemCoreClockUpdate+0xf8>)
  40224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40224c:	f003 0303 	and.w	r3, r3, #3
  402250:	2b03      	cmp	r3, #3
  402252:	d85d      	bhi.n	402310 <SystemCoreClockUpdate+0xc8>
  402254:	e8df f003 	tbb	[pc, r3]
  402258:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40225c:	4b39      	ldr	r3, [pc, #228]	; (402344 <SystemCoreClockUpdate+0xfc>)
  40225e:	695b      	ldr	r3, [r3, #20]
  402260:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402264:	bf14      	ite	ne
  402266:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40226a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40226e:	4b36      	ldr	r3, [pc, #216]	; (402348 <SystemCoreClockUpdate+0x100>)
  402270:	601a      	str	r2, [r3, #0]
  402272:	e04d      	b.n	402310 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402274:	4b32      	ldr	r3, [pc, #200]	; (402340 <SystemCoreClockUpdate+0xf8>)
  402276:	6a1b      	ldr	r3, [r3, #32]
  402278:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40227c:	d003      	beq.n	402286 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40227e:	4a33      	ldr	r2, [pc, #204]	; (40234c <SystemCoreClockUpdate+0x104>)
  402280:	4b31      	ldr	r3, [pc, #196]	; (402348 <SystemCoreClockUpdate+0x100>)
  402282:	601a      	str	r2, [r3, #0]
  402284:	e044      	b.n	402310 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402286:	4a32      	ldr	r2, [pc, #200]	; (402350 <SystemCoreClockUpdate+0x108>)
  402288:	4b2f      	ldr	r3, [pc, #188]	; (402348 <SystemCoreClockUpdate+0x100>)
  40228a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40228c:	4b2c      	ldr	r3, [pc, #176]	; (402340 <SystemCoreClockUpdate+0xf8>)
  40228e:	6a1b      	ldr	r3, [r3, #32]
  402290:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402294:	2b10      	cmp	r3, #16
  402296:	d002      	beq.n	40229e <SystemCoreClockUpdate+0x56>
  402298:	2b20      	cmp	r3, #32
  40229a:	d004      	beq.n	4022a6 <SystemCoreClockUpdate+0x5e>
  40229c:	e038      	b.n	402310 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40229e:	4a2d      	ldr	r2, [pc, #180]	; (402354 <SystemCoreClockUpdate+0x10c>)
  4022a0:	4b29      	ldr	r3, [pc, #164]	; (402348 <SystemCoreClockUpdate+0x100>)
  4022a2:	601a      	str	r2, [r3, #0]
			break;
  4022a4:	e034      	b.n	402310 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4022a6:	4a29      	ldr	r2, [pc, #164]	; (40234c <SystemCoreClockUpdate+0x104>)
  4022a8:	4b27      	ldr	r3, [pc, #156]	; (402348 <SystemCoreClockUpdate+0x100>)
  4022aa:	601a      	str	r2, [r3, #0]
			break;
  4022ac:	e030      	b.n	402310 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4022ae:	4b24      	ldr	r3, [pc, #144]	; (402340 <SystemCoreClockUpdate+0xf8>)
  4022b0:	6a1b      	ldr	r3, [r3, #32]
  4022b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4022b6:	d003      	beq.n	4022c0 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4022b8:	4a24      	ldr	r2, [pc, #144]	; (40234c <SystemCoreClockUpdate+0x104>)
  4022ba:	4b23      	ldr	r3, [pc, #140]	; (402348 <SystemCoreClockUpdate+0x100>)
  4022bc:	601a      	str	r2, [r3, #0]
  4022be:	e012      	b.n	4022e6 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4022c0:	4a23      	ldr	r2, [pc, #140]	; (402350 <SystemCoreClockUpdate+0x108>)
  4022c2:	4b21      	ldr	r3, [pc, #132]	; (402348 <SystemCoreClockUpdate+0x100>)
  4022c4:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4022c6:	4b1e      	ldr	r3, [pc, #120]	; (402340 <SystemCoreClockUpdate+0xf8>)
  4022c8:	6a1b      	ldr	r3, [r3, #32]
  4022ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4022ce:	2b10      	cmp	r3, #16
  4022d0:	d002      	beq.n	4022d8 <SystemCoreClockUpdate+0x90>
  4022d2:	2b20      	cmp	r3, #32
  4022d4:	d004      	beq.n	4022e0 <SystemCoreClockUpdate+0x98>
  4022d6:	e006      	b.n	4022e6 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4022d8:	4a1e      	ldr	r2, [pc, #120]	; (402354 <SystemCoreClockUpdate+0x10c>)
  4022da:	4b1b      	ldr	r3, [pc, #108]	; (402348 <SystemCoreClockUpdate+0x100>)
  4022dc:	601a      	str	r2, [r3, #0]
					break;
  4022de:	e002      	b.n	4022e6 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4022e0:	4a1a      	ldr	r2, [pc, #104]	; (40234c <SystemCoreClockUpdate+0x104>)
  4022e2:	4b19      	ldr	r3, [pc, #100]	; (402348 <SystemCoreClockUpdate+0x100>)
  4022e4:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4022e6:	4b16      	ldr	r3, [pc, #88]	; (402340 <SystemCoreClockUpdate+0xf8>)
  4022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4022ea:	f003 0303 	and.w	r3, r3, #3
  4022ee:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4022f0:	4b13      	ldr	r3, [pc, #76]	; (402340 <SystemCoreClockUpdate+0xf8>)
  4022f2:	bf07      	ittee	eq
  4022f4:	6a98      	ldreq	r0, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4022f6:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4022f8:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4022fa:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  4022fc:	4b12      	ldr	r3, [pc, #72]	; (402348 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4022fe:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402302:	681a      	ldr	r2, [r3, #0]
  402304:	fb00 2202 	mla	r2, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  402308:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40230a:	fbb2 f2f1 	udiv	r2, r2, r1
  40230e:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402310:	4b0b      	ldr	r3, [pc, #44]	; (402340 <SystemCoreClockUpdate+0xf8>)
  402312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402314:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402318:	2b70      	cmp	r3, #112	; 0x70
  40231a:	d107      	bne.n	40232c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  40231c:	4b0a      	ldr	r3, [pc, #40]	; (402348 <SystemCoreClockUpdate+0x100>)
  40231e:	681a      	ldr	r2, [r3, #0]
  402320:	490d      	ldr	r1, [pc, #52]	; (402358 <SystemCoreClockUpdate+0x110>)
  402322:	fba1 0202 	umull	r0, r2, r1, r2
  402326:	0852      	lsrs	r2, r2, #1
  402328:	601a      	str	r2, [r3, #0]
  40232a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40232c:	4b04      	ldr	r3, [pc, #16]	; (402340 <SystemCoreClockUpdate+0xf8>)
  40232e:	6b19      	ldr	r1, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402330:	4b05      	ldr	r3, [pc, #20]	; (402348 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402332:	f3c1 1102 	ubfx	r1, r1, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402336:	681a      	ldr	r2, [r3, #0]
  402338:	40ca      	lsrs	r2, r1
  40233a:	601a      	str	r2, [r3, #0]
  40233c:	4770      	bx	lr
  40233e:	bf00      	nop
  402340:	400e0400 	.word	0x400e0400
  402344:	400e1410 	.word	0x400e1410
  402348:	20000430 	.word	0x20000430
  40234c:	00b71b00 	.word	0x00b71b00
  402350:	003d0900 	.word	0x003d0900
  402354:	007a1200 	.word	0x007a1200
  402358:	aaaaaaab 	.word	0xaaaaaaab

0040235c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40235c:	4b1a      	ldr	r3, [pc, #104]	; (4023c8 <system_init_flash+0x6c>)
  40235e:	4298      	cmp	r0, r3
  402360:	d807      	bhi.n	402372 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402362:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  402366:	4a19      	ldr	r2, [pc, #100]	; (4023cc <system_init_flash+0x70>)
  402368:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40236a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40236e:	6013      	str	r3, [r2, #0]
  402370:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402372:	4b17      	ldr	r3, [pc, #92]	; (4023d0 <system_init_flash+0x74>)
  402374:	4298      	cmp	r0, r3
  402376:	d806      	bhi.n	402386 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402378:	4b16      	ldr	r3, [pc, #88]	; (4023d4 <system_init_flash+0x78>)
  40237a:	4a14      	ldr	r2, [pc, #80]	; (4023cc <system_init_flash+0x70>)
  40237c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40237e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402382:	6013      	str	r3, [r2, #0]
  402384:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402386:	4b14      	ldr	r3, [pc, #80]	; (4023d8 <system_init_flash+0x7c>)
  402388:	4298      	cmp	r0, r3
  40238a:	d806      	bhi.n	40239a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40238c:	4b13      	ldr	r3, [pc, #76]	; (4023dc <system_init_flash+0x80>)
  40238e:	4a0f      	ldr	r2, [pc, #60]	; (4023cc <system_init_flash+0x70>)
  402390:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402392:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402396:	6013      	str	r3, [r2, #0]
  402398:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40239a:	4b11      	ldr	r3, [pc, #68]	; (4023e0 <system_init_flash+0x84>)
  40239c:	4298      	cmp	r0, r3
  40239e:	d806      	bhi.n	4023ae <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4023a0:	4b10      	ldr	r3, [pc, #64]	; (4023e4 <system_init_flash+0x88>)
  4023a2:	4a0a      	ldr	r2, [pc, #40]	; (4023cc <system_init_flash+0x70>)
  4023a4:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4023a6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4023aa:	6013      	str	r3, [r2, #0]
  4023ac:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4023ae:	4b0e      	ldr	r3, [pc, #56]	; (4023e8 <system_init_flash+0x8c>)
  4023b0:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4023b2:	bf94      	ite	ls
  4023b4:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4023b8:	4b0c      	ldrhi	r3, [pc, #48]	; (4023ec <system_init_flash+0x90>)
  4023ba:	4a04      	ldr	r2, [pc, #16]	; (4023cc <system_init_flash+0x70>)
  4023bc:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4023be:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4023c2:	6013      	str	r3, [r2, #0]
  4023c4:	4770      	bx	lr
  4023c6:	bf00      	nop
  4023c8:	01312cff 	.word	0x01312cff
  4023cc:	400e0a00 	.word	0x400e0a00
  4023d0:	026259ff 	.word	0x026259ff
  4023d4:	04000100 	.word	0x04000100
  4023d8:	039386ff 	.word	0x039386ff
  4023dc:	04000200 	.word	0x04000200
  4023e0:	04c4b3ff 	.word	0x04c4b3ff
  4023e4:	04000300 	.word	0x04000300
  4023e8:	05f5e0ff 	.word	0x05f5e0ff
  4023ec:	04000500 	.word	0x04000500

004023f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4023f0:	4b09      	ldr	r3, [pc, #36]	; (402418 <_sbrk+0x28>)
  4023f2:	681b      	ldr	r3, [r3, #0]
  4023f4:	b913      	cbnz	r3, 4023fc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4023f6:	4a09      	ldr	r2, [pc, #36]	; (40241c <_sbrk+0x2c>)
  4023f8:	4b07      	ldr	r3, [pc, #28]	; (402418 <_sbrk+0x28>)
  4023fa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4023fc:	4b06      	ldr	r3, [pc, #24]	; (402418 <_sbrk+0x28>)
  4023fe:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402400:	181a      	adds	r2, r3, r0
  402402:	4907      	ldr	r1, [pc, #28]	; (402420 <_sbrk+0x30>)
  402404:	4291      	cmp	r1, r2
  402406:	db04      	blt.n	402412 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402408:	4610      	mov	r0, r2
  40240a:	4a03      	ldr	r2, [pc, #12]	; (402418 <_sbrk+0x28>)
  40240c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40240e:	4618      	mov	r0, r3
  402410:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  402412:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  402416:	4770      	bx	lr
  402418:	20000d6c 	.word	0x20000d6c
  40241c:	20004010 	.word	0x20004010
  402420:	20027ffc 	.word	0x20027ffc

00402424 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  402424:	b510      	push	{r4, lr}
  402426:	4604      	mov	r4, r0
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  402428:	480f      	ldr	r0, [pc, #60]	; (402468 <disk_initialize+0x44>)
  40242a:	2100      	movs	r1, #0
  40242c:	4b0f      	ldr	r3, [pc, #60]	; (40246c <disk_initialize+0x48>)
  40242e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  402430:	2c01      	cmp	r4, #1
  402432:	d812      	bhi.n	40245a <disk_initialize+0x36>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  402434:	4620      	mov	r0, r4
  402436:	4b0e      	ldr	r3, [pc, #56]	; (402470 <disk_initialize+0x4c>)
  402438:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  40243a:	2803      	cmp	r0, #3
  40243c:	d104      	bne.n	402448 <disk_initialize+0x24>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  40243e:	4620      	mov	r0, r4
  402440:	4b0b      	ldr	r3, [pc, #44]	; (402470 <disk_initialize+0x4c>)
  402442:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  402444:	2803      	cmp	r0, #3
  402446:	d00a      	beq.n	40245e <disk_initialize+0x3a>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  402448:	b958      	cbnz	r0, 402462 <disk_initialize+0x3e>
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  40244a:	4620      	mov	r0, r4
  40244c:	4b09      	ldr	r3, [pc, #36]	; (402474 <disk_initialize+0x50>)
  40244e:	4798      	blx	r3
  402450:	2800      	cmp	r0, #0
		return STA_PROTECT;
  402452:	bf0c      	ite	eq
  402454:	2000      	moveq	r0, #0
  402456:	2004      	movne	r0, #4
  402458:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  40245a:	2001      	movs	r0, #1
  40245c:	bd10      	pop	{r4, pc}
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  40245e:	2001      	movs	r0, #1
  402460:	bd10      	pop	{r4, pc}
  402462:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
  402464:	bd10      	pop	{r4, pc}
  402466:	bf00      	nop
  402468:	400e1460 	.word	0x400e1460
  40246c:	00401e91 	.word	0x00401e91
  402470:	00401685 	.word	0x00401685
  402474:	004016b9 	.word	0x004016b9

00402478 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  402478:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  40247a:	4b05      	ldr	r3, [pc, #20]	; (402490 <disk_status+0x18>)
  40247c:	4798      	blx	r3
  40247e:	b120      	cbz	r0, 40248a <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  402480:	2802      	cmp	r0, #2
  402482:	bf0c      	ite	eq
  402484:	2003      	moveq	r0, #3
  402486:	2001      	movne	r0, #1
  402488:	bd08      	pop	{r3, pc}
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
	case CTRL_GOOD:
		return 0;
  40248a:	2000      	movs	r0, #0
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
	}
}
  40248c:	bd08      	pop	{r3, pc}
  40248e:	bf00      	nop
  402490:	00401685 	.word	0x00401685

00402494 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  402494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402498:	b083      	sub	sp, #12
  40249a:	4607      	mov	r7, r0
  40249c:	460d      	mov	r5, r1
  40249e:	4614      	mov	r4, r2
  4024a0:	469a      	mov	sl, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4024a2:	4e18      	ldr	r6, [pc, #96]	; (402504 <disk_read+0x70>)
  4024a4:	47b0      	blx	r6
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4024a6:	4606      	mov	r6, r0
  4024a8:	b1f8      	cbz	r0, 4024ea <disk_read+0x56>
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  4024aa:	4638      	mov	r0, r7
  4024ac:	a901      	add	r1, sp, #4
  4024ae:	4b16      	ldr	r3, [pc, #88]	; (402508 <disk_read+0x74>)
  4024b0:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  4024b2:	46b0      	mov	r8, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  4024b4:	fb06 420a 	mla	r2, r6, sl, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4024b8:	9b01      	ldr	r3, [sp, #4]
  4024ba:	fb03 6306 	mla	r3, r3, r6, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  4024be:	429a      	cmp	r2, r3
  4024c0:	d815      	bhi.n	4024ee <disk_read+0x5a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4024c2:	46d1      	mov	r9, sl
  4024c4:	f1ba 0f00 	cmp.w	sl, #0
  4024c8:	d013      	beq.n	4024f2 <disk_read+0x5e>
  4024ca:	ea4f 2a46 	mov.w	sl, r6, lsl #9
  4024ce:	2600      	movs	r6, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4024d0:	f8df b038 	ldr.w	fp, [pc, #56]	; 40250c <disk_read+0x78>
  4024d4:	4638      	mov	r0, r7
  4024d6:	4621      	mov	r1, r4
  4024d8:	462a      	mov	r2, r5
  4024da:	47d8      	blx	fp
  4024dc:	b958      	cbnz	r0, 4024f6 <disk_read+0x62>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4024de:	3601      	adds	r6, #1
  4024e0:	4444      	add	r4, r8
  4024e2:	4455      	add	r5, sl
  4024e4:	454e      	cmp	r6, r9
  4024e6:	d3f5      	bcc.n	4024d4 <disk_read+0x40>
  4024e8:	e007      	b.n	4024fa <disk_read+0x66>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  4024ea:	2001      	movs	r0, #1
  4024ec:	e006      	b.n	4024fc <disk_read+0x68>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  4024ee:	2004      	movs	r0, #4
  4024f0:	e004      	b.n	4024fc <disk_read+0x68>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  4024f2:	2000      	movs	r0, #0
  4024f4:	e002      	b.n	4024fc <disk_read+0x68>
	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  4024f6:	2001      	movs	r0, #1
  4024f8:	e000      	b.n	4024fc <disk_read+0x68>
		}
	}

	return RES_OK;
  4024fa:	2000      	movs	r0, #0

#else
	return RES_ERROR;
#endif
}
  4024fc:	b003      	add	sp, #12
  4024fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402502:	bf00      	nop
  402504:	004016ad 	.word	0x004016ad
  402508:	00401699 	.word	0x00401699
  40250c:	004016cd 	.word	0x004016cd

00402510 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  402510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402514:	b083      	sub	sp, #12
  402516:	4607      	mov	r7, r0
  402518:	460d      	mov	r5, r1
  40251a:	4614      	mov	r4, r2
  40251c:	469a      	mov	sl, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  40251e:	4e18      	ldr	r6, [pc, #96]	; (402580 <disk_write+0x70>)
  402520:	47b0      	blx	r6
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402522:	4606      	mov	r6, r0
  402524:	b1f8      	cbz	r0, 402566 <disk_write+0x56>
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  402526:	4638      	mov	r0, r7
  402528:	a901      	add	r1, sp, #4
  40252a:	4b16      	ldr	r3, [pc, #88]	; (402584 <disk_write+0x74>)
  40252c:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  40252e:	46b0      	mov	r8, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  402530:	fb06 420a 	mla	r2, r6, sl, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  402534:	9b01      	ldr	r3, [sp, #4]
  402536:	fb03 6306 	mla	r3, r3, r6, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  40253a:	429a      	cmp	r2, r3
  40253c:	d815      	bhi.n	40256a <disk_write+0x5a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  40253e:	46d1      	mov	r9, sl
  402540:	f1ba 0f00 	cmp.w	sl, #0
  402544:	d013      	beq.n	40256e <disk_write+0x5e>
  402546:	ea4f 2a46 	mov.w	sl, r6, lsl #9
  40254a:	2600      	movs	r6, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  40254c:	f8df b038 	ldr.w	fp, [pc, #56]	; 402588 <disk_write+0x78>
  402550:	4638      	mov	r0, r7
  402552:	4621      	mov	r1, r4
  402554:	462a      	mov	r2, r5
  402556:	47d8      	blx	fp
  402558:	b958      	cbnz	r0, 402572 <disk_write+0x62>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  40255a:	3601      	adds	r6, #1
  40255c:	4444      	add	r4, r8
  40255e:	4455      	add	r5, sl
  402560:	454e      	cmp	r6, r9
  402562:	d3f5      	bcc.n	402550 <disk_write+0x40>
  402564:	e007      	b.n	402576 <disk_write+0x66>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  402566:	2001      	movs	r0, #1
  402568:	e006      	b.n	402578 <disk_write+0x68>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  40256a:	2004      	movs	r0, #4
  40256c:	e004      	b.n	402578 <disk_write+0x68>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  40256e:	2000      	movs	r0, #0
  402570:	e002      	b.n	402578 <disk_write+0x68>
	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  402572:	2001      	movs	r0, #1
  402574:	e000      	b.n	402578 <disk_write+0x68>
		}
	}

	return RES_OK;
  402576:	2000      	movs	r0, #0

#else
	return RES_ERROR;
#endif
}
  402578:	b003      	add	sp, #12
  40257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40257e:	bf00      	nop
  402580:	004016ad 	.word	0x004016ad
  402584:	00401699 	.word	0x00401699
  402588:	004016e5 	.word	0x004016e5

0040258c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  40258c:	b122      	cbz	r2, 402598 <mem_set+0xc>
  40258e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  402590:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402594:	4290      	cmp	r0, r2
  402596:	d1fb      	bne.n	402590 <mem_set+0x4>
  402598:	4770      	bx	lr
  40259a:	bf00      	nop

0040259c <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  40259c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40259e:	6983      	ldr	r3, [r0, #24]
  4025a0:	3b02      	subs	r3, #2
  4025a2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  4025a4:	bf3d      	ittte	cc
  4025a6:	7882      	ldrbcc	r2, [r0, #2]
  4025a8:	6a83      	ldrcc	r3, [r0, #40]	; 0x28
  4025aa:	fb02 3001 	mlacc	r0, r2, r1, r3
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4025ae:	2000      	movcs	r0, #0
	return clst * fs->csize + fs->database;
}
  4025b0:	4770      	bx	lr
  4025b2:	bf00      	nop

004025b4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  4025b4:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  4025b8:	2300      	movs	r3, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  4025ba:	01da      	lsls	r2, r3, #7
  4025bc:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  4025c0:	f810 2b01 	ldrb.w	r2, [r0], #1
  4025c4:	fa52 f383 	uxtab	r3, r2, r3
  4025c8:	b2db      	uxtb	r3, r3
  4025ca:	4288      	cmp	r0, r1
  4025cc:	d1f5      	bne.n	4025ba <sum_sfn+0x6>
	return sum;
}
  4025ce:	4618      	mov	r0, r3
  4025d0:	4770      	bx	lr
  4025d2:	bf00      	nop

004025d4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  4025d4:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  4025d6:	b170      	cbz	r0, 4025f6 <validate+0x22>
  4025d8:	7802      	ldrb	r2, [r0, #0]
  4025da:	b172      	cbz	r2, 4025fa <validate+0x26>
  4025dc:	88c2      	ldrh	r2, [r0, #6]
  4025de:	428a      	cmp	r2, r1
  4025e0:	d10d      	bne.n	4025fe <validate+0x2a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  4025e2:	7840      	ldrb	r0, [r0, #1]
  4025e4:	4b07      	ldr	r3, [pc, #28]	; (402604 <validate+0x30>)
  4025e6:	4798      	blx	r3
  4025e8:	f000 0001 	and.w	r0, r0, #1
		return FR_NOT_READY;
  4025ec:	2800      	cmp	r0, #0
  4025ee:	bf0c      	ite	eq
  4025f0:	2000      	moveq	r0, #0
  4025f2:	2003      	movne	r0, #3
  4025f4:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
  4025f6:	2009      	movs	r0, #9
  4025f8:	bd08      	pop	{r3, pc}
  4025fa:	2009      	movs	r0, #9
  4025fc:	bd08      	pop	{r3, pc}
  4025fe:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  402600:	bd08      	pop	{r3, pc}
  402602:	bf00      	nop
  402604:	00402479 	.word	0x00402479

00402608 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  402608:	b538      	push	{r3, r4, r5, lr}
  40260a:	4604      	mov	r4, r0
  40260c:	460a      	mov	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  40260e:	7840      	ldrb	r0, [r0, #1]
  402610:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402614:	2301      	movs	r3, #1
  402616:	4d1d      	ldr	r5, [pc, #116]	; (40268c <check_fs+0x84>)
  402618:	47a8      	blx	r5
  40261a:	bb88      	cbnz	r0, 402680 <check_fs+0x78>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  40261c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  402620:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  402624:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  402628:	b212      	sxth	r2, r2
  40262a:	4b19      	ldr	r3, [pc, #100]	; (402690 <check_fs+0x88>)
  40262c:	429a      	cmp	r2, r3
  40262e:	d129      	bne.n	402684 <check_fs+0x7c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  402630:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  402634:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  402638:	041b      	lsls	r3, r3, #16
  40263a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  40263e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
  402642:	4313      	orrs	r3, r2
  402644:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  402648:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40264c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  402650:	4b10      	ldr	r3, [pc, #64]	; (402694 <check_fs+0x8c>)
  402652:	429a      	cmp	r2, r3
  402654:	d018      	beq.n	402688 <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  402656:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
  40265a:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
  40265e:	041b      	lsls	r3, r3, #16
  402660:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  402664:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  402668:	4303      	orrs	r3, r0
  40266a:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
  40266e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  402672:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
  402676:	4b07      	ldr	r3, [pc, #28]	; (402694 <check_fs+0x8c>)
  402678:	1ac0      	subs	r0, r0, r3
  40267a:	bf18      	it	ne
  40267c:	2001      	movne	r0, #1
  40267e:	bd38      	pop	{r3, r4, r5, pc}
  402680:	2003      	movs	r0, #3
  402682:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
  402684:	2002      	movs	r0, #2
  402686:	bd38      	pop	{r3, r4, r5, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
  402688:	2000      	movs	r0, #0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
  40268a:	bd38      	pop	{r3, r4, r5, pc}
  40268c:	00402495 	.word	0x00402495
  402690:	ffffaa55 	.word	0xffffaa55
  402694:	00544146 	.word	0x00544146

00402698 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  402698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40269c:	4616      	mov	r6, r2
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  40269e:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  4026a0:	781c      	ldrb	r4, [r3, #0]
  4026a2:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  4026a4:	2c09      	cmp	r4, #9
  4026a6:	d808      	bhi.n	4026ba <chk_mounted+0x22>
  4026a8:	785a      	ldrb	r2, [r3, #1]
  4026aa:	2a3a      	cmp	r2, #58	; 0x3a
  4026ac:	d107      	bne.n	4026be <chk_mounted+0x26>
		p += 2; *path = p;				/* Return pointer to the path name */
  4026ae:	3302      	adds	r3, #2
  4026b0:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  4026b2:	2c07      	cmp	r4, #7
  4026b4:	f200 8165 	bhi.w	402982 <chk_mounted+0x2ea>
  4026b8:	e002      	b.n	4026c0 <chk_mounted+0x28>
  4026ba:	2400      	movs	r4, #0
  4026bc:	e000      	b.n	4026c0 <chk_mounted+0x28>
  4026be:	2400      	movs	r4, #0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  4026c0:	4bd0      	ldr	r3, [pc, #832]	; (402a04 <chk_mounted+0x36c>)
  4026c2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  4026c6:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  4026c8:	2d00      	cmp	r5, #0
  4026ca:	f000 815d 	beq.w	402988 <chk_mounted+0x2f0>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  4026ce:	782b      	ldrb	r3, [r5, #0]
  4026d0:	b18b      	cbz	r3, 4026f6 <chk_mounted+0x5e>
		stat = disk_status(fs->drv);
  4026d2:	7868      	ldrb	r0, [r5, #1]
  4026d4:	4bcc      	ldr	r3, [pc, #816]	; (402a08 <chk_mounted+0x370>)
  4026d6:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  4026d8:	f010 0f01 	tst.w	r0, #1
  4026dc:	d10b      	bne.n	4026f6 <chk_mounted+0x5e>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  4026de:	2e00      	cmp	r6, #0
  4026e0:	f000 8155 	beq.w	40298e <chk_mounted+0x2f6>
  4026e4:	f000 0004 	and.w	r0, r0, #4
  4026e8:	b2c0      	uxtb	r0, r0
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
  4026ea:	2800      	cmp	r0, #0
  4026ec:	bf14      	ite	ne
  4026ee:	200a      	movne	r0, #10
  4026f0:	2000      	moveq	r0, #0
  4026f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  4026f6:	2300      	movs	r3, #0
  4026f8:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  4026fa:	b2e0      	uxtb	r0, r4
  4026fc:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  4026fe:	4bc3      	ldr	r3, [pc, #780]	; (402a0c <chk_mounted+0x374>)
  402700:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  402702:	f010 0f01 	tst.w	r0, #1
  402706:	f040 8145 	bne.w	402994 <chk_mounted+0x2fc>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  40270a:	b11e      	cbz	r6, 402714 <chk_mounted+0x7c>
  40270c:	f010 0f04 	tst.w	r0, #4
  402710:	f040 8143 	bne.w	40299a <chk_mounted+0x302>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402714:	4628      	mov	r0, r5
  402716:	2100      	movs	r1, #0
  402718:	4bbd      	ldr	r3, [pc, #756]	; (402a10 <chk_mounted+0x378>)
  40271a:	4798      	blx	r3
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  40271c:	2801      	cmp	r0, #1
  40271e:	d117      	bne.n	402750 <chk_mounted+0xb8>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
  402720:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  402724:	2b00      	cmp	r3, #0
  402726:	f000 813b 	beq.w	4029a0 <chk_mounted+0x308>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  40272a:	f895 21f9 	ldrb.w	r2, [r5, #505]	; 0x1f9
  40272e:	f895 31f8 	ldrb.w	r3, [r5, #504]	; 0x1f8
  402732:	041b      	lsls	r3, r3, #16
  402734:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  402738:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  40273c:	4313      	orrs	r3, r2
  40273e:	f895 41f7 	ldrb.w	r4, [r5, #503]	; 0x1f7
  402742:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  402746:	4628      	mov	r0, r5
  402748:	4621      	mov	r1, r4
  40274a:	4bb1      	ldr	r3, [pc, #708]	; (402a10 <chk_mounted+0x378>)
  40274c:	4798      	blx	r3
  40274e:	e000      	b.n	402752 <chk_mounted+0xba>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402750:	2400      	movs	r4, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  402752:	2803      	cmp	r0, #3
  402754:	f000 8127 	beq.w	4029a6 <chk_mounted+0x30e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402758:	2800      	cmp	r0, #0
  40275a:	f040 8127 	bne.w	4029ac <chk_mounted+0x314>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  40275e:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  402762:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  402766:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40276a:	b21b      	sxth	r3, r3
  40276c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402770:	f040 811f 	bne.w	4029b2 <chk_mounted+0x31a>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  402774:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
  402778:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  40277c:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
  402780:	d10d      	bne.n	40279e <chk_mounted+0x106>
  402782:	f895 2057 	ldrb.w	r2, [r5, #87]	; 0x57
  402786:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
  40278a:	041b      	lsls	r3, r3, #16
  40278c:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  402790:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  402794:	4313      	orrs	r3, r2
  402796:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
  40279a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	fs->fsize = fasize;
  40279e:	61e8      	str	r0, [r5, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  4027a0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
  4027a4:	70e9      	strb	r1, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  4027a6:	1e4b      	subs	r3, r1, #1
  4027a8:	b2db      	uxtb	r3, r3
  4027aa:	2b01      	cmp	r3, #1
  4027ac:	f200 8104 	bhi.w	4029b8 <chk_mounted+0x320>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  4027b0:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  4027b4:	70ab      	strb	r3, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  4027b6:	2b00      	cmp	r3, #0
  4027b8:	f000 8101 	beq.w	4029be <chk_mounted+0x326>
  4027bc:	1e5a      	subs	r2, r3, #1
  4027be:	421a      	tst	r2, r3
  4027c0:	f040 8100 	bne.w	4029c4 <chk_mounted+0x32c>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  4027c4:	f895 6042 	ldrb.w	r6, [r5, #66]	; 0x42
  4027c8:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
  4027cc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  4027d0:	812a      	strh	r2, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4027d2:	f012 0f0f 	tst.w	r2, #15
  4027d6:	f040 80f8 	bne.w	4029ca <chk_mounted+0x332>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  4027da:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
  4027de:	f895 6043 	ldrb.w	r6, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  4027e2:	ea56 2607 	orrs.w	r6, r6, r7, lsl #8
  4027e6:	d10d      	bne.n	402804 <chk_mounted+0x16c>
  4027e8:	f895 7053 	ldrb.w	r7, [r5, #83]	; 0x53
  4027ec:	f895 6052 	ldrb.w	r6, [r5, #82]	; 0x52
  4027f0:	0436      	lsls	r6, r6, #16
  4027f2:	ea46 6707 	orr.w	r7, r6, r7, lsl #24
  4027f6:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
  4027fa:	433e      	orrs	r6, r7
  4027fc:	f895 7051 	ldrb.w	r7, [r5, #81]	; 0x51
  402800:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  402804:	f895 c03f 	ldrb.w	ip, [r5, #63]	; 0x3f
  402808:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40280c:	ea57 270c 	orrs.w	r7, r7, ip, lsl #8
  402810:	f000 80de 	beq.w	4029d0 <chk_mounted+0x338>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
  402814:	fb01 fc00 	mul.w	ip, r1, r0

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  402818:	eb07 1112 	add.w	r1, r7, r2, lsr #4
  40281c:	4461      	add	r1, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40281e:	428e      	cmp	r6, r1
  402820:	f0c0 80d9 	bcc.w	4029d6 <chk_mounted+0x33e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  402824:	1a76      	subs	r6, r6, r1
  402826:	fbb6 f3f3 	udiv	r3, r6, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  40282a:	2b00      	cmp	r3, #0
  40282c:	f000 80d6 	beq.w	4029dc <chk_mounted+0x344>
	fmt = FS_FAT12;
  402830:	f640 76f5 	movw	r6, #4085	; 0xff5
  402834:	42b3      	cmp	r3, r6
  402836:	bf8c      	ite	hi
  402838:	2602      	movhi	r6, #2
  40283a:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  40283c:	f64f 78f5 	movw	r8, #65525	; 0xfff5
  402840:	4543      	cmp	r3, r8
  402842:	f200 80d7 	bhi.w	4029f4 <chk_mounted+0x35c>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402846:	3302      	adds	r3, #2
  402848:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  40284a:	4421      	add	r1, r4
  40284c:	62a9      	str	r1, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40284e:	4427      	add	r7, r4
  402850:	622f      	str	r7, [r5, #32]
	if (fmt == FS_FAT32) {
  402852:	2e03      	cmp	r6, #3
  402854:	d113      	bne.n	40287e <chk_mounted+0x1e6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402856:	2a00      	cmp	r2, #0
  402858:	f040 80c3 	bne.w	4029e2 <chk_mounted+0x34a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  40285c:	f895 105f 	ldrb.w	r1, [r5, #95]	; 0x5f
  402860:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
  402864:	0412      	lsls	r2, r2, #16
  402866:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
  40286a:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
  40286e:	430a      	orrs	r2, r1
  402870:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
  402874:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  402878:	626a      	str	r2, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  40287a:	009b      	lsls	r3, r3, #2
  40287c:	e00d      	b.n	40289a <chk_mounted+0x202>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40287e:	2a00      	cmp	r2, #0
  402880:	f000 80b2 	beq.w	4029e8 <chk_mounted+0x350>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  402884:	4467      	add	r7, ip
  402886:	626f      	str	r7, [r5, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402888:	2e02      	cmp	r6, #2
  40288a:	bf0f      	iteee	eq
  40288c:	005b      	lsleq	r3, r3, #1
  40288e:	eb03 0243 	addne.w	r2, r3, r3, lsl #1
  402892:	f003 0301 	andne.w	r3, r3, #1
  402896:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  40289a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40289e:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
  4028a2:	f0c0 80a4 	bcc.w	4029ee <chk_mounted+0x356>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  4028a6:	f04f 33ff 	mov.w	r3, #4294967295
  4028aa:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  4028ac:	2300      	movs	r3, #0
  4028ae:	60eb      	str	r3, [r5, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  4028b0:	2e03      	cmp	r6, #3
  4028b2:	d15a      	bne.n	40296a <chk_mounted+0x2d2>
	 	fs->fsi_flag = 0;
  4028b4:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  4028b6:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
  4028ba:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
  4028be:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4028c2:	4422      	add	r2, r4
  4028c4:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4028c6:	7868      	ldrb	r0, [r5, #1]
  4028c8:	f105 0130 	add.w	r1, r5, #48	; 0x30
  4028cc:	2301      	movs	r3, #1
  4028ce:	4c51      	ldr	r4, [pc, #324]	; (402a14 <chk_mounted+0x37c>)
  4028d0:	47a0      	blx	r4
  4028d2:	2800      	cmp	r0, #0
  4028d4:	d149      	bne.n	40296a <chk_mounted+0x2d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  4028d6:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  4028da:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  4028de:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4028e2:	b212      	sxth	r2, r2
  4028e4:	4b4c      	ldr	r3, [pc, #304]	; (402a18 <chk_mounted+0x380>)
  4028e6:	429a      	cmp	r2, r3
  4028e8:	d13f      	bne.n	40296a <chk_mounted+0x2d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4028ea:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  4028ee:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  4028f2:	041b      	lsls	r3, r3, #16
  4028f4:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  4028f8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  4028fc:	4313      	orrs	r3, r2
  4028fe:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  402902:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402906:	4b45      	ldr	r3, [pc, #276]	; (402a1c <chk_mounted+0x384>)
  402908:	429a      	cmp	r2, r3
  40290a:	d12e      	bne.n	40296a <chk_mounted+0x2d2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  40290c:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  402910:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  402914:	041b      	lsls	r3, r3, #16
  402916:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  40291a:	f895 3214 	ldrb.w	r3, [r5, #532]	; 0x214
  40291e:	4313      	orrs	r3, r2
  402920:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  402924:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402928:	4b3d      	ldr	r3, [pc, #244]	; (402a20 <chk_mounted+0x388>)
  40292a:	429a      	cmp	r2, r3
  40292c:	d11d      	bne.n	40296a <chk_mounted+0x2d2>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  40292e:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  402932:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  402936:	041b      	lsls	r3, r3, #16
  402938:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  40293c:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
  402940:	4313      	orrs	r3, r2
  402942:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  402946:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40294a:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  40294c:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  402950:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  402954:	041b      	lsls	r3, r3, #16
  402956:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  40295a:	f895 3218 	ldrb.w	r3, [r5, #536]	; 0x218
  40295e:	4313      	orrs	r3, r2
  402960:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  402964:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402968:	612b      	str	r3, [r5, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  40296a:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  40296c:	4a2d      	ldr	r2, [pc, #180]	; (402a24 <chk_mounted+0x38c>)
  40296e:	8813      	ldrh	r3, [r2, #0]
  402970:	3301      	adds	r3, #1
  402972:	b29b      	uxth	r3, r3
  402974:	8013      	strh	r3, [r2, #0]
  402976:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  402978:	2000      	movs	r0, #0
  40297a:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  40297c:	7128      	strb	r0, [r5, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
  40297e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
  402982:	200b      	movs	r0, #11
  402984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402988:	200c      	movs	r0, #12
  40298a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
  40298e:	2000      	movs	r0, #0
  402990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  402994:	2003      	movs	r0, #3
  402996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
  40299a:	200a      	movs	r0, #10
  40299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  4029a0:	200d      	movs	r0, #13
  4029a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  4029a6:	2001      	movs	r0, #1
  4029a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  4029ac:	200d      	movs	r0, #13
  4029ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
  4029b2:	200d      	movs	r0, #13
  4029b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  4029b8:	200d      	movs	r0, #13
  4029ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  4029be:	200d      	movs	r0, #13
  4029c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4029c4:	200d      	movs	r0, #13
  4029c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4029ca:	200d      	movs	r0, #13
  4029cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4029d0:	200d      	movs	r0, #13
  4029d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4029d6:	200d      	movs	r0, #13
  4029d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4029dc:	200d      	movs	r0, #13
  4029de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4029e2:	200d      	movs	r0, #13
  4029e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4029e8:	200d      	movs	r0, #13
  4029ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
  4029ee:	200d      	movs	r0, #13
  4029f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  4029f4:	3302      	adds	r3, #2
  4029f6:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  4029f8:	4421      	add	r1, r4
  4029fa:	62a9      	str	r1, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  4029fc:	4427      	add	r7, r4
  4029fe:	622f      	str	r7, [r5, #32]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402a00:	2603      	movs	r6, #3
  402a02:	e728      	b.n	402856 <chk_mounted+0x1be>
  402a04:	20000d74 	.word	0x20000d74
  402a08:	00402479 	.word	0x00402479
  402a0c:	00402425 	.word	0x00402425
  402a10:	00402609 	.word	0x00402609
  402a14:	00402495 	.word	0x00402495
  402a18:	ffffaa55 	.word	0xffffaa55
  402a1c:	41615252 	.word	0x41615252
  402a20:	61417272 	.word	0x61417272
  402a24:	20000d70 	.word	0x20000d70

00402a28 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
  402a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a2c:	460d      	mov	r5, r1
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
  402a2e:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
  402a32:	6903      	ldr	r3, [r0, #16]
  402a34:	2b00      	cmp	r3, #0
  402a36:	d05e      	beq.n	402af6 <get_fileinfo+0xce>
		dir = dj->dir;
  402a38:	6941      	ldr	r1, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
  402a3a:	f891 800c 	ldrb.w	r8, [r1, #12]
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
  402a3e:	780b      	ldrb	r3, [r1, #0]
			if (c == ' ') break;
  402a40:	2b20      	cmp	r3, #32
  402a42:	d01b      	beq.n	402a7c <get_fileinfo+0x54>
  402a44:	460e      	mov	r6, r1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
  402a46:	2400      	movs	r4, #0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  402a48:	f008 0708 	and.w	r7, r8, #8
  402a4c:	b2ff      	uxtb	r7, r7
  402a4e:	e003      	b.n	402a58 <get_fileinfo+0x30>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
  402a50:	f816 3f01 	ldrb.w	r3, [r6, #1]!
			if (c == ' ') break;
  402a54:	2b20      	cmp	r3, #32
  402a56:	d011      	beq.n	402a7c <get_fileinfo+0x54>
			if (c == NDDE) c = (TCHAR)DDE;
  402a58:	2b05      	cmp	r3, #5
  402a5a:	bf08      	it	eq
  402a5c:	23e5      	moveq	r3, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  402a5e:	b147      	cbz	r7, 402a72 <get_fileinfo+0x4a>
  402a60:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
  402a64:	fa5f fc8c 	uxtb.w	ip, ip
  402a68:	f1bc 0f19 	cmp.w	ip, #25
  402a6c:	bf9c      	itt	ls
  402a6e:	3320      	addls	r3, #32
  402a70:	b2db      	uxtbls	r3, r3
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
  402a72:	f802 3b01 	strb.w	r3, [r2], #1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
  402a76:	3401      	adds	r4, #1
  402a78:	2c08      	cmp	r4, #8
  402a7a:	d1e9      	bne.n	402a50 <get_fileinfo+0x28>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
  402a7c:	7a0b      	ldrb	r3, [r1, #8]
  402a7e:	2b20      	cmp	r3, #32
  402a80:	d022      	beq.n	402ac8 <get_fileinfo+0xa0>
			*p++ = '.';
  402a82:	1c56      	adds	r6, r2, #1
  402a84:	232e      	movs	r3, #46	; 0x2e
  402a86:	7013      	strb	r3, [r2, #0]
			for (i = 8; i < 11; i++) {
				c = dir[i];
  402a88:	7a0b      	ldrb	r3, [r1, #8]
				if (c == ' ') break;
  402a8a:	2b20      	cmp	r3, #32
  402a8c:	d01b      	beq.n	402ac6 <get_fileinfo+0x9e>
  402a8e:	f101 0408 	add.w	r4, r1, #8
  402a92:	1d17      	adds	r7, r2, #4
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
  402a94:	4632      	mov	r2, r6
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  402a96:	f008 0810 	and.w	r8, r8, #16
  402a9a:	fa5f f688 	uxtb.w	r6, r8
  402a9e:	e003      	b.n	402aa8 <get_fileinfo+0x80>
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
  402aa0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
				if (c == ' ') break;
  402aa4:	2b20      	cmp	r3, #32
  402aa6:	d00f      	beq.n	402ac8 <get_fileinfo+0xa0>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  402aa8:	b146      	cbz	r6, 402abc <get_fileinfo+0x94>
  402aaa:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
  402aae:	fa5f fc8c 	uxtb.w	ip, ip
  402ab2:	f1bc 0f19 	cmp.w	ip, #25
  402ab6:	bf9c      	itt	ls
  402ab8:	3320      	addls	r3, #32
  402aba:	b2db      	uxtbls	r3, r3
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
  402abc:	f802 3b01 	strb.w	r3, [r2], #1
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
  402ac0:	42ba      	cmp	r2, r7
  402ac2:	d1ed      	bne.n	402aa0 <get_fileinfo+0x78>
  402ac4:	e000      	b.n	402ac8 <get_fileinfo+0xa0>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
  402ac6:	4632      	mov	r2, r6
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
  402ac8:	7acb      	ldrb	r3, [r1, #11]
  402aca:	722b      	strb	r3, [r5, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
  402acc:	7fcc      	ldrb	r4, [r1, #31]
  402ace:	7f8b      	ldrb	r3, [r1, #30]
  402ad0:	041b      	lsls	r3, r3, #16
  402ad2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  402ad6:	7f0c      	ldrb	r4, [r1, #28]
  402ad8:	4323      	orrs	r3, r4
  402ada:	7f4c      	ldrb	r4, [r1, #29]
  402adc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  402ae0:	602b      	str	r3, [r5, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
  402ae2:	7e4c      	ldrb	r4, [r1, #25]
  402ae4:	7e0b      	ldrb	r3, [r1, #24]
  402ae6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  402aea:	80ab      	strh	r3, [r5, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
  402aec:	7dcc      	ldrb	r4, [r1, #23]
  402aee:	7d8b      	ldrb	r3, [r1, #22]
  402af0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  402af4:	80eb      	strh	r3, [r5, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
  402af6:	2300      	movs	r3, #0
  402af8:	7013      	strb	r3, [r2, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
  402afa:	69ae      	ldr	r6, [r5, #24]
  402afc:	b356      	cbz	r6, 402b54 <get_fileinfo+0x12c>
  402afe:	69eb      	ldr	r3, [r5, #28]
  402b00:	b343      	cbz	r3, 402b54 <get_fileinfo+0x12c>
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
  402b02:	6903      	ldr	r3, [r0, #16]
  402b04:	b1db      	cbz	r3, 402b3e <get_fileinfo+0x116>
  402b06:	8c02      	ldrh	r2, [r0, #32]
  402b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402b0c:	429a      	cmp	r2, r3
  402b0e:	d018      	beq.n	402b42 <get_fileinfo+0x11a>
			lfn = dj->lfn;
  402b10:	69c7      	ldr	r7, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  402b12:	8838      	ldrh	r0, [r7, #0]
  402b14:	b1b8      	cbz	r0, 402b46 <get_fileinfo+0x11e>
#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
  402b16:	2400      	movs	r4, #0
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
  402b18:	46a1      	mov	r9, r4
  402b1a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 402b58 <get_fileinfo+0x130>
  402b1e:	4649      	mov	r1, r9
  402b20:	47c0      	blx	r8
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  402b22:	b190      	cbz	r0, 402b4a <get_fileinfo+0x122>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  402b24:	69ea      	ldr	r2, [r5, #28]
  402b26:	3a01      	subs	r2, #1
  402b28:	42a2      	cmp	r2, r4
  402b2a:	d910      	bls.n	402b4e <get_fileinfo+0x126>
				tp[i++] = (TCHAR)w;
  402b2c:	3401      	adds	r4, #1
  402b2e:	1932      	adds	r2, r6, r4
  402b30:	f802 0c01 	strb.w	r0, [r2, #-1]
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  402b34:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
  402b38:	2800      	cmp	r0, #0
  402b3a:	d1f0      	bne.n	402b1e <get_fileinfo+0xf6>
  402b3c:	e008      	b.n	402b50 <get_fileinfo+0x128>
#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
  402b3e:	2400      	movs	r4, #0
  402b40:	e006      	b.n	402b50 <get_fileinfo+0x128>
  402b42:	2400      	movs	r4, #0
  402b44:	e004      	b.n	402b50 <get_fileinfo+0x128>
  402b46:	2400      	movs	r4, #0
  402b48:	e002      	b.n	402b50 <get_fileinfo+0x128>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  402b4a:	2400      	movs	r4, #0
  402b4c:	e000      	b.n	402b50 <get_fileinfo+0x128>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  402b4e:	2400      	movs	r4, #0
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
  402b50:	2300      	movs	r3, #0
  402b52:	5533      	strb	r3, [r6, r4]
  402b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b58:	004037e1 	.word	0x004037e1

00402b5c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  402b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b60:	4604      	mov	r4, r0
  402b62:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
  402b64:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  402b66:	428d      	cmp	r5, r1
  402b68:	d02f      	beq.n	402bca <move_window+0x6e>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  402b6a:	7903      	ldrb	r3, [r0, #4]
  402b6c:	b30b      	cbz	r3, 402bb2 <move_window+0x56>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  402b6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402b72:	7840      	ldrb	r0, [r0, #1]
  402b74:	4641      	mov	r1, r8
  402b76:	462a      	mov	r2, r5
  402b78:	2301      	movs	r3, #1
  402b7a:	4f1a      	ldr	r7, [pc, #104]	; (402be4 <move_window+0x88>)
  402b7c:	47b8      	blx	r7
  402b7e:	bb38      	cbnz	r0, 402bd0 <move_window+0x74>
				return FR_DISK_ERR;
			fs->wflag = 0;
  402b80:	2300      	movs	r3, #0
  402b82:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402b84:	69e2      	ldr	r2, [r4, #28]
  402b86:	6a23      	ldr	r3, [r4, #32]
  402b88:	4413      	add	r3, r2
  402b8a:	429d      	cmp	r5, r3
  402b8c:	d211      	bcs.n	402bb2 <move_window+0x56>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402b8e:	78e7      	ldrb	r7, [r4, #3]
  402b90:	2f01      	cmp	r7, #1
  402b92:	d90e      	bls.n	402bb2 <move_window+0x56>
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
  402b94:	f04f 0a01 	mov.w	sl, #1
  402b98:	f8df 9048 	ldr.w	r9, [pc, #72]	; 402be4 <move_window+0x88>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
  402b9c:	69e2      	ldr	r2, [r4, #28]
  402b9e:	4415      	add	r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
  402ba0:	7860      	ldrb	r0, [r4, #1]
  402ba2:	4641      	mov	r1, r8
  402ba4:	462a      	mov	r2, r5
  402ba6:	4653      	mov	r3, sl
  402ba8:	47c8      	blx	r9
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402baa:	3f01      	subs	r7, #1
  402bac:	b2ff      	uxtb	r7, r7
  402bae:	2f01      	cmp	r7, #1
  402bb0:	d1f4      	bne.n	402b9c <move_window+0x40>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  402bb2:	b186      	cbz	r6, 402bd6 <move_window+0x7a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402bb4:	7860      	ldrb	r0, [r4, #1]
  402bb6:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402bba:	4632      	mov	r2, r6
  402bbc:	2301      	movs	r3, #1
  402bbe:	4d0a      	ldr	r5, [pc, #40]	; (402be8 <move_window+0x8c>)
  402bc0:	47a8      	blx	r5
  402bc2:	b958      	cbnz	r0, 402bdc <move_window+0x80>
				return FR_DISK_ERR;
			fs->winsect = sector;
  402bc4:	62e6      	str	r6, [r4, #44]	; 0x2c
  402bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
	}

	return FR_OK;
  402bca:	2000      	movs	r0, #0
  402bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
  402bd0:	2001      	movs	r0, #1
  402bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
  402bd6:	2000      	movs	r0, #0
  402bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
  402bdc:	2001      	movs	r0, #1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
  402bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402be2:	bf00      	nop
  402be4:	00402511 	.word	0x00402511
  402be8:	00402495 	.word	0x00402495

00402bec <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  402bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bee:	4605      	mov	r5, r0
  402bf0:	460c      	mov	r4, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402bf2:	2901      	cmp	r1, #1
  402bf4:	d95c      	bls.n	402cb0 <get_fat+0xc4>
  402bf6:	6983      	ldr	r3, [r0, #24]
  402bf8:	4299      	cmp	r1, r3
  402bfa:	d25b      	bcs.n	402cb4 <get_fat+0xc8>
		return 1;

	switch (fs->fs_type) {
  402bfc:	7803      	ldrb	r3, [r0, #0]
  402bfe:	2b02      	cmp	r3, #2
  402c00:	d028      	beq.n	402c54 <get_fat+0x68>
  402c02:	2b03      	cmp	r3, #3
  402c04:	d039      	beq.n	402c7a <get_fat+0x8e>
  402c06:	2b01      	cmp	r3, #1
  402c08:	d156      	bne.n	402cb8 <get_fat+0xcc>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  402c0a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402c0e:	6a01      	ldr	r1, [r0, #32]
  402c10:	eb01 2156 	add.w	r1, r1, r6, lsr #9
  402c14:	4b30      	ldr	r3, [pc, #192]	; (402cd8 <get_fat+0xec>)
  402c16:	4798      	blx	r3
  402c18:	2800      	cmp	r0, #0
  402c1a:	d150      	bne.n	402cbe <get_fat+0xd2>
		wc = fs->win[bc % SS(fs)]; bc++;
  402c1c:	f3c6 0308 	ubfx	r3, r6, #0, #9
  402c20:	442b      	add	r3, r5
  402c22:	f893 7030 	ldrb.w	r7, [r3, #48]	; 0x30
  402c26:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402c28:	6a29      	ldr	r1, [r5, #32]
  402c2a:	4628      	mov	r0, r5
  402c2c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
  402c30:	4b29      	ldr	r3, [pc, #164]	; (402cd8 <get_fat+0xec>)
  402c32:	4798      	blx	r3
  402c34:	2800      	cmp	r0, #0
  402c36:	d145      	bne.n	402cc4 <get_fat+0xd8>
		wc |= fs->win[bc % SS(fs)] << 8;
  402c38:	f3c6 0608 	ubfx	r6, r6, #0, #9
  402c3c:	4435      	add	r5, r6
  402c3e:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
  402c42:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402c46:	f014 0f01 	tst.w	r4, #1
  402c4a:	bf14      	ite	ne
  402c4c:	0900      	lsrne	r0, r0, #4
  402c4e:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  402c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  402c54:	6a01      	ldr	r1, [r0, #32]
  402c56:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402c5a:	4b1f      	ldr	r3, [pc, #124]	; (402cd8 <get_fat+0xec>)
  402c5c:	4798      	blx	r3
  402c5e:	2800      	cmp	r0, #0
  402c60:	d133      	bne.n	402cca <get_fat+0xde>
		p = &fs->win[clst * 2 % SS(fs)];
  402c62:	0064      	lsls	r4, r4, #1
  402c64:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
		return LD_WORD(p);
  402c68:	192b      	adds	r3, r5, r4
  402c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402c6e:	442c      	add	r4, r5
  402c70:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
  402c74:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  402c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  402c7a:	6a01      	ldr	r1, [r0, #32]
  402c7c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402c80:	4b15      	ldr	r3, [pc, #84]	; (402cd8 <get_fat+0xec>)
  402c82:	4798      	blx	r3
  402c84:	bb20      	cbnz	r0, 402cd0 <get_fat+0xe4>
		p = &fs->win[clst * 4 % SS(fs)];
  402c86:	00a4      	lsls	r4, r4, #2
  402c88:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  402c8c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  402c90:	442b      	add	r3, r5
		return LD_DWORD(p) & 0x0FFFFFFF;
  402c92:	7898      	ldrb	r0, [r3, #2]
  402c94:	78da      	ldrb	r2, [r3, #3]
  402c96:	0612      	lsls	r2, r2, #24
  402c98:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  402c9c:	7858      	ldrb	r0, [r3, #1]
  402c9e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
  402ca2:	442c      	add	r4, r5
  402ca4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  402ca8:	4318      	orrs	r0, r3
  402caa:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  402cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
  402cb0:	2001      	movs	r0, #1
  402cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cb4:	2001      	movs	r0, #1
  402cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402cb8:	f04f 30ff 	mov.w	r0, #4294967295
  402cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cbe:	f04f 30ff 	mov.w	r0, #4294967295
  402cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cc4:	f04f 30ff 	mov.w	r0, #4294967295
  402cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cca:	f04f 30ff 	mov.w	r0, #4294967295
  402cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cd0:	f04f 30ff 	mov.w	r0, #4294967295
}
  402cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cd6:	bf00      	nop
  402cd8:	00402b5d 	.word	0x00402b5d

00402cdc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  402cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402cde:	4604      	mov	r4, r0
  402ce0:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
  402ce2:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
  402ce4:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  402ce6:	2901      	cmp	r1, #1
  402ce8:	d038      	beq.n	402d5c <dir_sdi+0x80>
  402cea:	6803      	ldr	r3, [r0, #0]
  402cec:	699a      	ldr	r2, [r3, #24]
  402cee:	4291      	cmp	r1, r2
  402cf0:	d236      	bcs.n	402d60 <dir_sdi+0x84>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  402cf2:	b971      	cbnz	r1, 402d12 <dir_sdi+0x36>
  402cf4:	781a      	ldrb	r2, [r3, #0]
  402cf6:	2a03      	cmp	r2, #3
  402cf8:	d101      	bne.n	402cfe <dir_sdi+0x22>
		clst = dj->fs->dirbase;
  402cfa:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  402cfc:	b949      	cbnz	r1, 402d12 <dir_sdi+0x36>
		dj->clust = clst;
  402cfe:	2200      	movs	r2, #0
  402d00:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  402d02:	891a      	ldrh	r2, [r3, #8]
  402d04:	42aa      	cmp	r2, r5
  402d06:	d92d      	bls.n	402d64 <dir_sdi+0x88>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402d0a:	eb03 1315 	add.w	r3, r3, r5, lsr #4
  402d0e:	6123      	str	r3, [r4, #16]
  402d10:	e01b      	b.n	402d4a <dir_sdi+0x6e>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402d12:	789e      	ldrb	r6, [r3, #2]
  402d14:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402d16:	42b5      	cmp	r5, r6
  402d18:	d310      	bcc.n	402d3c <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  402d1a:	4f16      	ldr	r7, [pc, #88]	; (402d74 <dir_sdi+0x98>)
  402d1c:	6820      	ldr	r0, [r4, #0]
  402d1e:	47b8      	blx	r7
  402d20:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402d22:	f1b0 3fff 	cmp.w	r0, #4294967295
  402d26:	d01f      	beq.n	402d68 <dir_sdi+0x8c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  402d28:	2801      	cmp	r0, #1
  402d2a:	d91f      	bls.n	402d6c <dir_sdi+0x90>
  402d2c:	6823      	ldr	r3, [r4, #0]
  402d2e:	699b      	ldr	r3, [r3, #24]
  402d30:	4298      	cmp	r0, r3
  402d32:	d21d      	bcs.n	402d70 <dir_sdi+0x94>
				return FR_INT_ERR;
			idx -= ic;
  402d34:	1bad      	subs	r5, r5, r6
  402d36:	b2ad      	uxth	r5, r5
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  402d38:	42ae      	cmp	r6, r5
  402d3a:	d9ef      	bls.n	402d1c <dir_sdi+0x40>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  402d3c:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402d3e:	6820      	ldr	r0, [r4, #0]
  402d40:	4b0d      	ldr	r3, [pc, #52]	; (402d78 <dir_sdi+0x9c>)
  402d42:	4798      	blx	r3
  402d44:	eb00 1015 	add.w	r0, r0, r5, lsr #4
  402d48:	6120      	str	r0, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402d4a:	f005 020f 	and.w	r2, r5, #15
  402d4e:	0152      	lsls	r2, r2, #5
  402d50:	3230      	adds	r2, #48	; 0x30
  402d52:	6823      	ldr	r3, [r4, #0]
  402d54:	4413      	add	r3, r2
  402d56:	6163      	str	r3, [r4, #20]

	return FR_OK;	/* Seek succeeded */
  402d58:	2000      	movs	r0, #0
  402d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
  402d5c:	2002      	movs	r0, #2
  402d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d60:	2002      	movs	r0, #2
  402d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
  402d64:	2002      	movs	r0, #2
  402d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402d68:	2001      	movs	r0, #1
  402d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
  402d6c:	2002      	movs	r0, #2
  402d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d70:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
  402d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d74:	00402bed 	.word	0x00402bed
  402d78:	0040259d 	.word	0x0040259d

00402d7c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  402d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d7e:	4605      	mov	r5, r0
  402d80:	460c      	mov	r4, r1
  402d82:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402d84:	2901      	cmp	r1, #1
  402d86:	d977      	bls.n	402e78 <put_fat+0xfc>
  402d88:	6983      	ldr	r3, [r0, #24]
  402d8a:	4299      	cmp	r1, r3
  402d8c:	d276      	bcs.n	402e7c <put_fat+0x100>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
  402d8e:	7803      	ldrb	r3, [r0, #0]
  402d90:	2b02      	cmp	r3, #2
  402d92:	d03e      	beq.n	402e12 <put_fat+0x96>
  402d94:	2b03      	cmp	r3, #3
  402d96:	d04e      	beq.n	402e36 <put_fat+0xba>
  402d98:	2b01      	cmp	r3, #1
  402d9a:	d169      	bne.n	402e70 <put_fat+0xf4>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  402d9c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402da0:	6a01      	ldr	r1, [r0, #32]
  402da2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402da6:	4b37      	ldr	r3, [pc, #220]	; (402e84 <put_fat+0x108>)
  402da8:	4798      	blx	r3
			if (res != FR_OK) break;
  402daa:	4603      	mov	r3, r0
  402dac:	2800      	cmp	r0, #0
  402dae:	d160      	bne.n	402e72 <put_fat+0xf6>
			p = &fs->win[bc % SS(fs)];
  402db0:	f3c7 0308 	ubfx	r3, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402db4:	f014 0401 	ands.w	r4, r4, #1
  402db8:	d009      	beq.n	402dce <put_fat+0x52>
  402dba:	18ea      	adds	r2, r5, r3
  402dbc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
  402dc0:	f002 020f 	and.w	r2, r2, #15
  402dc4:	b2f1      	uxtb	r1, r6
  402dc6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  402dca:	b2d2      	uxtb	r2, r2
  402dcc:	e000      	b.n	402dd0 <put_fat+0x54>
  402dce:	b2f2      	uxtb	r2, r6
  402dd0:	442b      	add	r3, r5
  402dd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402dd6:	3701      	adds	r7, #1
			fs->wflag = 1;
  402dd8:	2301      	movs	r3, #1
  402dda:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402ddc:	6a29      	ldr	r1, [r5, #32]
  402dde:	4628      	mov	r0, r5
  402de0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402de4:	4b27      	ldr	r3, [pc, #156]	; (402e84 <put_fat+0x108>)
  402de6:	4798      	blx	r3
			if (res != FR_OK) break;
  402de8:	4603      	mov	r3, r0
  402dea:	2800      	cmp	r0, #0
  402dec:	d141      	bne.n	402e72 <put_fat+0xf6>
			p = &fs->win[bc % SS(fs)];
  402dee:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402df2:	b114      	cbz	r4, 402dfa <put_fat+0x7e>
  402df4:	f3c6 1607 	ubfx	r6, r6, #4, #8
  402df8:	e007      	b.n	402e0a <put_fat+0x8e>
  402dfa:	19ea      	adds	r2, r5, r7
  402dfc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
  402e00:	f022 020f 	bic.w	r2, r2, #15
  402e04:	f3c6 2603 	ubfx	r6, r6, #8, #4
  402e08:	4316      	orrs	r6, r2
  402e0a:	442f      	add	r7, r5
  402e0c:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
			break;
  402e10:	e02f      	b.n	402e72 <put_fat+0xf6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  402e12:	6a01      	ldr	r1, [r0, #32]
  402e14:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402e18:	4b1a      	ldr	r3, [pc, #104]	; (402e84 <put_fat+0x108>)
  402e1a:	4798      	blx	r3
			if (res != FR_OK) break;
  402e1c:	4603      	mov	r3, r0
  402e1e:	bb40      	cbnz	r0, 402e72 <put_fat+0xf6>
			p = &fs->win[clst * 2 % SS(fs)];
  402e20:	0064      	lsls	r4, r4, #1
  402e22:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  402e26:	192a      	adds	r2, r5, r4
  402e28:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
  402e2c:	f3c6 2607 	ubfx	r6, r6, #8, #8
  402e30:	f882 6031 	strb.w	r6, [r2, #49]	; 0x31
			break;
  402e34:	e01d      	b.n	402e72 <put_fat+0xf6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402e36:	6a01      	ldr	r1, [r0, #32]
  402e38:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402e3c:	4b11      	ldr	r3, [pc, #68]	; (402e84 <put_fat+0x108>)
  402e3e:	4798      	blx	r3
			if (res != FR_OK) break;
  402e40:	4603      	mov	r3, r0
  402e42:	b9b0      	cbnz	r0, 402e72 <put_fat+0xf6>
			p = &fs->win[clst * 4 % SS(fs)];
  402e44:	00a4      	lsls	r4, r4, #2
  402e46:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  402e4a:	f104 0230 	add.w	r2, r4, #48	; 0x30
  402e4e:	442a      	add	r2, r5
			val |= LD_DWORD(p) & 0xF0000000;
  402e50:	78d1      	ldrb	r1, [r2, #3]
  402e52:	0609      	lsls	r1, r1, #24
  402e54:	442c      	add	r4, r5
  402e56:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
  402e5a:	430e      	orrs	r6, r1
			ST_DWORD(p, val);
  402e5c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  402e60:	f3c6 2107 	ubfx	r1, r6, #8, #8
  402e64:	7051      	strb	r1, [r2, #1]
  402e66:	0c31      	lsrs	r1, r6, #16
  402e68:	7091      	strb	r1, [r2, #2]
  402e6a:	0e36      	lsrs	r6, r6, #24
  402e6c:	70d6      	strb	r6, [r2, #3]
			break;
  402e6e:	e000      	b.n	402e72 <put_fat+0xf6>

		default :
			res = FR_INT_ERR;
  402e70:	2302      	movs	r3, #2
		}
		fs->wflag = 1;
  402e72:	2201      	movs	r2, #1
  402e74:	712a      	strb	r2, [r5, #4]
  402e76:	e002      	b.n	402e7e <put_fat+0x102>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  402e78:	2302      	movs	r3, #2
  402e7a:	e000      	b.n	402e7e <put_fat+0x102>
  402e7c:	2302      	movs	r3, #2
		}
		fs->wflag = 1;
	}

	return res;
}
  402e7e:	4618      	mov	r0, r3
  402e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e82:	bf00      	nop
  402e84:	00402b5d 	.word	0x00402b5d

00402e88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  402e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402e8c:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  402e8e:	4689      	mov	r9, r1
  402e90:	b931      	cbnz	r1, 402ea0 <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
  402e92:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402e94:	b16e      	cbz	r6, 402eb2 <create_chain+0x2a>
  402e96:	6983      	ldr	r3, [r0, #24]
  402e98:	429e      	cmp	r6, r3
  402e9a:	bf28      	it	cs
  402e9c:	2601      	movcs	r6, #1
  402e9e:	e009      	b.n	402eb4 <create_chain+0x2c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  402ea0:	4b2b      	ldr	r3, [pc, #172]	; (402f50 <create_chain+0xc8>)
  402ea2:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402ea4:	2801      	cmp	r0, #1
  402ea6:	d942      	bls.n	402f2e <create_chain+0xa6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  402ea8:	69ab      	ldr	r3, [r5, #24]
  402eaa:	4298      	cmp	r0, r3
  402eac:	d34d      	bcc.n	402f4a <create_chain+0xc2>
		scl = clst;
  402eae:	464e      	mov	r6, r9
  402eb0:	e000      	b.n	402eb4 <create_chain+0x2c>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402eb2:	2601      	movs	r6, #1
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
  402eb4:	4634      	mov	r4, r6
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
  402eb6:	f04f 0802 	mov.w	r8, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402eba:	4f25      	ldr	r7, [pc, #148]	; (402f50 <create_chain+0xc8>)
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
  402ebc:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  402ebe:	69ab      	ldr	r3, [r5, #24]
  402ec0:	429c      	cmp	r4, r3
  402ec2:	d302      	bcc.n	402eca <create_chain+0x42>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  402ec4:	2e01      	cmp	r6, #1
  402ec6:	d935      	bls.n	402f34 <create_chain+0xac>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
  402ec8:	4644      	mov	r4, r8
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402eca:	4628      	mov	r0, r5
  402ecc:	4621      	mov	r1, r4
  402ece:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402ed0:	b138      	cbz	r0, 402ee2 <create_chain+0x5a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402ed2:	f1b0 3fff 	cmp.w	r0, #4294967295
  402ed6:	d030      	beq.n	402f3a <create_chain+0xb2>
  402ed8:	2801      	cmp	r0, #1
  402eda:	d030      	beq.n	402f3e <create_chain+0xb6>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  402edc:	42b4      	cmp	r4, r6
  402ede:	d1ed      	bne.n	402ebc <create_chain+0x34>
  402ee0:	e02f      	b.n	402f42 <create_chain+0xba>
  402ee2:	4626      	mov	r6, r4
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  402ee4:	4628      	mov	r0, r5
  402ee6:	4621      	mov	r1, r4
  402ee8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402eec:	4b19      	ldr	r3, [pc, #100]	; (402f54 <create_chain+0xcc>)
  402eee:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402ef0:	4603      	mov	r3, r0
  402ef2:	b9a8      	cbnz	r0, 402f20 <create_chain+0x98>
  402ef4:	f1b9 0f00 	cmp.w	r9, #0
  402ef8:	d006      	beq.n	402f08 <create_chain+0x80>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402efa:	4628      	mov	r0, r5
  402efc:	4649      	mov	r1, r9
  402efe:	4622      	mov	r2, r4
  402f00:	4b14      	ldr	r3, [pc, #80]	; (402f54 <create_chain+0xcc>)
  402f02:	4798      	blx	r3
	}
	if (res == FR_OK) {
  402f04:	4603      	mov	r3, r0
  402f06:	b958      	cbnz	r0, 402f20 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  402f08:	60ee      	str	r6, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  402f0a:	692b      	ldr	r3, [r5, #16]
  402f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f10:	d01a      	beq.n	402f48 <create_chain+0xc0>
			fs->free_clust--;
  402f12:	3b01      	subs	r3, #1
  402f14:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  402f16:	2301      	movs	r3, #1
  402f18:	716b      	strb	r3, [r5, #5]
  402f1a:	4620      	mov	r0, r4
  402f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402f20:	2b01      	cmp	r3, #1
  402f22:	bf14      	ite	ne
  402f24:	2001      	movne	r0, #1
  402f26:	f04f 30ff 	moveq.w	r0, #4294967295
  402f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402f2e:	2001      	movs	r0, #1
  402f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  402f34:	2000      	movs	r0, #0
  402f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  402f42:	2000      	movs	r0, #0
  402f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f48:	4620      	mov	r0, r4
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
  402f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f4e:	bf00      	nop
  402f50:	00402bed 	.word	0x00402bed
  402f54:	00402d7d 	.word	0x00402d7d

00402f58 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  402f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f5c:	4604      	mov	r4, r0
  402f5e:	460e      	mov	r6, r1
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  402f60:	88c5      	ldrh	r5, [r0, #6]
  402f62:	3501      	adds	r5, #1
  402f64:	b2ad      	uxth	r5, r5
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402f66:	2d00      	cmp	r5, #0
  402f68:	d06b      	beq.n	403042 <dir_next+0xea>
  402f6a:	6903      	ldr	r3, [r0, #16]
  402f6c:	2b00      	cmp	r3, #0
  402f6e:	d06b      	beq.n	403048 <dir_next+0xf0>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  402f70:	f015 070f 	ands.w	r7, r5, #15
  402f74:	d15c      	bne.n	403030 <dir_next+0xd8>
		dj->sect++;					/* Next sector */
  402f76:	3301      	adds	r3, #1
  402f78:	6103      	str	r3, [r0, #16]

		if (dj->clust == 0) {	/* Static table */
  402f7a:	68c1      	ldr	r1, [r0, #12]
  402f7c:	b921      	cbnz	r1, 402f88 <dir_next+0x30>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  402f7e:	6803      	ldr	r3, [r0, #0]
  402f80:	891b      	ldrh	r3, [r3, #8]
  402f82:	42ab      	cmp	r3, r5
  402f84:	d963      	bls.n	40304e <dir_next+0xf6>
  402f86:	e053      	b.n	403030 <dir_next+0xd8>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  402f88:	6800      	ldr	r0, [r0, #0]
  402f8a:	7883      	ldrb	r3, [r0, #2]
  402f8c:	3b01      	subs	r3, #1
  402f8e:	ea13 1315 	ands.w	r3, r3, r5, lsr #4
  402f92:	d14d      	bne.n	403030 <dir_next+0xd8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  402f94:	4b3b      	ldr	r3, [pc, #236]	; (403084 <dir_next+0x12c>)
  402f96:	4798      	blx	r3
  402f98:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  402f9a:	2801      	cmp	r0, #1
  402f9c:	d95a      	bls.n	403054 <dir_next+0xfc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402f9e:	f1b0 3fff 	cmp.w	r0, #4294967295
  402fa2:	d05a      	beq.n	40305a <dir_next+0x102>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  402fa4:	6820      	ldr	r0, [r4, #0]
  402fa6:	6983      	ldr	r3, [r0, #24]
  402fa8:	4598      	cmp	r8, r3
  402faa:	d33a      	bcc.n	403022 <dir_next+0xca>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402fac:	2e00      	cmp	r6, #0
  402fae:	d057      	beq.n	403060 <dir_next+0x108>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  402fb0:	68e1      	ldr	r1, [r4, #12]
  402fb2:	4b35      	ldr	r3, [pc, #212]	; (403088 <dir_next+0x130>)
  402fb4:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402fb6:	4680      	mov	r8, r0
  402fb8:	2800      	cmp	r0, #0
  402fba:	d054      	beq.n	403066 <dir_next+0x10e>
					if (clst == 1) return FR_INT_ERR;
  402fbc:	2801      	cmp	r0, #1
  402fbe:	d055      	beq.n	40306c <dir_next+0x114>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402fc0:	f1b0 3fff 	cmp.w	r0, #4294967295
  402fc4:	d055      	beq.n	403072 <dir_next+0x11a>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402fc6:	6820      	ldr	r0, [r4, #0]
  402fc8:	2100      	movs	r1, #0
  402fca:	4b30      	ldr	r3, [pc, #192]	; (40308c <dir_next+0x134>)
  402fcc:	4798      	blx	r3
  402fce:	2800      	cmp	r0, #0
  402fd0:	d152      	bne.n	403078 <dir_next+0x120>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402fd2:	6820      	ldr	r0, [r4, #0]
  402fd4:	3030      	adds	r0, #48	; 0x30
  402fd6:	2100      	movs	r1, #0
  402fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
  402fdc:	4b2c      	ldr	r3, [pc, #176]	; (403090 <dir_next+0x138>)
  402fde:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  402fe0:	6826      	ldr	r6, [r4, #0]
  402fe2:	4630      	mov	r0, r6
  402fe4:	4641      	mov	r1, r8
  402fe6:	4b2b      	ldr	r3, [pc, #172]	; (403094 <dir_next+0x13c>)
  402fe8:	4798      	blx	r3
  402fea:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402fec:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  402fee:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402ff2:	46b2      	mov	sl, r6
  402ff4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 40308c <dir_next+0x134>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402ff8:	e00b      	b.n	403012 <dir_next+0xba>
						dj->fs->wflag = 1;
  402ffa:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402ffe:	6820      	ldr	r0, [r4, #0]
  403000:	4651      	mov	r1, sl
  403002:	47c8      	blx	r9
  403004:	3601      	adds	r6, #1
  403006:	2800      	cmp	r0, #0
  403008:	d139      	bne.n	40307e <dir_next+0x126>
						dj->fs->winsect++;
  40300a:	6823      	ldr	r3, [r4, #0]
  40300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40300e:	3201      	adds	r2, #1
  403010:	62da      	str	r2, [r3, #44]	; 0x2c
  403012:	b2f2      	uxtb	r2, r6
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  403014:	6823      	ldr	r3, [r4, #0]
  403016:	7899      	ldrb	r1, [r3, #2]
  403018:	4291      	cmp	r1, r2
  40301a:	d8ee      	bhi.n	402ffa <dir_next+0xa2>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  40301c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  40301e:	1a8a      	subs	r2, r1, r2
  403020:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  403022:	f8c4 800c 	str.w	r8, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
  403026:	6820      	ldr	r0, [r4, #0]
  403028:	4641      	mov	r1, r8
  40302a:	4b1a      	ldr	r3, [pc, #104]	; (403094 <dir_next+0x13c>)
  40302c:	4798      	blx	r3
  40302e:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
  403030:	80e5      	strh	r5, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  403032:	017f      	lsls	r7, r7, #5
  403034:	3730      	adds	r7, #48	; 0x30
  403036:	6823      	ldr	r3, [r4, #0]
  403038:	443b      	add	r3, r7
  40303a:	6163      	str	r3, [r4, #20]

	return FR_OK;
  40303c:	2000      	movs	r0, #0
  40303e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
  403042:	2004      	movs	r0, #4
  403044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403048:	2004      	movs	r0, #4
  40304a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
  40304e:	2004      	movs	r0, #4
  403050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
  403054:	2002      	movs	r0, #2
  403056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40305a:	2001      	movs	r0, #1
  40305c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  403060:	2004      	movs	r0, #4
  403062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  403066:	2007      	movs	r0, #7
  403068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40306c:	2002      	movs	r0, #2
  40306e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403072:	2001      	movs	r0, #1
  403074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  403078:	2001      	movs	r0, #1
  40307a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40307e:	2001      	movs	r0, #1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
  403080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403084:	00402bed 	.word	0x00402bed
  403088:	00402e89 	.word	0x00402e89
  40308c:	00402b5d 	.word	0x00402b5d
  403090:	0040258d 	.word	0x0040258d
  403094:	0040259d 	.word	0x0040259d

00403098 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  403098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40309c:	b087      	sub	sp, #28
  40309e:	4605      	mov	r5, r0
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4030a0:	2100      	movs	r1, #0
  4030a2:	4b6a      	ldr	r3, [pc, #424]	; (40324c <dir_find+0x1b4>)
  4030a4:	4798      	blx	r3
	if (res != FR_OK) return res;
  4030a6:	2800      	cmp	r0, #0
  4030a8:	f040 80b3 	bne.w	403212 <dir_find+0x17a>
  4030ac:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4030b0:	46c8      	mov	r8, r9

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  4030b2:	4f67      	ldr	r7, [pc, #412]	; (403250 <dir_find+0x1b8>)
  4030b4:	4a67      	ldr	r2, [pc, #412]	; (403254 <dir_find+0x1bc>)
  4030b6:	320c      	adds	r2, #12
  4030b8:	9201      	str	r2, [sp, #4]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  4030ba:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 403260 <dir_find+0x1c8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  4030be:	6828      	ldr	r0, [r5, #0]
  4030c0:	6929      	ldr	r1, [r5, #16]
  4030c2:	47b8      	blx	r7
		if (res != FR_OK) break;
  4030c4:	2800      	cmp	r0, #0
  4030c6:	f040 80a5 	bne.w	403214 <dir_find+0x17c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4030ca:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  4030cc:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4030ce:	2e00      	cmp	r6, #0
  4030d0:	f000 80a1 	beq.w	403216 <dir_find+0x17e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  4030d4:	7ae3      	ldrb	r3, [r4, #11]
  4030d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4030da:	2ee5      	cmp	r6, #229	; 0xe5
  4030dc:	f000 8086 	beq.w	4031ec <dir_find+0x154>
  4030e0:	f013 0f08 	tst.w	r3, #8
  4030e4:	d003      	beq.n	4030ee <dir_find+0x56>
  4030e6:	2a0f      	cmp	r2, #15
  4030e8:	f040 8083 	bne.w	4031f2 <dir_find+0x15a>
  4030ec:	e001      	b.n	4030f2 <dir_find+0x5a>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  4030ee:	2a0f      	cmp	r2, #15
  4030f0:	d15f      	bne.n	4031b2 <dir_find+0x11a>
				if (dj->lfn) {
  4030f2:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  4030f6:	f1ba 0f00 	cmp.w	sl, #0
  4030fa:	f000 8082 	beq.w	403202 <dir_find+0x16a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4030fe:	f016 0f40 	tst.w	r6, #64	; 0x40
  403102:	d006      	beq.n	403112 <dir_find+0x7a>
						sum = dir[LDIR_Chksum];
  403104:	f894 900d 	ldrb.w	r9, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  403108:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  40310c:	88eb      	ldrh	r3, [r5, #6]
  40310e:	842b      	strh	r3, [r5, #32]
  403110:	e004      	b.n	40311c <dir_find+0x84>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403112:	45b0      	cmp	r8, r6
  403114:	bf18      	it	ne
  403116:	f04f 08ff 	movne.w	r8, #255	; 0xff
  40311a:	d172      	bne.n	403202 <dir_find+0x16a>
  40311c:	7b63      	ldrb	r3, [r4, #13]
  40311e:	9300      	str	r3, [sp, #0]
  403120:	454b      	cmp	r3, r9
  403122:	d169      	bne.n	4031f8 <dir_find+0x160>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  403124:	7823      	ldrb	r3, [r4, #0]
  403126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40312a:	3b01      	subs	r3, #1
  40312c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  403130:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  403134:	9203      	str	r2, [sp, #12]
  403136:	4a47      	ldr	r2, [pc, #284]	; (403254 <dir_find+0x1bc>)
  403138:	f102 38ff 	add.w	r8, r2, #4294967295
	s = 0; wc = 1;
  40313c:	f04f 0901 	mov.w	r9, #1
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  403140:	f8cd a008 	str.w	sl, [sp, #8]
  403144:	9605      	str	r6, [sp, #20]
  403146:	9e03      	ldr	r6, [sp, #12]
  403148:	9504      	str	r5, [sp, #16]
  40314a:	464d      	mov	r5, r9
  40314c:	f8dd 9004 	ldr.w	r9, [sp, #4]


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  403150:	f818 3f01 	ldrb.w	r3, [r8, #1]!
  403154:	18e2      	adds	r2, r4, r3
  403156:	7850      	ldrb	r0, [r2, #1]
  403158:	5ce3      	ldrb	r3, [r4, r3]
  40315a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  40315e:	b17d      	cbz	r5, 403180 <dir_find+0xe8>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  403160:	4b3d      	ldr	r3, [pc, #244]	; (403258 <dir_find+0x1c0>)
  403162:	4798      	blx	r3
  403164:	4605      	mov	r5, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  403166:	2efe      	cmp	r6, #254	; 0xfe
  403168:	d862      	bhi.n	403230 <dir_find+0x198>
  40316a:	f106 0a01 	add.w	sl, r6, #1
  40316e:	9a02      	ldr	r2, [sp, #8]
  403170:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
  403174:	4b38      	ldr	r3, [pc, #224]	; (403258 <dir_find+0x1c0>)
  403176:	4798      	blx	r3
  403178:	4285      	cmp	r5, r0
  40317a:	d15b      	bne.n	403234 <dir_find+0x19c>
  40317c:	4656      	mov	r6, sl
  40317e:	e003      	b.n	403188 <dir_find+0xf0>
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  403180:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403184:	4290      	cmp	r0, r2
  403186:	d157      	bne.n	403238 <dir_find+0x1a0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  403188:	45c8      	cmp	r8, r9
  40318a:	d1e1      	bne.n	403150 <dir_find+0xb8>
  40318c:	f8dd a008 	ldr.w	sl, [sp, #8]
  403190:	46a9      	mov	r9, r5
  403192:	9603      	str	r6, [sp, #12]
  403194:	9e05      	ldr	r6, [sp, #20]
  403196:	9d04      	ldr	r5, [sp, #16]

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  403198:	7823      	ldrb	r3, [r4, #0]
  40319a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40319e:	d041      	beq.n	403224 <dir_find+0x18c>
  4031a0:	f1b9 0f00 	cmp.w	r9, #0
  4031a4:	d03e      	beq.n	403224 <dir_find+0x18c>
  4031a6:	9a03      	ldr	r2, [sp, #12]
  4031a8:	f83a 3012 	ldrh.w	r3, [sl, r2, lsl #1]
  4031ac:	2b00      	cmp	r3, #0
  4031ae:	d039      	beq.n	403224 <dir_find+0x18c>
  4031b0:	e043      	b.n	40323a <dir_find+0x1a2>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  4031b2:	f1b8 0f00 	cmp.w	r8, #0
  4031b6:	d103      	bne.n	4031c0 <dir_find+0x128>
  4031b8:	4620      	mov	r0, r4
  4031ba:	47d8      	blx	fp
  4031bc:	4548      	cmp	r0, r9
  4031be:	d02c      	beq.n	40321a <dir_find+0x182>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4031c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4031c4:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  4031c6:	69ab      	ldr	r3, [r5, #24]
  4031c8:	7ada      	ldrb	r2, [r3, #11]
  4031ca:	f012 0f01 	tst.w	r2, #1
  4031ce:	d116      	bne.n	4031fe <dir_find+0x166>
  4031d0:	f104 000b 	add.w	r0, r4, #11
  4031d4:	e001      	b.n	4031da <dir_find+0x142>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  4031d6:	4284      	cmp	r4, r0
  4031d8:	d021      	beq.n	40321e <dir_find+0x186>
  4031da:	f814 1b01 	ldrb.w	r1, [r4], #1
  4031de:	f813 2b01 	ldrb.w	r2, [r3], #1
  4031e2:	4291      	cmp	r1, r2
  4031e4:	d0f7      	beq.n	4031d6 <dir_find+0x13e>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4031e6:	f04f 08ff 	mov.w	r8, #255	; 0xff
  4031ea:	e00a      	b.n	403202 <dir_find+0x16a>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
  4031ec:	f04f 08ff 	mov.w	r8, #255	; 0xff
  4031f0:	e007      	b.n	403202 <dir_find+0x16a>
  4031f2:	f04f 08ff 	mov.w	r8, #255	; 0xff
  4031f6:	e004      	b.n	403202 <dir_find+0x16a>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4031f8:	f04f 08ff 	mov.w	r8, #255	; 0xff
  4031fc:	e001      	b.n	403202 <dir_find+0x16a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4031fe:	f04f 08ff 	mov.w	r8, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  403202:	4628      	mov	r0, r5
  403204:	2100      	movs	r1, #0
  403206:	4b15      	ldr	r3, [pc, #84]	; (40325c <dir_find+0x1c4>)
  403208:	4798      	blx	r3
	} while (res == FR_OK);
  40320a:	2800      	cmp	r0, #0
  40320c:	f43f af57 	beq.w	4030be <dir_find+0x26>
  403210:	e007      	b.n	403222 <dir_find+0x18a>
  403212:	e017      	b.n	403244 <dir_find+0x1ac>
  403214:	e016      	b.n	403244 <dir_find+0x1ac>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  403216:	2004      	movs	r0, #4
  403218:	e014      	b.n	403244 <dir_find+0x1ac>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  40321a:	2000      	movs	r0, #0
  40321c:	e012      	b.n	403244 <dir_find+0x1ac>
  40321e:	2000      	movs	r0, #0
  403220:	e010      	b.n	403244 <dir_find+0x1ac>
  403222:	e00f      	b.n	403244 <dir_find+0x1ac>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403224:	3e01      	subs	r6, #1
  403226:	fa5f f886 	uxtb.w	r8, r6
  40322a:	f8dd 9000 	ldr.w	r9, [sp]
  40322e:	e7e8      	b.n	403202 <dir_find+0x16a>
  403230:	9d04      	ldr	r5, [sp, #16]
  403232:	e002      	b.n	40323a <dir_find+0x1a2>
  403234:	9d04      	ldr	r5, [sp, #16]
  403236:	e000      	b.n	40323a <dir_find+0x1a2>
  403238:	9d04      	ldr	r5, [sp, #16]
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40323a:	f8dd 9000 	ldr.w	r9, [sp]
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40323e:	f04f 08ff 	mov.w	r8, #255	; 0xff
  403242:	e7de      	b.n	403202 <dir_find+0x16a>
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
  403244:	b007      	add	sp, #28
  403246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40324a:	bf00      	nop
  40324c:	00402cdd 	.word	0x00402cdd
  403250:	00402b5d 	.word	0x00402b5d
  403254:	004094e8 	.word	0x004094e8
  403258:	00403821 	.word	0x00403821
  40325c:	00402f59 	.word	0x00402f59
  403260:	004025b5 	.word	0x004025b5

00403264 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
  403264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403268:	4604      	mov	r4, r0
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
  40326a:	f04f 08ff 	mov.w	r8, #255	; 0xff
  40326e:	4646      	mov	r6, r8
#endif

	res = FR_NO_FILE;
  403270:	2504      	movs	r5, #4
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
  403272:	4f43      	ldr	r7, [pc, #268]	; (403380 <dir_read+0x11c>)
  403274:	f8df a114 	ldr.w	sl, [pc, #276]	; 40338c <dir_read+0x128>
  403278:	f10a 090c 	add.w	r9, sl, #12
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
  40327c:	e06d      	b.n	40335a <dir_read+0xf6>
		res = move_window(dj->fs, dj->sect);
  40327e:	6820      	ldr	r0, [r4, #0]
  403280:	47b8      	blx	r7
		if (res != FR_OK) break;
  403282:	4605      	mov	r5, r0
  403284:	2800      	cmp	r0, #0
  403286:	d16c      	bne.n	403362 <dir_read+0xfe>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  403288:	6960      	ldr	r0, [r4, #20]
		c = dir[DIR_Name];
  40328a:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40328c:	2b00      	cmp	r3, #0
  40328e:	d072      	beq.n	403376 <dir_read+0x112>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  403290:	7ac2      	ldrb	r2, [r0, #11]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  403292:	2be5      	cmp	r3, #229	; 0xe5
  403294:	d054      	beq.n	403340 <dir_read+0xdc>
  403296:	2b2e      	cmp	r3, #46	; 0x2e
  403298:	d054      	beq.n	403344 <dir_read+0xe0>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  40329a:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  40329e:	f012 0f08 	tst.w	r2, #8
  4032a2:	d002      	beq.n	4032aa <dir_read+0x46>
  4032a4:	290f      	cmp	r1, #15
  4032a6:	d14f      	bne.n	403348 <dir_read+0xe4>
  4032a8:	e001      	b.n	4032ae <dir_read+0x4a>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  4032aa:	290f      	cmp	r1, #15
  4032ac:	d13f      	bne.n	40332e <dir_read+0xca>
				if (c & LLE) {			/* Is it start of LFN sequence? */
  4032ae:	f013 0f40 	tst.w	r3, #64	; 0x40
  4032b2:	d006      	beq.n	4032c2 <dir_read+0x5e>
					sum = dir[LDIR_Chksum];
  4032b4:	f890 800d 	ldrb.w	r8, [r0, #13]
					c &= ~LLE; ord = c;
  4032b8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
					dj->lfn_idx = dj->index;
  4032bc:	88e2      	ldrh	r2, [r4, #6]
  4032be:	8422      	strh	r2, [r4, #32]
  4032c0:	e003      	b.n	4032ca <dir_read+0x66>
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4032c2:	429e      	cmp	r6, r3
  4032c4:	bf18      	it	ne
  4032c6:	26ff      	movne	r6, #255	; 0xff
  4032c8:	d141      	bne.n	40334e <dir_read+0xea>
  4032ca:	f890 e00d 	ldrb.w	lr, [r0, #13]
  4032ce:	45c6      	cmp	lr, r8
  4032d0:	d13c      	bne.n	40334c <dir_read+0xe8>
  4032d2:	f8d4 c01c 	ldr.w	ip, [r4, #28]
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  4032d6:	7802      	ldrb	r2, [r0, #0]
  4032d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4032dc:	3a01      	subs	r2, #1
  4032de:	eb02 0542 	add.w	r5, r2, r2, lsl #1
  4032e2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  4032e6:	f10a 32ff 	add.w	r2, sl, #4294967295

	s = 0; wc = 1;
  4032ea:	2601      	movs	r6, #1
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
  4032ec:	f64f 78ff 	movw	r8, #65535	; 0xffff

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
  4032f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4032f4:	eb00 0b01 	add.w	fp, r0, r1
  4032f8:	f89b b001 	ldrb.w	fp, [fp, #1]
  4032fc:	5c41      	ldrb	r1, [r0, r1]
  4032fe:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
  403302:	b136      	cbz	r6, 403312 <dir_read+0xae>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
  403304:	2dfe      	cmp	r5, #254	; 0xfe
  403306:	d82f      	bhi.n	403368 <dir_read+0x104>
			lfnbuf[i++] = wc = uc;			/* Store it */
  403308:	f82c 1015 	strh.w	r1, [ip, r5, lsl #1]
  40330c:	460e      	mov	r6, r1
  40330e:	3501      	adds	r5, #1
  403310:	e001      	b.n	403316 <dir_read+0xb2>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
  403312:	4541      	cmp	r1, r8
  403314:	d128      	bne.n	403368 <dir_read+0x104>
		}
	} while (++s < 13);						/* Read all character in the entry */
  403316:	454a      	cmp	r2, r9
  403318:	d1ea      	bne.n	4032f0 <dir_read+0x8c>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
  40331a:	7802      	ldrb	r2, [r0, #0]
  40331c:	f012 0f40 	tst.w	r2, #64	; 0x40
  403320:	d025      	beq.n	40336e <dir_read+0x10a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
  403322:	2dfe      	cmp	r5, #254	; 0xfe
  403324:	d820      	bhi.n	403368 <dir_read+0x104>
		lfnbuf[i] = 0;
  403326:	2200      	movs	r2, #0
  403328:	f82c 2015 	strh.w	r2, [ip, r5, lsl #1]
  40332c:	e01f      	b.n	40336e <dir_read+0x10a>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
  40332e:	b91e      	cbnz	r6, 403338 <dir_read+0xd4>
  403330:	4b14      	ldr	r3, [pc, #80]	; (403384 <dir_read+0x120>)
  403332:	4798      	blx	r3
  403334:	4540      	cmp	r0, r8
  403336:	d020      	beq.n	40337a <dir_read+0x116>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
  403338:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40333c:	8423      	strh	r3, [r4, #32]
  40333e:	e01c      	b.n	40337a <dir_read+0x116>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
  403340:	26ff      	movs	r6, #255	; 0xff
  403342:	e004      	b.n	40334e <dir_read+0xea>
  403344:	26ff      	movs	r6, #255	; 0xff
  403346:	e002      	b.n	40334e <dir_read+0xea>
  403348:	26ff      	movs	r6, #255	; 0xff
  40334a:	e000      	b.n	40334e <dir_read+0xea>
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40334c:	26ff      	movs	r6, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
  40334e:	4620      	mov	r0, r4
  403350:	2100      	movs	r1, #0
  403352:	4b0d      	ldr	r3, [pc, #52]	; (403388 <dir_read+0x124>)
  403354:	4798      	blx	r3
		if (res != FR_OK) break;
  403356:	4605      	mov	r5, r0
  403358:	b918      	cbnz	r0, 403362 <dir_read+0xfe>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
  40335a:	6921      	ldr	r1, [r4, #16]
  40335c:	2900      	cmp	r1, #0
  40335e:	d18e      	bne.n	40327e <dir_read+0x1a>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
  403360:	b15d      	cbz	r5, 40337a <dir_read+0x116>
  403362:	2300      	movs	r3, #0
  403364:	6123      	str	r3, [r4, #16]
  403366:	e008      	b.n	40337a <dir_read+0x116>
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403368:	46f0      	mov	r8, lr
  40336a:	26ff      	movs	r6, #255	; 0xff
  40336c:	e7ef      	b.n	40334e <dir_read+0xea>
  40336e:	3b01      	subs	r3, #1
  403370:	b2de      	uxtb	r6, r3
  403372:	46f0      	mov	r8, lr
  403374:	e7eb      	b.n	40334e <dir_read+0xea>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  403376:	2504      	movs	r5, #4
  403378:	e7f3      	b.n	403362 <dir_read+0xfe>
	}

	if (res != FR_OK) dj->sect = 0;

	return res;
}
  40337a:	4628      	mov	r0, r5
  40337c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403380:	00402b5d 	.word	0x00402b5d
  403384:	004025b5 	.word	0x004025b5
  403388:	00402f59 	.word	0x00402f59
  40338c:	004094e8 	.word	0x004094e8

00403390 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  403390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403394:	b083      	sub	sp, #12
  403396:	4683      	mov	fp, r0
  403398:	4688      	mov	r8, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40339a:	780b      	ldrb	r3, [r1, #0]
  40339c:	2b2f      	cmp	r3, #47	; 0x2f
  40339e:	d001      	beq.n	4033a4 <follow_path+0x14>
  4033a0:	2b5c      	cmp	r3, #92	; 0x5c
  4033a2:	d101      	bne.n	4033a8 <follow_path+0x18>
		path++;
  4033a4:	f108 0801 	add.w	r8, r8, #1
	dj->sclust = 0;						/* Start from the root dir */
  4033a8:	2300      	movs	r3, #0
  4033aa:	f8cb 3008 	str.w	r3, [fp, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  4033ae:	f898 3000 	ldrb.w	r3, [r8]
  4033b2:	2b1f      	cmp	r3, #31
  4033b4:	d808      	bhi.n	4033c8 <follow_path+0x38>
		res = dir_sdi(dj, 0);
  4033b6:	4658      	mov	r0, fp
  4033b8:	2100      	movs	r1, #0
  4033ba:	4bb6      	ldr	r3, [pc, #728]	; (403694 <follow_path+0x304>)
  4033bc:	4798      	blx	r3
  4033be:	4603      	mov	r3, r0
		dj->dir = 0;
  4033c0:	2200      	movs	r2, #0
  4033c2:	f8cb 2014 	str.w	r2, [fp, #20]
  4033c6:	e173      	b.n	4036b0 <follow_path+0x320>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4033c8:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 4036ac <follow_path+0x31c>
  4033cc:	4643      	mov	r3, r8
  4033ce:	4698      	mov	r8, r3
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  4033d0:	f813 2b01 	ldrb.w	r2, [r3], #1
  4033d4:	2a2f      	cmp	r2, #47	; 0x2f
  4033d6:	d0fa      	beq.n	4033ce <follow_path+0x3e>
  4033d8:	2a5c      	cmp	r2, #92	; 0x5c
  4033da:	d0f8      	beq.n	4033ce <follow_path+0x3e>
	lfn = dj->lfn;
  4033dc:	f8db 501c 	ldr.w	r5, [fp, #28]
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  4033e0:	f898 0000 	ldrb.w	r0, [r8]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4033e4:	281f      	cmp	r0, #31
  4033e6:	f240 8128 	bls.w	40363a <follow_path+0x2aa>
  4033ea:	282f      	cmp	r0, #47	; 0x2f
  4033ec:	f000 812a 	beq.w	403644 <follow_path+0x2b4>
  4033f0:	285c      	cmp	r0, #92	; 0x5c
  4033f2:	f000 812a 	beq.w	40364a <follow_path+0x2ba>
  4033f6:	1eaf      	subs	r7, r5, #2
  4033f8:	4646      	mov	r6, r8
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  4033fa:	2401      	movs	r4, #1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4033fc:	46a1      	mov	r9, r4
  4033fe:	e00a      	b.n	403416 <follow_path+0x86>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403400:	2b2f      	cmp	r3, #47	; 0x2f
  403402:	f000 8124 	beq.w	40364e <follow_path+0x2be>
  403406:	2b5c      	cmp	r3, #92	; 0x5c
  403408:	f000 8121 	beq.w	40364e <follow_path+0x2be>
		if (di >= _MAX_LFN)				/* Reject too long name */
  40340c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  403410:	f000 8135 	beq.w	40367e <follow_path+0x2ee>
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  403414:	4614      	mov	r4, r2
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403416:	4649      	mov	r1, r9
  403418:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  40341a:	4601      	mov	r1, r0
  40341c:	2800      	cmp	r0, #0
  40341e:	f000 812e 	beq.w	40367e <follow_path+0x2ee>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  403422:	287f      	cmp	r0, #127	; 0x7f
  403424:	d809      	bhi.n	40343a <follow_path+0xaa>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  403426:	2922      	cmp	r1, #34	; 0x22
  403428:	f000 8129 	beq.w	40367e <follow_path+0x2ee>
  40342c:	4a9a      	ldr	r2, [pc, #616]	; (403698 <follow_path+0x308>)
  40342e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  403432:	b113      	cbz	r3, 40343a <follow_path+0xaa>
  403434:	4298      	cmp	r0, r3
  403436:	d1fa      	bne.n	40342e <follow_path+0x9e>
  403438:	e121      	b.n	40367e <follow_path+0x2ee>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
  40343a:	f827 1f02 	strh.w	r1, [r7, #2]!
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  40343e:	1c62      	adds	r2, r4, #1
  403440:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  403444:	4618      	mov	r0, r3
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403446:	2b1f      	cmp	r3, #31
  403448:	d8da      	bhi.n	403400 <follow_path+0x70>
  40344a:	e0f8      	b.n	40363e <follow_path+0x2ae>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  40344c:	2c00      	cmp	r4, #0
  40344e:	f000 8116 	beq.w	40367e <follow_path+0x2ee>
  403452:	eb05 0244 	add.w	r2, r5, r4, lsl #1
		w = lfn[di-1];
  403456:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  40345a:	2b20      	cmp	r3, #32
  40345c:	d001      	beq.n	403462 <follow_path+0xd2>
  40345e:	2b2e      	cmp	r3, #46	; 0x2e
  403460:	d102      	bne.n	403468 <follow_path+0xd8>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  403462:	3c01      	subs	r4, #1
  403464:	d1f7      	bne.n	403456 <follow_path+0xc6>
  403466:	e10a      	b.n	40367e <follow_path+0x2ee>
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  403468:	2c00      	cmp	r4, #0
  40346a:	f000 8108 	beq.w	40367e <follow_path+0x2ee>

	lfn[di] = 0;						/* LFN is created */
  40346e:	0067      	lsls	r7, r4, #1
  403470:	19e9      	adds	r1, r5, r7
  403472:	9100      	str	r1, [sp, #0]
  403474:	f04f 0900 	mov.w	r9, #0
  403478:	f825 9014 	strh.w	r9, [r5, r4, lsl #1]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  40347c:	f8db 0018 	ldr.w	r0, [fp, #24]
  403480:	2120      	movs	r1, #32
  403482:	220b      	movs	r2, #11
  403484:	4b85      	ldr	r3, [pc, #532]	; (40369c <follow_path+0x30c>)
  403486:	4798      	blx	r3
  403488:	1ea9      	subs	r1, r5, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  40348a:	464b      	mov	r3, r9
  40348c:	e000      	b.n	403490 <follow_path+0x100>
  40348e:	3301      	adds	r3, #1
  403490:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  403494:	2a20      	cmp	r2, #32
  403496:	d0fa      	beq.n	40348e <follow_path+0xfe>
  403498:	2a2e      	cmp	r2, #46	; 0x2e
  40349a:	d0f8      	beq.n	40348e <follow_path+0xfe>
	if (si) cf |= NS_LOSS | NS_LFN;
  40349c:	2b00      	cmp	r3, #0
  40349e:	f000 80d9 	beq.w	403654 <follow_path+0x2c4>
  4034a2:	f046 0603 	orr.w	r6, r6, #3
  4034a6:	e0d5      	b.n	403654 <follow_path+0x2c4>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  4034a8:	3c01      	subs	r4, #1
  4034aa:	d106      	bne.n	4034ba <follow_path+0x12a>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  4034ac:	2108      	movs	r1, #8
  4034ae:	9100      	str	r1, [sp, #0]
  4034b0:	f04f 0900 	mov.w	r9, #0
  4034b4:	f8cd 9004 	str.w	r9, [sp, #4]
  4034b8:	e006      	b.n	4034c8 <follow_path+0x138>
  4034ba:	f1a9 0902 	sub.w	r9, r9, #2

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  4034be:	f839 2c02 	ldrh.w	r2, [r9, #-2]
  4034c2:	2a2e      	cmp	r2, #46	; 0x2e
  4034c4:	d1f0      	bne.n	4034a8 <follow_path+0x118>
  4034c6:	e7f1      	b.n	4034ac <follow_path+0x11c>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  4034c8:	1c5f      	adds	r7, r3, #1
  4034ca:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  4034ce:	2800      	cmp	r0, #0
  4034d0:	d05d      	beq.n	40358e <follow_path+0x1fe>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  4034d2:	2820      	cmp	r0, #32
  4034d4:	d004      	beq.n	4034e0 <follow_path+0x150>
  4034d6:	282e      	cmp	r0, #46	; 0x2e
  4034d8:	d106      	bne.n	4034e8 <follow_path+0x158>
  4034da:	42bc      	cmp	r4, r7
  4034dc:	f000 80d1 	beq.w	403682 <follow_path+0x2f2>
			cf |= NS_LOSS | NS_LFN; continue;
  4034e0:	f046 0603 	orr.w	r6, r6, #3
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  4034e4:	463b      	mov	r3, r7
  4034e6:	e7ef      	b.n	4034c8 <follow_path+0x138>
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  4034e8:	9a00      	ldr	r2, [sp, #0]
  4034ea:	4591      	cmp	r9, r2
  4034ec:	d202      	bcs.n	4034f4 <follow_path+0x164>
  4034ee:	42bc      	cmp	r4, r7
  4034f0:	d117      	bne.n	403522 <follow_path+0x192>
  4034f2:	e0b8      	b.n	403666 <follow_path+0x2d6>
			if (ni == 11) {				/* Long extension */
  4034f4:	9b00      	ldr	r3, [sp, #0]
  4034f6:	2b0b      	cmp	r3, #11
  4034f8:	d103      	bne.n	403502 <follow_path+0x172>
				cf |= NS_LOSS | NS_LFN; break;
  4034fa:	f046 0603 	orr.w	r6, r6, #3
  4034fe:	9901      	ldr	r1, [sp, #4]
  403500:	e048      	b.n	403594 <follow_path+0x204>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  403502:	42bc      	cmp	r4, r7
  403504:	d003      	beq.n	40350e <follow_path+0x17e>
  403506:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  40350a:	42a7      	cmp	r7, r4
  40350c:	d841      	bhi.n	403592 <follow_path+0x202>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
  40350e:	9901      	ldr	r1, [sp, #4]
  403510:	008b      	lsls	r3, r1, #2
  403512:	b2db      	uxtb	r3, r3
  403514:	9301      	str	r3, [sp, #4]
  403516:	4623      	mov	r3, r4
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
  403518:	220b      	movs	r2, #11
  40351a:	9200      	str	r2, [sp, #0]
  40351c:	f04f 0908 	mov.w	r9, #8
  403520:	e7d2      	b.n	4034c8 <follow_path+0x138>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
  403522:	287f      	cmp	r0, #127	; 0x7f
  403524:	d90c      	bls.n	403540 <follow_path+0x1b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  403526:	2100      	movs	r1, #0
  403528:	47d0      	blx	sl
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  40352a:	4603      	mov	r3, r0
  40352c:	2800      	cmp	r0, #0
  40352e:	f000 80ad 	beq.w	40368c <follow_path+0x2fc>
  403532:	495b      	ldr	r1, [pc, #364]	; (4036a0 <follow_path+0x310>)
  403534:	440b      	add	r3, r1
  403536:	f813 0c80 	ldrb.w	r0, [r3, #-128]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  40353a:	f046 0602 	orr.w	r6, r6, #2
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  40353e:	b150      	cbz	r0, 403556 <follow_path+0x1c6>
  403540:	4601      	mov	r1, r0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  403542:	282b      	cmp	r0, #43	; 0x2b
  403544:	d007      	beq.n	403556 <follow_path+0x1c6>
  403546:	4a57      	ldr	r2, [pc, #348]	; (4036a4 <follow_path+0x314>)
  403548:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40354c:	2b00      	cmp	r3, #0
  40354e:	f000 808f 	beq.w	403670 <follow_path+0x2e0>
  403552:	4299      	cmp	r1, r3
  403554:	d1f8      	bne.n	403548 <follow_path+0x1b8>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  403556:	f046 0603 	orr.w	r6, r6, #3
  40355a:	205f      	movs	r0, #95	; 0x5f
  40355c:	e00f      	b.n	40357e <follow_path+0x1ee>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
  40355e:	9a01      	ldr	r2, [sp, #4]
  403560:	f042 0202 	orr.w	r2, r2, #2
  403564:	9201      	str	r2, [sp, #4]
  403566:	e00a      	b.n	40357e <follow_path+0x1ee>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  403568:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  40356c:	b29b      	uxth	r3, r3
  40356e:	2b19      	cmp	r3, #25
  403570:	d805      	bhi.n	40357e <follow_path+0x1ee>
						b |= 1; w -= 0x20;
  403572:	9b01      	ldr	r3, [sp, #4]
  403574:	f043 0301 	orr.w	r3, r3, #1
  403578:	9301      	str	r3, [sp, #4]
  40357a:	3820      	subs	r0, #32
  40357c:	b280      	uxth	r0, r0
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  40357e:	f8db 3018 	ldr.w	r3, [fp, #24]
  403582:	f803 0009 	strb.w	r0, [r3, r9]
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  403586:	463b      	mov	r3, r7
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  403588:	f109 0901 	add.w	r9, r9, #1
  40358c:	e79c      	b.n	4034c8 <follow_path+0x138>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
		if (!w) break;					/* Break on end of the LFN */
  40358e:	9901      	ldr	r1, [sp, #4]
  403590:	e000      	b.n	403594 <follow_path+0x204>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
  403592:	9901      	ldr	r1, [sp, #4]
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403594:	f8db 3018 	ldr.w	r3, [fp, #24]
  403598:	781a      	ldrb	r2, [r3, #0]
  40359a:	2ae5      	cmp	r2, #229	; 0xe5
  40359c:	bf04      	itt	eq
  40359e:	2205      	moveq	r2, #5
  4035a0:	701a      	strbeq	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  4035a2:	9a00      	ldr	r2, [sp, #0]
  4035a4:	2a08      	cmp	r2, #8
  4035a6:	d102      	bne.n	4035ae <follow_path+0x21e>
  4035a8:	0089      	lsls	r1, r1, #2
  4035aa:	b2c9      	uxtb	r1, r1
  4035ac:	9101      	str	r1, [sp, #4]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  4035ae:	9901      	ldr	r1, [sp, #4]
  4035b0:	f001 030c 	and.w	r3, r1, #12
  4035b4:	2b0c      	cmp	r3, #12
  4035b6:	d003      	beq.n	4035c0 <follow_path+0x230>
  4035b8:	f001 0203 	and.w	r2, r1, #3
  4035bc:	2a03      	cmp	r2, #3
  4035be:	d101      	bne.n	4035c4 <follow_path+0x234>
		cf |= NS_LFN;
  4035c0:	f046 0602 	orr.w	r6, r6, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  4035c4:	f016 0f02 	tst.w	r6, #2
  4035c8:	d10a      	bne.n	4035e0 <follow_path+0x250>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  4035ca:	9901      	ldr	r1, [sp, #4]
  4035cc:	f001 0203 	and.w	r2, r1, #3
  4035d0:	2a01      	cmp	r2, #1
  4035d2:	bf08      	it	eq
  4035d4:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  4035d8:	2b04      	cmp	r3, #4
  4035da:	bf08      	it	eq
  4035dc:	f046 0608 	orreq.w	r6, r6, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
  4035e0:	f8db 3018 	ldr.w	r3, [fp, #24]
  4035e4:	72de      	strb	r6, [r3, #11]

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  4035e6:	4658      	mov	r0, fp
  4035e8:	4b2f      	ldr	r3, [pc, #188]	; (4036a8 <follow_path+0x318>)
  4035ea:	4798      	blx	r3
			ns = *(dj->fn+NS);
  4035ec:	f8db 3018 	ldr.w	r3, [fp, #24]
  4035f0:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  4035f2:	4603      	mov	r3, r0
  4035f4:	b148      	cbz	r0, 40360a <follow_path+0x27a>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  4035f6:	2804      	cmp	r0, #4
  4035f8:	d15a      	bne.n	4036b0 <follow_path+0x320>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4035fa:	f002 0304 	and.w	r3, r2, #4
  4035fe:	b2db      	uxtb	r3, r3

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  403600:	2b00      	cmp	r3, #0
  403602:	bf14      	ite	ne
  403604:	4603      	movne	r3, r0
  403606:	2305      	moveq	r3, #5
  403608:	e052      	b.n	4036b0 <follow_path+0x320>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  40360a:	f012 0f04 	tst.w	r2, #4
  40360e:	d14f      	bne.n	4036b0 <follow_path+0x320>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  403610:	f8db 3014 	ldr.w	r3, [fp, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  403614:	7ada      	ldrb	r2, [r3, #11]
  403616:	f012 0f10 	tst.w	r2, #16
  40361a:	d00c      	beq.n	403636 <follow_path+0x2a6>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  40361c:	7d59      	ldrb	r1, [r3, #21]
  40361e:	7d1a      	ldrb	r2, [r3, #20]
  403620:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403624:	7ed9      	ldrb	r1, [r3, #27]
  403626:	7e9b      	ldrb	r3, [r3, #26]
  403628:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  40362c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403630:	f8cb 3008 	str.w	r3, [fp, #8]
		}
  403634:	e6ca      	b.n	4033cc <follow_path+0x3c>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
  403636:	2305      	movs	r3, #5
  403638:	e03a      	b.n	4036b0 <follow_path+0x320>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  40363a:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  40363c:	2201      	movs	r2, #1
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  40363e:	4490      	add	r8, r2
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403640:	2604      	movs	r6, #4
  403642:	e703      	b.n	40344c <follow_path+0xbc>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  403644:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  403646:	2201      	movs	r2, #1
  403648:	e001      	b.n	40364e <follow_path+0x2be>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  40364a:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  40364c:	2201      	movs	r2, #1
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  40364e:	4490      	add	r8, r2
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403650:	2600      	movs	r6, #0
  403652:	e6fb      	b.n	40344c <follow_path+0xbc>

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  403654:	442f      	add	r7, r5
  403656:	f837 2c02 	ldrh.w	r2, [r7, #-2]
  40365a:	2a2e      	cmp	r2, #46	; 0x2e
  40365c:	f43f af26 	beq.w	4034ac <follow_path+0x11c>
  403660:	f8dd 9000 	ldr.w	r9, [sp]
  403664:	e720      	b.n	4034a8 <follow_path+0x118>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
  403666:	9a00      	ldr	r2, [sp, #0]
  403668:	2a0b      	cmp	r2, #11
  40366a:	f47f af50 	bne.w	40350e <follow_path+0x17e>
  40366e:	e744      	b.n	4034fa <follow_path+0x16a>
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  403670:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  403674:	b29b      	uxth	r3, r3
  403676:	2b19      	cmp	r3, #25
  403678:	f67f af71 	bls.w	40355e <follow_path+0x1ce>
  40367c:	e774      	b.n	403568 <follow_path+0x1d8>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  40367e:	2306      	movs	r3, #6
  403680:	e016      	b.n	4036b0 <follow_path+0x320>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
  403682:	9b00      	ldr	r3, [sp, #0]
  403684:	2b0b      	cmp	r3, #11
  403686:	f47f af42 	bne.w	40350e <follow_path+0x17e>
  40368a:	e736      	b.n	4034fa <follow_path+0x16a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  40368c:	f046 0602 	orr.w	r6, r6, #2
  403690:	e761      	b.n	403556 <follow_path+0x1c6>
  403692:	bf00      	nop
  403694:	00402cdd 	.word	0x00402cdd
  403698:	00409420 	.word	0x00409420
  40369c:	0040258d 	.word	0x0040258d
  4036a0:	00409468 	.word	0x00409468
  4036a4:	0040942c 	.word	0x0040942c
  4036a8:	00403099 	.word	0x00403099
  4036ac:	004037e1 	.word	0x004037e1
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  4036b0:	4618      	mov	r0, r3
  4036b2:	b003      	add	sp, #12
  4036b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004036b8 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  4036b8:	2807      	cmp	r0, #7
  4036ba:	d80d      	bhi.n	4036d8 <f_mount+0x20>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
  4036bc:	4b07      	ldr	r3, [pc, #28]	; (4036dc <f_mount+0x24>)
  4036be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (rfs) {
  4036c2:	b10b      	cbz	r3, 4036c8 <f_mount+0x10>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  4036c4:	2200      	movs	r2, #0
  4036c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  4036c8:	b109      	cbz	r1, 4036ce <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  4036ca:	2300      	movs	r3, #0
  4036cc:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  4036ce:	4b03      	ldr	r3, [pc, #12]	; (4036dc <f_mount+0x24>)
  4036d0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

	return FR_OK;
  4036d4:	2000      	movs	r0, #0
  4036d6:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
  4036d8:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  4036da:	4770      	bx	lr
  4036dc:	20000d74 	.word	0x20000d74

004036e0 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  4036e0:	b510      	push	{r4, lr}
  4036e2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  4036e6:	4604      	mov	r4, r0
  4036e8:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  4036ea:	a801      	add	r0, sp, #4
  4036ec:	4621      	mov	r1, r4
  4036ee:	2200      	movs	r2, #0
  4036f0:	4b19      	ldr	r3, [pc, #100]	; (403758 <f_opendir+0x78>)
  4036f2:	4798      	blx	r3
	if (res == FR_OK) {
  4036f4:	4603      	mov	r3, r0
  4036f6:	2800      	cmp	r0, #0
  4036f8:	d12a      	bne.n	403750 <f_opendir+0x70>
		INIT_BUF(*dj);
  4036fa:	ab83      	add	r3, sp, #524	; 0x20c
  4036fc:	61a3      	str	r3, [r4, #24]
  4036fe:	ab03      	add	r3, sp, #12
  403700:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  403702:	4620      	mov	r0, r4
  403704:	9901      	ldr	r1, [sp, #4]
  403706:	4b15      	ldr	r3, [pc, #84]	; (40375c <f_opendir+0x7c>)
  403708:	4798      	blx	r3
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
  40370a:	4603      	mov	r3, r0
  40370c:	b988      	cbnz	r0, 403732 <f_opendir+0x52>
			if (dj->dir) {						/* It is not the root dir */
  40370e:	6963      	ldr	r3, [r4, #20]
  403710:	b1ab      	cbz	r3, 40373e <f_opendir+0x5e>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  403712:	7ada      	ldrb	r2, [r3, #11]
  403714:	f012 0f10 	tst.w	r2, #16
  403718:	d00f      	beq.n	40373a <f_opendir+0x5a>
					dj->sclust = LD_CLUST(dj->dir);
  40371a:	7d59      	ldrb	r1, [r3, #21]
  40371c:	7d1a      	ldrb	r2, [r3, #20]
  40371e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403722:	7ed9      	ldrb	r1, [r3, #27]
  403724:	7e9b      	ldrb	r3, [r3, #26]
  403726:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  40372a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40372e:	60a3      	str	r3, [r4, #8]
  403730:	e005      	b.n	40373e <f_opendir+0x5e>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  403732:	2b04      	cmp	r3, #4
  403734:	bf08      	it	eq
  403736:	2305      	moveq	r3, #5
  403738:	e00a      	b.n	403750 <f_opendir+0x70>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
  40373a:	2305      	movs	r3, #5
  40373c:	e008      	b.n	403750 <f_opendir+0x70>
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
  40373e:	6823      	ldr	r3, [r4, #0]
  403740:	88db      	ldrh	r3, [r3, #6]
  403742:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  403744:	4620      	mov	r0, r4
  403746:	2100      	movs	r1, #0
  403748:	4b05      	ldr	r3, [pc, #20]	; (403760 <f_opendir+0x80>)
  40374a:	4798      	blx	r3
  40374c:	4603      	mov	r3, r0
  40374e:	e7f0      	b.n	403732 <f_opendir+0x52>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
  403750:	4618      	mov	r0, r3
  403752:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  403756:	bd10      	pop	{r4, pc}
  403758:	00402699 	.word	0x00402699
  40375c:	00403391 	.word	0x00403391
  403760:	00402cdd 	.word	0x00402cdd

00403764 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  403764:	b570      	push	{r4, r5, r6, lr}
  403766:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
  40376a:	4604      	mov	r4, r0
  40376c:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
  40376e:	6800      	ldr	r0, [r0, #0]
  403770:	88a1      	ldrh	r1, [r4, #4]
  403772:	4b16      	ldr	r3, [pc, #88]	; (4037cc <f_readdir+0x68>)
  403774:	4798      	blx	r3
	if (res == FR_OK) {
  403776:	4605      	mov	r5, r0
  403778:	bb18      	cbnz	r0, 4037c2 <f_readdir+0x5e>
		if (!fno) {
  40377a:	b92e      	cbnz	r6, 403788 <f_readdir+0x24>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
  40377c:	4620      	mov	r0, r4
  40377e:	2100      	movs	r1, #0
  403780:	4b13      	ldr	r3, [pc, #76]	; (4037d0 <f_readdir+0x6c>)
  403782:	4798      	blx	r3
  403784:	4605      	mov	r5, r0
  403786:	e01c      	b.n	4037c2 <f_readdir+0x5e>
		} else {
			INIT_BUF(*dj);
  403788:	ab81      	add	r3, sp, #516	; 0x204
  40378a:	61a3      	str	r3, [r4, #24]
  40378c:	ab01      	add	r3, sp, #4
  40378e:	61e3      	str	r3, [r4, #28]
			res = dir_read(dj);				/* Read an directory item */
  403790:	4620      	mov	r0, r4
  403792:	4b10      	ldr	r3, [pc, #64]	; (4037d4 <f_readdir+0x70>)
  403794:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of dir */
  403796:	2804      	cmp	r0, #4
  403798:	d102      	bne.n	4037a0 <f_readdir+0x3c>
				dj->sect = 0;
  40379a:	2300      	movs	r3, #0
  40379c:	6123      	str	r3, [r4, #16]
  40379e:	e000      	b.n	4037a2 <f_readdir+0x3e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
  4037a0:	b960      	cbnz	r0, 4037bc <f_readdir+0x58>
				get_fileinfo(dj, fno);		/* Get the object information */
  4037a2:	4620      	mov	r0, r4
  4037a4:	4631      	mov	r1, r6
  4037a6:	4b0c      	ldr	r3, [pc, #48]	; (4037d8 <f_readdir+0x74>)
  4037a8:	4798      	blx	r3
				res = dir_next(dj, 0);		/* Increment index for next */
  4037aa:	4620      	mov	r0, r4
  4037ac:	2100      	movs	r1, #0
  4037ae:	4b0b      	ldr	r3, [pc, #44]	; (4037dc <f_readdir+0x78>)
  4037b0:	4798      	blx	r3
				if (res == FR_NO_FILE) {
  4037b2:	2804      	cmp	r0, #4
  4037b4:	d104      	bne.n	4037c0 <f_readdir+0x5c>
					dj->sect = 0;
  4037b6:	2300      	movs	r3, #0
  4037b8:	6123      	str	r3, [r4, #16]
  4037ba:	e002      	b.n	4037c2 <f_readdir+0x5e>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
  4037bc:	4605      	mov	r5, r0
  4037be:	e000      	b.n	4037c2 <f_readdir+0x5e>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
  4037c0:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
  4037c2:	4628      	mov	r0, r5
  4037c4:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
  4037c8:	bd70      	pop	{r4, r5, r6, pc}
  4037ca:	bf00      	nop
  4037cc:	004025d5 	.word	0x004025d5
  4037d0:	00402cdd 	.word	0x00402cdd
  4037d4:	00403265 	.word	0x00403265
  4037d8:	00402a29 	.word	0x00402a29
  4037dc:	00402f59 	.word	0x00402f59

004037e0 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4037e0:	287f      	cmp	r0, #127	; 0x7f
  4037e2:	d91a      	bls.n	40381a <ff_convert+0x3a>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4037e4:	b911      	cbnz	r1, 4037ec <ff_convert+0xc>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4037e6:	28c7      	cmp	r0, #199	; 0xc7
  4037e8:	d107      	bne.n	4037fa <ff_convert+0x1a>
  4037ea:	e011      	b.n	403810 <ff_convert+0x30>
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4037ec:	28ff      	cmp	r0, #255	; 0xff
  4037ee:	d813      	bhi.n	403818 <ff_convert+0x38>
  4037f0:	3880      	subs	r0, #128	; 0x80
  4037f2:	4b0a      	ldr	r3, [pc, #40]	; (40381c <ff_convert+0x3c>)
  4037f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4037f8:	4770      	bx	lr
  4037fa:	4a08      	ldr	r2, [pc, #32]	; (40381c <ff_convert+0x3c>)

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  4037fc:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4037fe:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  403802:	4281      	cmp	r1, r0
  403804:	d005      	beq.n	403812 <ff_convert+0x32>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  403806:	3301      	adds	r3, #1
  403808:	b29b      	uxth	r3, r3
  40380a:	2b80      	cmp	r3, #128	; 0x80
  40380c:	d1f7      	bne.n	4037fe <ff_convert+0x1e>
  40380e:	e000      	b.n	403812 <ff_convert+0x32>
				if (src == Tbl[c]) break;
  403810:	2300      	movs	r3, #0
			}
			c = (c + 0x80) & 0xFF;
  403812:	3380      	adds	r3, #128	; 0x80
  403814:	b2d8      	uxtb	r0, r3
  403816:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403818:	2000      	movs	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  40381a:	4770      	bx	lr
  40381c:	004096d8 	.word	0x004096d8

00403820 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403820:	2861      	cmp	r0, #97	; 0x61
  403822:	d009      	beq.n	403838 <ff_wtoupper+0x18>
  403824:	4907      	ldr	r1, [pc, #28]	; (403844 <ff_wtoupper+0x24>)
  403826:	2200      	movs	r2, #0
  403828:	3201      	adds	r2, #1
  40382a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  40382e:	b13b      	cbz	r3, 403840 <ff_wtoupper+0x20>
  403830:	4283      	cmp	r3, r0
  403832:	d1f9      	bne.n	403828 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  403834:	b90b      	cbnz	r3, 40383a <ff_wtoupper+0x1a>
  403836:	4770      	bx	lr
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403838:	2200      	movs	r2, #0

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40383a:	4b03      	ldr	r3, [pc, #12]	; (403848 <ff_wtoupper+0x28>)
  40383c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403840:	4770      	bx	lr
  403842:	bf00      	nop
  403844:	004094f8 	.word	0x004094f8
  403848:	004097d8 	.word	0x004097d8

0040384c <Button1_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  40384c:	280b      	cmp	r0, #11
  40384e:	d104      	bne.n	40385a <Button1_Handler+0xe>
  403850:	2901      	cmp	r1, #1
  403852:	d102      	bne.n	40385a <Button1_Handler+0xe>
static void ProcessButtonEvt(uint8_t uc_button)
{
	/* Switch between temperature, light and SD mode. */
	if (uc_button == 1)
	{
		app_mode_switch = 1;
  403854:	2201      	movs	r2, #1
  403856:	4b01      	ldr	r3, [pc, #4]	; (40385c <Button1_Handler+0x10>)
  403858:	601a      	str	r2, [r3, #0]
  40385a:	4770      	bx	lr
  40385c:	20000438 	.word	0x20000438

00403860 <SD_Detect_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void SD_Detect_Handler(uint32_t id, uint32_t mask)
{
	if ((SD_MMC_0_CD_ID == id) && (SD_MMC_0_CD_MASK == mask))
  403860:	280d      	cmp	r0, #13
  403862:	d10c      	bne.n	40387e <SD_Detect_Handler+0x1e>
  403864:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  403868:	d109      	bne.n	40387e <SD_Detect_Handler+0x1e>
	{
		sd_listing_pos = 0;
  40386a:	2300      	movs	r3, #0
  40386c:	4a04      	ldr	r2, [pc, #16]	; (403880 <SD_Detect_Handler+0x20>)
  40386e:	6013      	str	r3, [r2, #0]
		sd_num_files = 0;
  403870:	4a04      	ldr	r2, [pc, #16]	; (403884 <SD_Detect_Handler+0x24>)
  403872:	6013      	str	r3, [r2, #0]
		sd_fs_found = 0;
  403874:	4a04      	ldr	r2, [pc, #16]	; (403888 <SD_Detect_Handler+0x28>)
  403876:	6013      	str	r3, [r2, #0]
		sd_update = 1;
  403878:	2201      	movs	r2, #1
  40387a:	4b04      	ldr	r3, [pc, #16]	; (40388c <SD_Detect_Handler+0x2c>)
  40387c:	601a      	str	r2, [r3, #0]
  40387e:	4770      	bx	lr
  403880:	20000d98 	.word	0x20000d98
  403884:	20000d94 	.word	0x20000d94
  403888:	20000d9c 	.word	0x20000d9c
  40388c:	20000da0 	.word	0x20000da0

00403890 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403890:	b570      	push	{r4, r5, r6, lr}
  403892:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403894:	4b1a      	ldr	r3, [pc, #104]	; (403900 <usart_serial_putchar+0x70>)
  403896:	4298      	cmp	r0, r3
  403898:	d107      	bne.n	4038aa <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40389a:	461e      	mov	r6, r3
  40389c:	4d19      	ldr	r5, [pc, #100]	; (403904 <usart_serial_putchar+0x74>)
  40389e:	4630      	mov	r0, r6
  4038a0:	4621      	mov	r1, r4
  4038a2:	47a8      	blx	r5
  4038a4:	2800      	cmp	r0, #0
  4038a6:	d1fa      	bne.n	40389e <usart_serial_putchar+0xe>
  4038a8:	e020      	b.n	4038ec <usart_serial_putchar+0x5c>
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4038aa:	4b17      	ldr	r3, [pc, #92]	; (403908 <usart_serial_putchar+0x78>)
  4038ac:	4298      	cmp	r0, r3
  4038ae:	d107      	bne.n	4038c0 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
  4038b0:	461e      	mov	r6, r3
  4038b2:	4d14      	ldr	r5, [pc, #80]	; (403904 <usart_serial_putchar+0x74>)
  4038b4:	4630      	mov	r0, r6
  4038b6:	4621      	mov	r1, r4
  4038b8:	47a8      	blx	r5
  4038ba:	2800      	cmp	r0, #0
  4038bc:	d1fa      	bne.n	4038b4 <usart_serial_putchar+0x24>
  4038be:	e017      	b.n	4038f0 <usart_serial_putchar+0x60>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4038c0:	4b12      	ldr	r3, [pc, #72]	; (40390c <usart_serial_putchar+0x7c>)
  4038c2:	4298      	cmp	r0, r3
  4038c4:	d107      	bne.n	4038d6 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
  4038c6:	461e      	mov	r6, r3
  4038c8:	4d11      	ldr	r5, [pc, #68]	; (403910 <usart_serial_putchar+0x80>)
  4038ca:	4630      	mov	r0, r6
  4038cc:	4621      	mov	r1, r4
  4038ce:	47a8      	blx	r5
  4038d0:	2800      	cmp	r0, #0
  4038d2:	d1fa      	bne.n	4038ca <usart_serial_putchar+0x3a>
  4038d4:	e00e      	b.n	4038f4 <usart_serial_putchar+0x64>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4038d6:	4b0f      	ldr	r3, [pc, #60]	; (403914 <usart_serial_putchar+0x84>)
  4038d8:	4298      	cmp	r0, r3
  4038da:	d10d      	bne.n	4038f8 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
  4038dc:	461e      	mov	r6, r3
  4038de:	4d0c      	ldr	r5, [pc, #48]	; (403910 <usart_serial_putchar+0x80>)
  4038e0:	4630      	mov	r0, r6
  4038e2:	4621      	mov	r1, r4
  4038e4:	47a8      	blx	r5
  4038e6:	2800      	cmp	r0, #0
  4038e8:	d1fa      	bne.n	4038e0 <usart_serial_putchar+0x50>
  4038ea:	e007      	b.n	4038fc <usart_serial_putchar+0x6c>
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  4038ec:	2001      	movs	r0, #1
  4038ee:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  4038f0:	2001      	movs	r0, #1
  4038f2:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  4038f4:	2001      	movs	r0, #1
  4038f6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4038f8:	2000      	movs	r0, #0
  4038fa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  4038fc:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
  4038fe:	bd70      	pop	{r4, r5, r6, pc}
  403900:	400e0600 	.word	0x400e0600
  403904:	00402155 	.word	0x00402155
  403908:	400e0800 	.word	0x400e0800
  40390c:	40024000 	.word	0x40024000
  403910:	00402175 	.word	0x00402175
  403914:	40028000 	.word	0x40028000

00403918 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  403918:	b570      	push	{r4, r5, r6, lr}
  40391a:	b082      	sub	sp, #8
  40391c:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40391e:	ac02      	add	r4, sp, #8
  403920:	2302      	movs	r3, #2
  403922:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  403926:	4d09      	ldr	r5, [pc, #36]	; (40394c <ssd1306_write_command+0x34>)
  403928:	4628      	mov	r0, r5
  40392a:	4621      	mov	r1, r4
  40392c:	4b08      	ldr	r3, [pc, #32]	; (403950 <ssd1306_write_command+0x38>)
  40392e:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403930:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  403934:	4b07      	ldr	r3, [pc, #28]	; (403954 <ssd1306_write_command+0x3c>)
  403936:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  403938:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40393a:	2056      	movs	r0, #86	; 0x56
  40393c:	4b06      	ldr	r3, [pc, #24]	; (403958 <ssd1306_write_command+0x40>)
  40393e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  403940:	4628      	mov	r0, r5
  403942:	4621      	mov	r1, r4
  403944:	4b05      	ldr	r3, [pc, #20]	; (40395c <ssd1306_write_command+0x44>)
  403946:	4798      	blx	r3
#endif
}
  403948:	b002      	add	sp, #8
  40394a:	bd70      	pop	{r4, r5, r6, pc}
  40394c:	40008000 	.word	0x40008000
  403950:	004015a9 	.word	0x004015a9
  403954:	400e1200 	.word	0x400e1200
  403958:	20000001 	.word	0x20000001
  40395c:	004015d9 	.word	0x004015d9

00403960 <display_sd_info>:

/**
 * \brief Show SD card status on the OLED screen.
 */
static void display_sd_info(void)
{
  403960:	b5f0      	push	{r4, r5, r6, r7, lr}
  403962:	b0e3      	sub	sp, #396	; 0x18c
	uint8_t sd_card_type;
	uint32_t sd_card_size;
	char size[64];

	// Is SD card present?
	if (gpio_pin_is_low(SD_MMC_0_CD_GPIO) == false)
  403964:	204c      	movs	r0, #76	; 0x4c
  403966:	4b59      	ldr	r3, [pc, #356]	; (403acc <display_sd_info+0x16c>)
  403968:	4798      	blx	r3
  40396a:	b118      	cbz	r0, 403974 <display_sd_info+0x14>
	{
		ssd1306_write_text("Please insert SD card...");
  40396c:	4858      	ldr	r0, [pc, #352]	; (403ad0 <display_sd_info+0x170>)
  40396e:	4b59      	ldr	r3, [pc, #356]	; (403ad4 <display_sd_info+0x174>)
  403970:	4798      	blx	r3
  403972:	e0a9      	b.n	403ac8 <display_sd_info+0x168>
	}
	else
	{
		ssd1306_write_text("SD card information:");
  403974:	4858      	ldr	r0, [pc, #352]	; (403ad8 <display_sd_info+0x178>)
  403976:	4b57      	ldr	r3, [pc, #348]	; (403ad4 <display_sd_info+0x174>)
  403978:	4798      	blx	r3

		sd_mmc_init();
  40397a:	4b58      	ldr	r3, [pc, #352]	; (403adc <display_sd_info+0x17c>)
  40397c:	4798      	blx	r3
		card_check = sd_mmc_check(0);
  40397e:	2000      	movs	r0, #0
  403980:	4b57      	ldr	r3, [pc, #348]	; (403ae0 <display_sd_info+0x180>)
  403982:	4798      	blx	r3
		while (card_check != SD_MMC_OK)
  403984:	2800      	cmp	r0, #0
  403986:	d07a      	beq.n	403a7e <display_sd_info+0x11e>
		{
			card_check = sd_mmc_check(0);
  403988:	2700      	movs	r7, #0
  40398a:	4e55      	ldr	r6, [pc, #340]	; (403ae0 <display_sd_info+0x180>)
			delay_ms(1);
  40398c:	4d55      	ldr	r5, [pc, #340]	; (403ae4 <display_sd_info+0x184>)

		sd_mmc_init();
		card_check = sd_mmc_check(0);
		while (card_check != SD_MMC_OK)
		{
			card_check = sd_mmc_check(0);
  40398e:	4638      	mov	r0, r7
  403990:	47b0      	blx	r6
  403992:	4604      	mov	r4, r0
			delay_ms(1);
  403994:	f242 107c 	movw	r0, #8572	; 0x217c
  403998:	47a8      	blx	r5
	{
		ssd1306_write_text("SD card information:");

		sd_mmc_init();
		card_check = sd_mmc_check(0);
		while (card_check != SD_MMC_OK)
  40399a:	2c00      	cmp	r4, #0
  40399c:	d1f7      	bne.n	40398e <display_sd_info+0x2e>
  40399e:	e06e      	b.n	403a7e <display_sd_info+0x11e>

			// Card type
			switch(sd_card_type)
			{
				case CARD_TYPE_SD:
				ssd1306_write_text("- Type: Normal SD card");
  4039a0:	4851      	ldr	r0, [pc, #324]	; (403ae8 <display_sd_info+0x188>)
  4039a2:	4b4c      	ldr	r3, [pc, #304]	; (403ad4 <display_sd_info+0x174>)
  4039a4:	4798      	blx	r3
				break;
  4039a6:	e00e      	b.n	4039c6 <display_sd_info+0x66>
				case CARD_TYPE_SDIO:
				ssd1306_write_text("- Type: SDIO card");
  4039a8:	4850      	ldr	r0, [pc, #320]	; (403aec <display_sd_info+0x18c>)
  4039aa:	4b4a      	ldr	r3, [pc, #296]	; (403ad4 <display_sd_info+0x174>)
  4039ac:	4798      	blx	r3
				break;
  4039ae:	e00a      	b.n	4039c6 <display_sd_info+0x66>
				case CARD_TYPE_HC:
				ssd1306_write_text("- Type: High Capacity card");
  4039b0:	484f      	ldr	r0, [pc, #316]	; (403af0 <display_sd_info+0x190>)
  4039b2:	4b48      	ldr	r3, [pc, #288]	; (403ad4 <display_sd_info+0x174>)
  4039b4:	4798      	blx	r3
				break;
  4039b6:	e006      	b.n	4039c6 <display_sd_info+0x66>
				case CARD_TYPE_SD_COMBO:
				ssd1306_write_text("- Type: SDIO/Memory card");
  4039b8:	484e      	ldr	r0, [pc, #312]	; (403af4 <display_sd_info+0x194>)
  4039ba:	4b46      	ldr	r3, [pc, #280]	; (403ad4 <display_sd_info+0x174>)
  4039bc:	4798      	blx	r3
				break;
  4039be:	e002      	b.n	4039c6 <display_sd_info+0x66>
				default:
				ssd1306_write_text("- Type: unknown");
  4039c0:	484d      	ldr	r0, [pc, #308]	; (403af8 <display_sd_info+0x198>)
  4039c2:	4b44      	ldr	r3, [pc, #272]	; (403ad4 <display_sd_info+0x174>)
  4039c4:	4798      	blx	r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4039c6:	20b2      	movs	r0, #178	; 0xb2
  4039c8:	4c4c      	ldr	r4, [pc, #304]	; (403afc <display_sd_info+0x19c>)
  4039ca:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4039cc:	2010      	movs	r0, #16
  4039ce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4039d0:	2000      	movs	r0, #0
  4039d2:	47a0      	blx	r4
			}

			ssd1306_set_page_address(2);
			ssd1306_set_column_address(0);

			sprintf(size, "- Total size: %lu KB", sd_card_size);
  4039d4:	a852      	add	r0, sp, #328	; 0x148
  4039d6:	494a      	ldr	r1, [pc, #296]	; (403b00 <display_sd_info+0x1a0>)
  4039d8:	4632      	mov	r2, r6
  4039da:	4b4a      	ldr	r3, [pc, #296]	; (403b04 <display_sd_info+0x1a4>)
  4039dc:	4798      	blx	r3
			ssd1306_write_text(size);
  4039de:	a852      	add	r0, sp, #328	; 0x148
  4039e0:	4b3c      	ldr	r3, [pc, #240]	; (403ad4 <display_sd_info+0x174>)
  4039e2:	4798      	blx	r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4039e4:	20b3      	movs	r0, #179	; 0xb3
  4039e6:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4039e8:	2010      	movs	r0, #16
  4039ea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4039ec:	2000      	movs	r0, #0
  4039ee:	47a0      	blx	r4

			ssd1306_set_page_address(3);
			ssd1306_set_column_address(0);

			// Try to mount file system.
			memset(&fs, 0, sizeof(FATFS));
  4039f0:	4c45      	ldr	r4, [pc, #276]	; (403b08 <display_sd_info+0x1a8>)
  4039f2:	4620      	mov	r0, r4
  4039f4:	2100      	movs	r1, #0
  4039f6:	f44f 720c 	mov.w	r2, #560	; 0x230
  4039fa:	4b44      	ldr	r3, [pc, #272]	; (403b0c <display_sd_info+0x1ac>)
  4039fc:	4798      	blx	r3
			res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  4039fe:	2000      	movs	r0, #0
  403a00:	4621      	mov	r1, r4
  403a02:	4b43      	ldr	r3, [pc, #268]	; (403b10 <display_sd_info+0x1b0>)
  403a04:	4798      	blx	r3
			if (FR_INVALID_DRIVE == res)
  403a06:	280b      	cmp	r0, #11
  403a08:	d106      	bne.n	403a18 <display_sd_info+0xb8>
			{
				ssd1306_write_text("   <No FAT FS found on SD>");
  403a0a:	4842      	ldr	r0, [pc, #264]	; (403b14 <display_sd_info+0x1b4>)
  403a0c:	4b31      	ldr	r3, [pc, #196]	; (403ad4 <display_sd_info+0x174>)
  403a0e:	4798      	blx	r3
				sd_fs_found = 0;
  403a10:	2200      	movs	r2, #0
  403a12:	4b41      	ldr	r3, [pc, #260]	; (403b18 <display_sd_info+0x1b8>)
  403a14:	601a      	str	r2, [r3, #0]
  403a16:	e057      	b.n	403ac8 <display_sd_info+0x168>
	DIR dir;
	char *pc_fn;
	const char *path = "0:";
#if _USE_LFN
	char c_lfn[_MAX_LFN + 1];
	fno.lfname = c_lfn;
  403a18:	ab12      	add	r3, sp, #72	; 0x48
  403a1a:	9307      	str	r3, [sp, #28]
	fno.lfsize = sizeof(c_lfn);
  403a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
  403a20:	9308      	str	r3, [sp, #32]
#endif

	sd_num_files = 0;
  403a22:	2200      	movs	r2, #0
  403a24:	4b3d      	ldr	r3, [pc, #244]	; (403b1c <display_sd_info+0x1bc>)
  403a26:	601a      	str	r2, [r3, #0]

	/* Open the directory */
	res = f_opendir(&dir, path);
  403a28:	a809      	add	r0, sp, #36	; 0x24
  403a2a:	493d      	ldr	r1, [pc, #244]	; (403b20 <display_sd_info+0x1c0>)
  403a2c:	4b3d      	ldr	r3, [pc, #244]	; (403b24 <display_sd_info+0x1c4>)
  403a2e:	4798      	blx	r3
	if (res == FR_OK)
  403a30:	b9a0      	cbnz	r0, 403a5c <display_sd_info+0xfc>
	{
		for (;;)
		{
			res = f_readdir(&dir, &fno);
  403a32:	4d3d      	ldr	r5, [pc, #244]	; (403b28 <display_sd_info+0x1c8>)
			if (*pc_fn == '.')
			{
				continue;
			}

			sd_num_files += 1;
  403a34:	4c39      	ldr	r4, [pc, #228]	; (403b1c <display_sd_info+0x1bc>)
	res = f_opendir(&dir, path);
	if (res == FR_OK)
	{
		for (;;)
		{
			res = f_readdir(&dir, &fno);
  403a36:	a809      	add	r0, sp, #36	; 0x24
  403a38:	a901      	add	r1, sp, #4
  403a3a:	47a8      	blx	r5
			if (res != FR_OK || fno.fname[0] == 0)
  403a3c:	b970      	cbnz	r0, 403a5c <display_sd_info+0xfc>
  403a3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
  403a42:	b15b      	cbz	r3, 403a5c <display_sd_info+0xfc>
			{
				break;
			}

#if _USE_LFN
			pc_fn = *fno.lfname ? fno.lfname : fno.fname;
  403a44:	9b07      	ldr	r3, [sp, #28]
  403a46:	781a      	ldrb	r2, [r3, #0]
  403a48:	b90a      	cbnz	r2, 403a4e <display_sd_info+0xee>
  403a4a:	f10d 030d 	add.w	r3, sp, #13
#else
			pc_fn = fno.fname;
#endif
			if (*pc_fn == '.')
  403a4e:	781b      	ldrb	r3, [r3, #0]
  403a50:	2b2e      	cmp	r3, #46	; 0x2e
  403a52:	d0f0      	beq.n	403a36 <display_sd_info+0xd6>
			{
				continue;
			}

			sd_num_files += 1;
  403a54:	6823      	ldr	r3, [r4, #0]
  403a56:	3301      	adds	r3, #1
  403a58:	6023      	str	r3, [r4, #0]
  403a5a:	e7ec      	b.n	403a36 <display_sd_info+0xd6>
				sd_fs_found = 0;
			}
			else
			{
				get_num_files_on_sd();
				if (sd_num_files == 0)
  403a5c:	4b2f      	ldr	r3, [pc, #188]	; (403b1c <display_sd_info+0x1bc>)
  403a5e:	681b      	ldr	r3, [r3, #0]
  403a60:	b933      	cbnz	r3, 403a70 <display_sd_info+0x110>
				{
					ssd1306_write_text("         <no content>");
  403a62:	4832      	ldr	r0, [pc, #200]	; (403b2c <display_sd_info+0x1cc>)
  403a64:	4b1b      	ldr	r3, [pc, #108]	; (403ad4 <display_sd_info+0x174>)
  403a66:	4798      	blx	r3
					sd_fs_found = 1;
  403a68:	2201      	movs	r2, #1
  403a6a:	4b2b      	ldr	r3, [pc, #172]	; (403b18 <display_sd_info+0x1b8>)
  403a6c:	601a      	str	r2, [r3, #0]
  403a6e:	e02b      	b.n	403ac8 <display_sd_info+0x168>
				}
				else
				{
					ssd1306_write_text("  <Press B2-3 to browse SD>");
  403a70:	482f      	ldr	r0, [pc, #188]	; (403b30 <display_sd_info+0x1d0>)
  403a72:	4b18      	ldr	r3, [pc, #96]	; (403ad4 <display_sd_info+0x174>)
  403a74:	4798      	blx	r3
					sd_fs_found = 1;
  403a76:	2201      	movs	r2, #1
  403a78:	4b27      	ldr	r3, [pc, #156]	; (403b18 <display_sd_info+0x1b8>)
  403a7a:	601a      	str	r2, [r3, #0]
  403a7c:	e024      	b.n	403ac8 <display_sd_info+0x168>
			delay_ms(1);
		}

		if (card_check == SD_MMC_OK)
		{
			sd_card_type = sd_mmc_get_type(0);
  403a7e:	2000      	movs	r0, #0
  403a80:	4b2c      	ldr	r3, [pc, #176]	; (403b34 <display_sd_info+0x1d4>)
  403a82:	4798      	blx	r3
  403a84:	4605      	mov	r5, r0
			sd_card_size = sd_mmc_get_capacity(0);
  403a86:	2000      	movs	r0, #0
  403a88:	4b2b      	ldr	r3, [pc, #172]	; (403b38 <display_sd_info+0x1d8>)
  403a8a:	4798      	blx	r3
  403a8c:	4606      	mov	r6, r0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  403a8e:	20b1      	movs	r0, #177	; 0xb1
  403a90:	4c1a      	ldr	r4, [pc, #104]	; (403afc <display_sd_info+0x19c>)
  403a92:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  403a94:	2010      	movs	r0, #16
  403a96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  403a98:	2000      	movs	r0, #0
  403a9a:	47a0      	blx	r4

			ssd1306_set_page_address(1);
			ssd1306_set_column_address(0);

			// Card type
			switch(sd_card_type)
  403a9c:	1e6b      	subs	r3, r5, #1
  403a9e:	2b07      	cmp	r3, #7
  403aa0:	d88e      	bhi.n	4039c0 <display_sd_info+0x60>
  403aa2:	a201      	add	r2, pc, #4	; (adr r2, 403aa8 <display_sd_info+0x148>)
  403aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403aa8:	004039a1 	.word	0x004039a1
  403aac:	004039c1 	.word	0x004039c1
  403ab0:	004039c1 	.word	0x004039c1
  403ab4:	004039a9 	.word	0x004039a9
  403ab8:	004039b9 	.word	0x004039b9
  403abc:	004039c1 	.word	0x004039c1
  403ac0:	004039c1 	.word	0x004039c1
  403ac4:	004039b1 	.word	0x004039b1
					sd_fs_found = 1;
				}
			}
		}
	}
}
  403ac8:	b063      	add	sp, #396	; 0x18c
  403aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403acc:	004019c1 	.word	0x004019c1
  403ad0:	00409a4c 	.word	0x00409a4c
  403ad4:	00400221 	.word	0x00400221
  403ad8:	00409a68 	.word	0x00409a68
  403adc:	004005e1 	.word	0x004005e1
  403ae0:	00400601 	.word	0x00400601
  403ae4:	20000001 	.word	0x20000001
  403ae8:	00409a80 	.word	0x00409a80
  403aec:	00409a98 	.word	0x00409a98
  403af0:	00409aac 	.word	0x00409aac
  403af4:	00409ac8 	.word	0x00409ac8
  403af8:	00409ae4 	.word	0x00409ae4
  403afc:	00403919 	.word	0x00403919
  403b00:	00409af4 	.word	0x00409af4
  403b04:	004051cd 	.word	0x004051cd
  403b08:	20000ddc 	.word	0x20000ddc
  403b0c:	00405139 	.word	0x00405139
  403b10:	004036b9 	.word	0x004036b9
  403b14:	00409b0c 	.word	0x00409b0c
  403b18:	20000d9c 	.word	0x20000d9c
  403b1c:	20000d94 	.word	0x20000d94
  403b20:	00409b28 	.word	0x00409b28
  403b24:	004036e1 	.word	0x004036e1
  403b28:	00403765 	.word	0x00403765
  403b2c:	00409b2c 	.word	0x00409b2c
  403b30:	00409b44 	.word	0x00409b44
  403b34:	00400a89 	.word	0x00400a89
  403b38:	00400aad 	.word	0x00400aad

00403b3c <ssd1306_clear>:
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
}

static inline void ssd1306_clear(void)
{
  403b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b40:	b083      	sub	sp, #12
  403b42:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  403b46:	f8df b06c 	ldr.w	fp, [pc, #108]	; 403bb4 <ssd1306_clear+0x78>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  403b4a:	4f17      	ldr	r7, [pc, #92]	; (403ba8 <ssd1306_clear+0x6c>)
  403b4c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 403bb8 <ssd1306_clear+0x7c>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403b50:	f8df 8068 	ldr.w	r8, [pc, #104]	; 403bbc <ssd1306_clear+0x80>
  403b54:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  403b56:	f00a 0007 	and.w	r0, sl, #7
  403b5a:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  403b5e:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  403b60:	2010      	movs	r0, #16
  403b62:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  403b64:	2000      	movs	r0, #0
  403b66:	47d8      	blx	fp
  403b68:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403b6a:	ac02      	add	r4, sp, #8
  403b6c:	2302      	movs	r3, #2
  403b6e:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  403b72:	4630      	mov	r0, r6
  403b74:	4621      	mov	r1, r4
  403b76:	47c8      	blx	r9
  403b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  403b7c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  403b80:	2300      	movs	r3, #0
  403b82:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403b84:	2056      	movs	r0, #86	; 0x56
  403b86:	4b09      	ldr	r3, [pc, #36]	; (403bac <ssd1306_clear+0x70>)
  403b88:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  403b8a:	4630      	mov	r0, r6
  403b8c:	4621      	mov	r1, r4
  403b8e:	4b08      	ldr	r3, [pc, #32]	; (403bb0 <ssd1306_clear+0x74>)
  403b90:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  403b92:	3d01      	subs	r5, #1
  403b94:	d1e9      	bne.n	403b6a <ssd1306_clear+0x2e>
  403b96:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  403b9a:	f1ba 0f04 	cmp.w	sl, #4
  403b9e:	d1da      	bne.n	403b56 <ssd1306_clear+0x1a>
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
		}
	}
}
  403ba0:	b003      	add	sp, #12
  403ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ba6:	bf00      	nop
  403ba8:	40008000 	.word	0x40008000
  403bac:	20000001 	.word	0x20000001
  403bb0:	004015d9 	.word	0x004015d9
  403bb4:	00403919 	.word	0x00403919
  403bb8:	004015a9 	.word	0x004015a9
  403bbc:	400e1200 	.word	0x400e1200

00403bc0 <ssd1306_draw_graph>:
 * \param width Graph width.
 * \param height Graph height.
 * \param tab Data to draw. Must contain width elements.
 */
static void ssd1306_draw_graph(uint8_t col, uint8_t page, uint8_t width, uint8_t height, uint8_t *tab)
{
  403bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bc4:	b087      	sub	sp, #28
  403bc6:	4682      	mov	sl, r0
  403bc8:	9102      	str	r1, [sp, #8]
  403bca:	9203      	str	r2, [sp, #12]
  403bcc:	4699      	mov	r9, r3
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
  403bce:	4290      	cmp	r0, r2
  403bd0:	d260      	bcs.n	403c94 <ssd1306_draw_graph+0xd4>
		for (page_start = page; page_start <= height; ++page_start) {
			ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(page_start));
  403bd2:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 403cb0 <ssd1306_draw_graph+0xf0>
  403bd6:	e051      	b.n	403c7c <ssd1306_draw_graph+0xbc>
  403bd8:	f005 0007 	and.w	r0, r5, #7
  403bdc:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  403be0:	47c0      	blx	r8
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  403be2:	4658      	mov	r0, fp
  403be4:	47c0      	blx	r8
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  403be6:	9801      	ldr	r0, [sp, #4]
  403be8:	47c0      	blx	r8
			ssd1306_set_column_address(i);
			j = tab[i];
  403bea:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403bec:	f813 200a 	ldrb.w	r2, [r3, sl]
			scale = 8 * (height - page_start + 1);
  403bf0:	ebc5 0309 	rsb	r3, r5, r9
  403bf4:	3301      	adds	r3, #1
  403bf6:	00db      	lsls	r3, r3, #3
  403bf8:	b2db      	uxtb	r3, r3
			if (j > scale)
  403bfa:	429a      	cmp	r2, r3
  403bfc:	d903      	bls.n	403c06 <ssd1306_draw_graph+0x46>
				j = 8;
  403bfe:	2308      	movs	r3, #8
  403c00:	461a      	mov	r2, r3
  403c02:	2400      	movs	r4, #0
  403c04:	e007      	b.n	403c16 <ssd1306_draw_graph+0x56>
			else
				j -= (scale - 8);
  403c06:	3208      	adds	r2, #8
  403c08:	1ad3      	subs	r3, r2, r3

			for (k = 0, s = j; j > 0; --j)
  403c0a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  403c0e:	d1f7      	bne.n	403c00 <ssd1306_draw_graph+0x40>
				k = (k << 1) + 1;
			for (s = 8 - s; s > 0; --s)
  403c10:	2308      	movs	r3, #8
			if (j > scale)
				j = 8;
			else
				j -= (scale - 8);

			for (k = 0, s = j; j > 0; --j)
  403c12:	2400      	movs	r4, #0
  403c14:	e00c      	b.n	403c30 <ssd1306_draw_graph+0x70>
				k = (k << 1) + 1;
  403c16:	0064      	lsls	r4, r4, #1
  403c18:	3401      	adds	r4, #1
  403c1a:	f004 04ff 	and.w	r4, r4, #255	; 0xff
			if (j > scale)
				j = 8;
			else
				j -= (scale - 8);

			for (k = 0, s = j; j > 0; --j)
  403c1e:	3a01      	subs	r2, #1
  403c20:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  403c24:	d1f7      	bne.n	403c16 <ssd1306_draw_graph+0x56>
				k = (k << 1) + 1;
			for (s = 8 - s; s > 0; --s)
  403c26:	f1c3 0308 	rsb	r3, r3, #8
  403c2a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  403c2e:	d005      	beq.n	403c3c <ssd1306_draw_graph+0x7c>
				k <<= 1;
  403c30:	0064      	lsls	r4, r4, #1
  403c32:	b2e4      	uxtb	r4, r4
			else
				j -= (scale - 8);

			for (k = 0, s = j; j > 0; --j)
				k = (k << 1) + 1;
			for (s = 8 - s; s > 0; --s)
  403c34:	3b01      	subs	r3, #1
  403c36:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  403c3a:	d1f9      	bne.n	403c30 <ssd1306_draw_graph+0x70>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403c3c:	ae06      	add	r6, sp, #24
  403c3e:	2302      	movs	r3, #2
  403c40:	f846 3d04 	str.w	r3, [r6, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  403c44:	4f15      	ldr	r7, [pc, #84]	; (403c9c <ssd1306_draw_graph+0xdc>)
  403c46:	4638      	mov	r0, r7
  403c48:	4631      	mov	r1, r6
  403c4a:	4b15      	ldr	r3, [pc, #84]	; (403ca0 <ssd1306_draw_graph+0xe0>)
  403c4c:	4798      	blx	r3
  403c4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  403c52:	4a14      	ldr	r2, [pc, #80]	; (403ca4 <ssd1306_draw_graph+0xe4>)
  403c54:	6313      	str	r3, [r2, #48]	; 0x30
  403c56:	60fc      	str	r4, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403c58:	2056      	movs	r0, #86	; 0x56
  403c5a:	4b13      	ldr	r3, [pc, #76]	; (403ca8 <ssd1306_draw_graph+0xe8>)
  403c5c:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  403c5e:	4638      	mov	r0, r7
  403c60:	4631      	mov	r1, r6
  403c62:	4b12      	ldr	r3, [pc, #72]	; (403cac <ssd1306_draw_graph+0xec>)
  403c64:	4798      	blx	r3
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
		for (page_start = page; page_start <= height; ++page_start) {
  403c66:	3501      	adds	r5, #1
  403c68:	b2ed      	uxtb	r5, r5
  403c6a:	45a9      	cmp	r9, r5
  403c6c:	d2b4      	bcs.n	403bd8 <ssd1306_draw_graph+0x18>
{
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
  403c6e:	f10a 0a01 	add.w	sl, sl, #1
  403c72:	fa5f fa8a 	uxtb.w	sl, sl
  403c76:	9b03      	ldr	r3, [sp, #12]
  403c78:	4553      	cmp	r3, sl
  403c7a:	d90b      	bls.n	403c94 <ssd1306_draw_graph+0xd4>
		for (page_start = page; page_start <= height; ++page_start) {
  403c7c:	9a02      	ldr	r2, [sp, #8]
  403c7e:	454a      	cmp	r2, r9
  403c80:	d8f5      	bhi.n	403c6e <ssd1306_draw_graph+0xae>
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  403c82:	f3ca 1b02 	ubfx	fp, sl, #4, #3
  403c86:	f04b 0b10 	orr.w	fp, fp, #16
  403c8a:	4615      	mov	r5, r2
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  403c8c:	f00a 030f 	and.w	r3, sl, #15
  403c90:	9301      	str	r3, [sp, #4]
  403c92:	e7a1      	b.n	403bd8 <ssd1306_draw_graph+0x18>
			for (s = 8 - s; s > 0; --s)
				k <<= 1;
			ssd1306_write_data(k);
		}
	}
}
  403c94:	b007      	add	sp, #28
  403c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c9a:	bf00      	nop
  403c9c:	40008000 	.word	0x40008000
  403ca0:	004015a9 	.word	0x004015a9
  403ca4:	400e1200 	.word	0x400e1200
  403ca8:	20000001 	.word	0x20000001
  403cac:	004015d9 	.word	0x004015d9
  403cb0:	00403919 	.word	0x00403919

00403cb4 <ssd1306_clear_char>:
/**
 * \brief Clear one character at the cursor current position on the OLED
 * screen.
 */
static void ssd1306_clear_char(void)
{
  403cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cb8:	b083      	sub	sp, #12
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403cba:	f04f 0b02 	mov.w	fp, #2
  403cbe:	ad02      	add	r5, sp, #8
  403cc0:	f845 bd04 	str.w	fp, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  403cc4:	4c2e      	ldr	r4, [pc, #184]	; (403d80 <ssd1306_clear_char+0xcc>)
  403cc6:	4620      	mov	r0, r4
  403cc8:	4629      	mov	r1, r5
  403cca:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 403d8c <ssd1306_clear_char+0xd8>
  403cce:	47d0      	blx	sl
  403cd0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 403d90 <ssd1306_clear_char+0xdc>
  403cd4:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
  403cd8:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
  403cdc:	2300      	movs	r3, #0
  403cde:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403ce0:	2056      	movs	r0, #86	; 0x56
  403ce2:	4f28      	ldr	r7, [pc, #160]	; (403d84 <ssd1306_clear_char+0xd0>)
  403ce4:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  403ce6:	4620      	mov	r0, r4
  403ce8:	4629      	mov	r1, r5
  403cea:	4e27      	ldr	r6, [pc, #156]	; (403d88 <ssd1306_clear_char+0xd4>)
  403cec:	47b0      	blx	r6
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403cee:	f8cd b004 	str.w	fp, [sp, #4]
	spi_select_device(SSD1306_SPI, &device);
  403cf2:	4620      	mov	r0, r4
  403cf4:	4629      	mov	r1, r5
  403cf6:	47d0      	blx	sl
  403cf8:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
  403cfc:	2300      	movs	r3, #0
  403cfe:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403d00:	2056      	movs	r0, #86	; 0x56
  403d02:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  403d04:	4620      	mov	r0, r4
  403d06:	4629      	mov	r1, r5
  403d08:	47b0      	blx	r6
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403d0a:	f8cd b004 	str.w	fp, [sp, #4]
	spi_select_device(SSD1306_SPI, &device);
  403d0e:	4620      	mov	r0, r4
  403d10:	4629      	mov	r1, r5
  403d12:	47d0      	blx	sl
  403d14:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
  403d18:	2300      	movs	r3, #0
  403d1a:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403d1c:	2056      	movs	r0, #86	; 0x56
  403d1e:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  403d20:	4620      	mov	r0, r4
  403d22:	4629      	mov	r1, r5
  403d24:	47b0      	blx	r6
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403d26:	f8cd b004 	str.w	fp, [sp, #4]
	spi_select_device(SSD1306_SPI, &device);
  403d2a:	4620      	mov	r0, r4
  403d2c:	4629      	mov	r1, r5
  403d2e:	47d0      	blx	sl
  403d30:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
  403d34:	2300      	movs	r3, #0
  403d36:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403d38:	2056      	movs	r0, #86	; 0x56
  403d3a:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  403d3c:	4620      	mov	r0, r4
  403d3e:	4629      	mov	r1, r5
  403d40:	47b0      	blx	r6
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403d42:	f8cd b004 	str.w	fp, [sp, #4]
	spi_select_device(SSD1306_SPI, &device);
  403d46:	4620      	mov	r0, r4
  403d48:	4629      	mov	r1, r5
  403d4a:	47d0      	blx	sl
  403d4c:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
  403d50:	2300      	movs	r3, #0
  403d52:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403d54:	2056      	movs	r0, #86	; 0x56
  403d56:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  403d58:	4620      	mov	r0, r4
  403d5a:	4629      	mov	r1, r5
  403d5c:	47b0      	blx	r6
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403d5e:	f8cd b004 	str.w	fp, [sp, #4]
	spi_select_device(SSD1306_SPI, &device);
  403d62:	4620      	mov	r0, r4
  403d64:	4629      	mov	r1, r5
  403d66:	47d0      	blx	sl
  403d68:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
  403d6c:	2300      	movs	r3, #0
  403d6e:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403d70:	2056      	movs	r0, #86	; 0x56
  403d72:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  403d74:	4620      	mov	r0, r4
  403d76:	4629      	mov	r1, r5
  403d78:	47b0      	blx	r6
	ssd1306_write_data(0x00);
	ssd1306_write_data(0x00);
	ssd1306_write_data(0x00);
	ssd1306_write_data(0x00);
	ssd1306_write_data(0x00);
}
  403d7a:	b003      	add	sp, #12
  403d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d80:	40008000 	.word	0x40008000
  403d84:	20000001 	.word	0x20000001
  403d88:	004015d9 	.word	0x004015d9
  403d8c:	004015a9 	.word	0x004015a9
  403d90:	400e1200 	.word	0x400e1200

00403d94 <Button3_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button3_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  403d94:	280d      	cmp	r0, #13
  403d96:	d11a      	bne.n	403dce <Button3_Handler+0x3a>
  403d98:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  403d9c:	d117      	bne.n	403dce <Button3_Handler+0x3a>
			sd_update = 1;
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
				(app_mode == 2) &&
  403d9e:	4b0c      	ldr	r3, [pc, #48]	; (403dd0 <Button3_Handler+0x3c>)
  403da0:	681b      	ldr	r3, [r3, #0]
			sd_listing_pos -= 1;
			sd_update = 1;
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
  403da2:	2b02      	cmp	r3, #2
  403da4:	d113      	bne.n	403dce <Button3_Handler+0x3a>
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  403da6:	4b0b      	ldr	r3, [pc, #44]	; (403dd4 <Button3_Handler+0x40>)
  403da8:	681b      	ldr	r3, [r3, #0]
			sd_update = 1;
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
				(app_mode == 2) &&
  403daa:	2b01      	cmp	r3, #1
  403dac:	d10f      	bne.n	403dce <Button3_Handler+0x3a>
				(sd_fs_found == 1) &&
				(sd_update == 0))
  403dae:	4b0a      	ldr	r3, [pc, #40]	; (403dd8 <Button3_Handler+0x44>)
  403db0:	681b      	ldr	r3, [r3, #0]
		}
	}
	/* Page DOWN button. */
	else if ((uc_button == 3) &&
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  403db2:	b963      	cbnz	r3, 403dce <Button3_Handler+0x3a>
				(sd_update == 0))
	{
		/* Lock DOWN button when showing the last file. */
		if (sd_listing_pos < sd_num_files)
  403db4:	4b09      	ldr	r3, [pc, #36]	; (403ddc <Button3_Handler+0x48>)
  403db6:	681a      	ldr	r2, [r3, #0]
  403db8:	4b09      	ldr	r3, [pc, #36]	; (403de0 <Button3_Handler+0x4c>)
  403dba:	681b      	ldr	r3, [r3, #0]
  403dbc:	429a      	cmp	r2, r3
  403dbe:	d206      	bcs.n	403dce <Button3_Handler+0x3a>
		{
			sd_listing_pos += 1;
  403dc0:	4b06      	ldr	r3, [pc, #24]	; (403ddc <Button3_Handler+0x48>)
  403dc2:	681a      	ldr	r2, [r3, #0]
  403dc4:	3201      	adds	r2, #1
  403dc6:	601a      	str	r2, [r3, #0]
			sd_update = 1;
  403dc8:	2201      	movs	r2, #1
  403dca:	4b03      	ldr	r3, [pc, #12]	; (403dd8 <Button3_Handler+0x44>)
  403dcc:	601a      	str	r2, [r3, #0]
  403dce:	4770      	bx	lr
  403dd0:	20000434 	.word	0x20000434
  403dd4:	20000d9c 	.word	0x20000d9c
  403dd8:	20000da0 	.word	0x20000da0
  403ddc:	20000d98 	.word	0x20000d98
  403de0:	20000d94 	.word	0x20000d94

00403de4 <Button2_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button2_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  403de4:	280d      	cmp	r0, #13
  403de6:	d117      	bne.n	403e18 <Button2_Handler+0x34>
  403de8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  403dec:	d114      	bne.n	403e18 <Button2_Handler+0x34>
	{
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
				(app_mode == 2) &&
  403dee:	4b0b      	ldr	r3, [pc, #44]	; (403e1c <Button2_Handler+0x38>)
  403df0:	681b      	ldr	r3, [r3, #0]
	if (uc_button == 1)
	{
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
  403df2:	2b02      	cmp	r3, #2
  403df4:	d110      	bne.n	403e18 <Button2_Handler+0x34>
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  403df6:	4b0a      	ldr	r3, [pc, #40]	; (403e20 <Button2_Handler+0x3c>)
  403df8:	681b      	ldr	r3, [r3, #0]
	{
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
				(app_mode == 2) &&
  403dfa:	2b01      	cmp	r3, #1
  403dfc:	d10c      	bne.n	403e18 <Button2_Handler+0x34>
				(sd_fs_found == 1) &&
				(sd_update == 0))
  403dfe:	4b09      	ldr	r3, [pc, #36]	; (403e24 <Button2_Handler+0x40>)
  403e00:	681b      	ldr	r3, [r3, #0]
		app_mode_switch = 1;
	}
	/* Page UP button. */
	else if ((uc_button == 2) &&
				(app_mode == 2) &&
				(sd_fs_found == 1) &&
  403e02:	b94b      	cbnz	r3, 403e18 <Button2_Handler+0x34>
				(sd_update == 0))
	{
		if (sd_listing_pos > 0)
  403e04:	4b08      	ldr	r3, [pc, #32]	; (403e28 <Button2_Handler+0x44>)
  403e06:	681b      	ldr	r3, [r3, #0]
  403e08:	b133      	cbz	r3, 403e18 <Button2_Handler+0x34>
		{
			sd_listing_pos -= 1;
  403e0a:	4b07      	ldr	r3, [pc, #28]	; (403e28 <Button2_Handler+0x44>)
  403e0c:	681a      	ldr	r2, [r3, #0]
  403e0e:	3a01      	subs	r2, #1
  403e10:	601a      	str	r2, [r3, #0]
			sd_update = 1;
  403e12:	2201      	movs	r2, #1
  403e14:	4b03      	ldr	r3, [pc, #12]	; (403e24 <Button2_Handler+0x40>)
  403e16:	601a      	str	r2, [r3, #0]
  403e18:	4770      	bx	lr
  403e1a:	bf00      	nop
  403e1c:	20000434 	.word	0x20000434
  403e20:	20000d9c 	.word	0x20000d9c
  403e24:	20000da0 	.word	0x20000da0
  403e28:	20000d98 	.word	0x20000d98

00403e2c <swap>:
#define BUFFER_SIZE 128


#if SWAP_ENABLE
void swap(uint32_t *data_a, uint32_t *data_b){
  *data_a = *data_a + *data_b;
  403e2c:	6802      	ldr	r2, [r0, #0]
  403e2e:	680b      	ldr	r3, [r1, #0]
  403e30:	4413      	add	r3, r2
  403e32:	6003      	str	r3, [r0, #0]
  *data_b = *data_a - *data_b;
  403e34:	680a      	ldr	r2, [r1, #0]
  403e36:	1a9b      	subs	r3, r3, r2
  403e38:	600b      	str	r3, [r1, #0]
  *data_a = *data_a - *data_b;
  403e3a:	6802      	ldr	r2, [r0, #0]
  403e3c:	1ad3      	subs	r3, r2, r3
  403e3e:	6003      	str	r3, [r0, #0]
  403e40:	4770      	bx	lr
  403e42:	bf00      	nop

00403e44 <bitsInByte>:
#endif

#if BITS_IN_BYTE_ENABLED
uint32_t bitsInByte(uint8_t input){
  uint32_t count = 0;
  while(input)
  403e44:	4603      	mov	r3, r0
  403e46:	b138      	cbz	r0, 403e58 <bitsInByte+0x14>
}
#endif

#if BITS_IN_BYTE_ENABLED
uint32_t bitsInByte(uint8_t input){
  uint32_t count = 0;
  403e48:	2000      	movs	r0, #0
  while(input)
  {
	if(input & 1){
  403e4a:	f013 0f01 	tst.w	r3, #1
      count ++;
  403e4e:	bf18      	it	ne
  403e50:	3001      	addne	r0, #1
#endif

#if BITS_IN_BYTE_ENABLED
uint32_t bitsInByte(uint8_t input){
  uint32_t count = 0;
  while(input)
  403e52:	085b      	lsrs	r3, r3, #1
  403e54:	d1f9      	bne.n	403e4a <bitsInByte+0x6>
  403e56:	4770      	bx	lr
}
#endif

#if BITS_IN_BYTE_ENABLED
uint32_t bitsInByte(uint8_t input){
  uint32_t count = 0;
  403e58:	2000      	movs	r0, #0
      count ++;
	}
    input >>= 1;
  }
  return count;
}
  403e5a:	4770      	bx	lr

00403e5c <main>:
	}
}
#endif

int main(void)
{
  403e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e60:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
	uint32_t adc_value;
	uint32_t light_value;
	double temp;

	// Initialize clocks.
	sysclk_init();
  403e64:	4bb3      	ldr	r3, [pc, #716]	; (404134 <main+0x2d8>)
  403e66:	4798      	blx	r3

	// Initialize GPIO states.
	board_init();
  403e68:	4bb3      	ldr	r3, [pc, #716]	; (404138 <main+0x2dc>)
  403e6a:	4798      	blx	r3
	    US_MR_PAR_NO,
	    US_MR_NBSTOP_1_BIT,
	};

//    gpio_configure_pin(PIOB, (PIO_PERIPH_A | PIO_DEFAULT));
    gpio_configure_pin(PIO_PB2A_URXD1, PIO_PERIPH_A);
  403e6c:	2004      	movs	r0, #4
  403e6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403e72:	4bb2      	ldr	r3, [pc, #712]	; (40413c <main+0x2e0>)
  403e74:	4798      	blx	r3
    gpio_configure_pin(PIO_PB3A_UTXD1, PIO_PERIPH_A);
  403e76:	2008      	movs	r0, #8
  403e78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403e7c:	4baf      	ldr	r3, [pc, #700]	; (40413c <main+0x2e0>)
  403e7e:	4798      	blx	r3
  403e80:	200c      	movs	r0, #12
  403e82:	49af      	ldr	r1, [pc, #700]	; (404140 <main+0x2e4>)
  403e84:	4788      	blx	r1
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  403e86:	4baf      	ldr	r3, [pc, #700]	; (404144 <main+0x2e8>)
  403e88:	9313      	str	r3, [sp, #76]	; 0x4c
	uart_settings.ul_baudrate = opt->baudrate;
  403e8a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  403e8e:	9314      	str	r3, [sp, #80]	; 0x50
	uart_settings.ul_mode = opt->paritytype;
  403e90:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403e94:	9015      	str	r0, [sp, #84]	; 0x54
  403e96:	2009      	movs	r0, #9
  403e98:	49a9      	ldr	r1, [pc, #676]	; (404140 <main+0x2e4>)
  403e9a:	4788      	blx	r1
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403e9c:	4daa      	ldr	r5, [pc, #680]	; (404148 <main+0x2ec>)
  403e9e:	4628      	mov	r0, r5
  403ea0:	a913      	add	r1, sp, #76	; 0x4c
  403ea2:	4baa      	ldr	r3, [pc, #680]	; (40414c <main+0x2f0>)
  403ea4:	4798      	blx	r3

    sysclk_enable_peripheral_clock(ID_PIOB);
	usart_serial_init((Usart *)UART1, &usart_console_settings);
	usart_enable_tx((Usart *)UART1);
  403ea6:	4628      	mov	r0, r5
  403ea8:	4ba9      	ldr	r3, [pc, #676]	; (404150 <main+0x2f4>)
  403eaa:	4798      	blx	r3
	usart_enable_rx((Usart *)UART1);
  403eac:	4628      	mov	r0, r5
  403eae:	4ba9      	ldr	r3, [pc, #676]	; (404154 <main+0x2f8>)
  403eb0:	4798      	blx	r3

	char Value[21] = "Komalsingh Choudhary\0";
  403eb2:	ac7e      	add	r4, sp, #504	; 0x1f8
  403eb4:	4ea8      	ldr	r6, [pc, #672]	; (404158 <main+0x2fc>)
  403eb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403eba:	e896 0003 	ldmia.w	r6, {r0, r1}
  403ebe:	f844 0b04 	str.w	r0, [r4], #4
  403ec2:	7021      	strb	r1, [r4, #0]
	
	
	uint32_t dataDecTmp;
	
#if SWAP_ENABLE
	uint8_t var_xx[10] = "var_x = ";
  403ec4:	4ea5      	ldr	r6, [pc, #660]	; (40415c <main+0x300>)
  403ec6:	ab7b      	add	r3, sp, #492	; 0x1ec
  403ec8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  403ecc:	c303      	stmia	r3!, {r0, r1}
  403ece:	701a      	strb	r2, [r3, #0]
  403ed0:	f04f 0b00 	mov.w	fp, #0
  403ed4:	f88d b1f5 	strb.w	fp, [sp, #501]	; 0x1f5
	uint8_t var_yy[10] = "var_y = ";
  403ed8:	ab78      	add	r3, sp, #480	; 0x1e0
  403eda:	f106 020c 	add.w	r2, r6, #12
  403ede:	ca07      	ldmia	r2, {r0, r1, r2}
  403ee0:	c303      	stmia	r3!, {r0, r1}
  403ee2:	701a      	strb	r2, [r3, #0]
  403ee4:	f88d b1e9 	strb.w	fp, [sp, #489]	; 0x1e9
	uint8_t var_swap[10] = "Swap X Y \n";
  403ee8:	ab75      	add	r3, sp, #468	; 0x1d4
  403eea:	f106 0218 	add.w	r2, r6, #24
  403eee:	ca07      	ldmia	r2, {r0, r1, r2}
  403ef0:	c303      	stmia	r3!, {r0, r1}
  403ef2:	801a      	strh	r2, [r3, #0]
	const uint8_t *varxPtr = var_xx;
	const uint8_t *varyPtr = var_yy;
	const uint8_t *swapPtr = var_swap;
	uint8_t dataDec_10,dataDec_11;
    uint32_t var_x = 10;
  403ef4:	240a      	movs	r4, #10
  403ef6:	9474      	str	r4, [sp, #464]	; 0x1d0
	uint32_t var_y = 20;
  403ef8:	2314      	movs	r3, #20
  403efa:	9373      	str	r3, [sp, #460]	; 0x1cc
	usart_serial_write_packet((Usart *)UART1, varxPtr, sizeof(var_xx));
  403efc:	4628      	mov	r0, r5
  403efe:	a97b      	add	r1, sp, #492	; 0x1ec
  403f00:	4622      	mov	r2, r4
  403f02:	f8df 8268 	ldr.w	r8, [pc, #616]	; 40416c <main+0x310>
  403f06:	47c0      	blx	r8
	dataDecTmp = var_x;
  403f08:	9a74      	ldr	r2, [sp, #464]	; 0x1d0
	dataDec_11 = dataDecTmp % 10;
  403f0a:	f8df 9264 	ldr.w	r9, [pc, #612]	; 404170 <main+0x314>
  403f0e:	fba9 0302 	umull	r0, r3, r9, r2
  403f12:	08db      	lsrs	r3, r3, #3
  403f14:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403f18:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  403f1c:	fa5f fa82 	uxtb.w	sl, r2
	dataDec_11 = dataDec_11 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
  403f20:	fba9 1203 	umull	r1, r2, r9, r3
  403f24:	08d2      	lsrs	r2, r2, #3
  403f26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403f2a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
	dataDec_10 = dataDec_10 + 48;
  403f2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
	usart_serial_putchar((Usart *)UART1, dataDec_10);
  403f32:	4628      	mov	r0, r5
  403f34:	b2c9      	uxtb	r1, r1
  403f36:	4f8a      	ldr	r7, [pc, #552]	; (404160 <main+0x304>)
  403f38:	47b8      	blx	r7
    uint32_t var_x = 10;
	uint32_t var_y = 20;
	usart_serial_write_packet((Usart *)UART1, varxPtr, sizeof(var_xx));
	dataDecTmp = var_x;
	dataDec_11 = dataDecTmp % 10;
	dataDec_11 = dataDec_11 + 48;
  403f3a:	f10a 0130 	add.w	r1, sl, #48	; 0x30
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
	dataDec_10 = dataDec_10 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_10);
	usart_serial_putchar((Usart *)UART1, dataDec_11);
  403f3e:	4628      	mov	r0, r5
  403f40:	b2c9      	uxtb	r1, r1
  403f42:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  403f44:	4628      	mov	r0, r5
  403f46:	4621      	mov	r1, r4
  403f48:	47b8      	blx	r7
	usart_serial_write_packet((Usart *)UART1, varyPtr, sizeof(var_yy));
  403f4a:	4628      	mov	r0, r5
  403f4c:	a978      	add	r1, sp, #480	; 0x1e0
  403f4e:	4622      	mov	r2, r4
  403f50:	47c0      	blx	r8
	dataDecTmp = var_y;
  403f52:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
	dataDec_11 = dataDecTmp % 10;
  403f54:	fba9 0302 	umull	r0, r3, r9, r2
  403f58:	08db      	lsrs	r3, r3, #3
  403f5a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403f5e:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  403f62:	fa5f fa82 	uxtb.w	sl, r2
	dataDec_11 = dataDec_11 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
  403f66:	fba9 1203 	umull	r1, r2, r9, r3
  403f6a:	08d2      	lsrs	r2, r2, #3
  403f6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403f70:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
	dataDec_10 = dataDec_10 + 48;
  403f74:	f103 0130 	add.w	r1, r3, #48	; 0x30
	usart_serial_putchar((Usart *)UART1, dataDec_10);
  403f78:	4628      	mov	r0, r5
  403f7a:	b2c9      	uxtb	r1, r1
  403f7c:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, dataDec_11);
	usart_serial_putchar((Usart *)UART1, '\n');
	usart_serial_write_packet((Usart *)UART1, varyPtr, sizeof(var_yy));
	dataDecTmp = var_y;
	dataDec_11 = dataDecTmp % 10;
	dataDec_11 = dataDec_11 + 48;
  403f7e:	f10a 0130 	add.w	r1, sl, #48	; 0x30
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
	dataDec_10 = dataDec_10 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_10);
	usart_serial_putchar((Usart *)UART1, dataDec_11);
  403f82:	4628      	mov	r0, r5
  403f84:	b2c9      	uxtb	r1, r1
  403f86:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  403f88:	4628      	mov	r0, r5
  403f8a:	4621      	mov	r1, r4
  403f8c:	47b8      	blx	r7
	usart_serial_write_packet((Usart *)UART1, swapPtr, sizeof(var_swap));
  403f8e:	4628      	mov	r0, r5
  403f90:	a975      	add	r1, sp, #468	; 0x1d4
  403f92:	4622      	mov	r2, r4
  403f94:	47c0      	blx	r8
	
    swap(&var_x, &var_y);
  403f96:	a874      	add	r0, sp, #464	; 0x1d0
  403f98:	a973      	add	r1, sp, #460	; 0x1cc
  403f9a:	4b72      	ldr	r3, [pc, #456]	; (404164 <main+0x308>)
  403f9c:	4798      	blx	r3
	
	usart_serial_write_packet((Usart *)UART1, varxPtr, sizeof(var_xx));
  403f9e:	4628      	mov	r0, r5
  403fa0:	a97b      	add	r1, sp, #492	; 0x1ec
  403fa2:	4622      	mov	r2, r4
  403fa4:	47c0      	blx	r8
	dataDecTmp = var_x;
  403fa6:	9a74      	ldr	r2, [sp, #464]	; 0x1d0
	dataDec_11 = dataDecTmp % 10;
  403fa8:	fba9 0302 	umull	r0, r3, r9, r2
  403fac:	08db      	lsrs	r3, r3, #3
  403fae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403fb2:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  403fb6:	fa5f fa82 	uxtb.w	sl, r2
	dataDec_11 = dataDec_11 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
  403fba:	fba9 1203 	umull	r1, r2, r9, r3
  403fbe:	08d2      	lsrs	r2, r2, #3
  403fc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403fc4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
	dataDec_10 = dataDec_10 + 48;
  403fc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
	usart_serial_putchar((Usart *)UART1, dataDec_10);
  403fcc:	4628      	mov	r0, r5
  403fce:	b2c9      	uxtb	r1, r1
  403fd0:	47b8      	blx	r7
    swap(&var_x, &var_y);
	
	usart_serial_write_packet((Usart *)UART1, varxPtr, sizeof(var_xx));
	dataDecTmp = var_x;
	dataDec_11 = dataDecTmp % 10;
	dataDec_11 = dataDec_11 + 48;
  403fd2:	f10a 0130 	add.w	r1, sl, #48	; 0x30
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
	dataDec_10 = dataDec_10 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_10);
	usart_serial_putchar((Usart *)UART1, dataDec_11);
  403fd6:	4628      	mov	r0, r5
  403fd8:	b2c9      	uxtb	r1, r1
  403fda:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  403fdc:	4628      	mov	r0, r5
  403fde:	4621      	mov	r1, r4
  403fe0:	47b8      	blx	r7
	usart_serial_write_packet((Usart *)UART1, varyPtr, sizeof(var_yy));
  403fe2:	4628      	mov	r0, r5
  403fe4:	a978      	add	r1, sp, #480	; 0x1e0
  403fe6:	4622      	mov	r2, r4
  403fe8:	47c0      	blx	r8
	dataDecTmp = var_y;
  403fea:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
	dataDec_11 = dataDecTmp % 10;
  403fec:	fba9 0302 	umull	r0, r3, r9, r2
  403ff0:	08db      	lsrs	r3, r3, #3
  403ff2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403ff6:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  403ffa:	fa5f fa82 	uxtb.w	sl, r2
	dataDec_11 = dataDec_11 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
  403ffe:	fba9 1203 	umull	r1, r2, r9, r3
  404002:	08d2      	lsrs	r2, r2, #3
  404004:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404008:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
	dataDec_10 = dataDec_10 + 48;
  40400c:	f103 0130 	add.w	r1, r3, #48	; 0x30
	usart_serial_putchar((Usart *)UART1, dataDec_10);
  404010:	4628      	mov	r0, r5
  404012:	b2c9      	uxtb	r1, r1
  404014:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, dataDec_11);
	usart_serial_putchar((Usart *)UART1, '\n');
	usart_serial_write_packet((Usart *)UART1, varyPtr, sizeof(var_yy));
	dataDecTmp = var_y;
	dataDec_11 = dataDecTmp % 10;
	dataDec_11 = dataDec_11 + 48;
  404016:	f10a 0130 	add.w	r1, sl, #48	; 0x30
	dataDecTmp = dataDecTmp / 10;
	dataDec_10 = dataDecTmp % 10;
	dataDec_10 = dataDec_10 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_10);
	usart_serial_putchar((Usart *)UART1, dataDec_11);
  40401a:	4628      	mov	r0, r5
  40401c:	b2c9      	uxtb	r1, r1
  40401e:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  404020:	4628      	mov	r0, r5
  404022:	4621      	mov	r1, r4
  404024:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  404026:	4628      	mov	r0, r5
  404028:	4621      	mov	r1, r4
  40402a:	47b8      	blx	r7
#endif

#if BITS_IN_BYTE_ENABLED
	uint8_t varInput2[12] = "Input Var = ";
  40402c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
  404030:	f106 0324 	add.w	r3, r6, #36	; 0x24
  404034:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404038:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	uint8_t varOutput2[15] = "Output Count = ";
  40403c:	f50d 7ed8 	add.w	lr, sp, #432	; 0x1b0
  404040:	f106 0334 	add.w	r3, r6, #52	; 0x34
  404044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404046:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
  40404a:	f82e 3b02 	strh.w	r3, [lr], #2
  40404e:	0c1b      	lsrs	r3, r3, #16
  404050:	f88e 3000 	strb.w	r3, [lr]
	uint8_t varBits[14] = "Bits in Byte \n";
  404054:	f50d 7ed0 	add.w	lr, sp, #416	; 0x1a0
  404058:	f106 0344 	add.w	r3, r6, #68	; 0x44
  40405c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40405e:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
  404062:	f8ae 3000 	strh.w	r3, [lr]
	const uint8_t *varInputPtr2 = varInput2;
	const uint8_t *varOutputPtr2 = varOutput2;
	const uint8_t *varBitsPtr = varBits;
	uint8_t dataDec_20,dataDec_21;
    uint8_t inputByte = 55;
	volatile uint32_t count = 0;
  404066:	f8cd b19c 	str.w	fp, [sp, #412]	; 0x19c
	
    count = bitsInByte(inputByte);
  40406a:	2037      	movs	r0, #55	; 0x37
  40406c:	4b3e      	ldr	r3, [pc, #248]	; (404168 <main+0x30c>)
  40406e:	4798      	blx	r3
  404070:	9067      	str	r0, [sp, #412]	; 0x19c
	
	usart_serial_write_packet((Usart *)UART1, varBitsPtr, sizeof(varBits));
  404072:	4628      	mov	r0, r5
  404074:	a968      	add	r1, sp, #416	; 0x1a0
  404076:	220e      	movs	r2, #14
  404078:	47c0      	blx	r8
	usart_serial_write_packet((Usart *)UART1, varInputPtr2, sizeof(varInput2));
  40407a:	4628      	mov	r0, r5
  40407c:	4651      	mov	r1, sl
  40407e:	220c      	movs	r2, #12
  404080:	47c0      	blx	r8
	dataDec_21 = dataDecTmp % 10;
	dataDec_21 = dataDec_21 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_20 = dataDecTmp % 10;
	dataDec_20 = dataDec_20 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_20);
  404082:	4628      	mov	r0, r5
  404084:	2135      	movs	r1, #53	; 0x35
  404086:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, dataDec_21);
  404088:	4628      	mov	r0, r5
  40408a:	2135      	movs	r1, #53	; 0x35
  40408c:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  40408e:	4628      	mov	r0, r5
  404090:	4621      	mov	r1, r4
  404092:	47b8      	blx	r7

	usart_serial_write_packet((Usart *)UART1, varOutputPtr2, sizeof(varOutput2));
  404094:	4628      	mov	r0, r5
  404096:	a96c      	add	r1, sp, #432	; 0x1b0
  404098:	220f      	movs	r2, #15
  40409a:	47c0      	blx	r8
	dataDecTmp = count;
  40409c:	9a67      	ldr	r2, [sp, #412]	; 0x19c
	dataDec_21 = dataDecTmp % 10;
  40409e:	fba9 0302 	umull	r0, r3, r9, r2
  4040a2:	08db      	lsrs	r3, r3, #3
  4040a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4040a8:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  4040ac:	fa5f fa82 	uxtb.w	sl, r2
	dataDec_21 = dataDec_21 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_20 = dataDecTmp % 10;
  4040b0:	fba9 1203 	umull	r1, r2, r9, r3
  4040b4:	08d2      	lsrs	r2, r2, #3
  4040b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4040ba:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
	dataDec_20 = dataDec_20 + 48;
  4040be:	f103 0130 	add.w	r1, r3, #48	; 0x30
	usart_serial_putchar((Usart *)UART1, dataDec_20);
  4040c2:	4628      	mov	r0, r5
  4040c4:	b2c9      	uxtb	r1, r1
  4040c6:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');

	usart_serial_write_packet((Usart *)UART1, varOutputPtr2, sizeof(varOutput2));
	dataDecTmp = count;
	dataDec_21 = dataDecTmp % 10;
	dataDec_21 = dataDec_21 + 48;
  4040c8:	f10a 0130 	add.w	r1, sl, #48	; 0x30
	dataDecTmp = dataDecTmp / 10;
	dataDec_20 = dataDecTmp % 10;
	dataDec_20 = dataDec_20 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_20);
	usart_serial_putchar((Usart *)UART1, dataDec_21);
  4040cc:	4628      	mov	r0, r5
  4040ce:	b2c9      	uxtb	r1, r1
  4040d0:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  4040d2:	4628      	mov	r0, r5
  4040d4:	4621      	mov	r1, r4
  4040d6:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  4040d8:	4628      	mov	r0, r5
  4040da:	4621      	mov	r1, r4
  4040dc:	47b8      	blx	r7
#endif

#if BIT_SET_ENABLED
	uint8_t varInput3[12] = "Input Var = ";
  4040de:	f50d 7ac8 	add.w	sl, sp, #400	; 0x190
  4040e2:	f106 0324 	add.w	r3, r6, #36	; 0x24
  4040e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4040ea:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	uint8_t varPosition[17] = "Input Position = ";
  4040ee:	f50d 7ebe 	add.w	lr, sp, #380	; 0x17c
  4040f2:	f106 0c54 	add.w	ip, r6, #84	; 0x54
  4040f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4040fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4040fe:	f8dc 3000 	ldr.w	r3, [ip]
  404102:	f88e 3000 	strb.w	r3, [lr]
	uint8_t varOutput3[9] = "Output = ";
  404106:	ab5c      	add	r3, sp, #368	; 0x170
  404108:	f106 0268 	add.w	r2, r6, #104	; 0x68
  40410c:	ca07      	ldmia	r2, {r0, r1, r2}
  40410e:	c303      	stmia	r3!, {r0, r1}
  404110:	701a      	strb	r2, [r3, #0]
	uint8_t varFunciton[30] = "Test n th bit in Double word \n";
  404112:	f50d 7ea8 	add.w	lr, sp, #336	; 0x150
  404116:	3674      	adds	r6, #116	; 0x74
  404118:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40411a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  40411e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  404122:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
  404126:	f8ae 3000 	strh.w	r3, [lr]
	const uint8_t *varPositionPtr = varPosition;
	const uint8_t *varFuncitonPtr = varFunciton;
	uint8_t dataDec_30,dataDec_31;
    uint32_t input = 55;
	uint32_t pos = 5;
	volatile uint32_t bitSetOutput = 0;
  40412a:	f8cd b14c 	str.w	fp, [sp, #332]	; 0x14c

    bitSetOutput = bitSet(input, pos);
  40412e:	2601      	movs	r6, #1
  404130:	e020      	b.n	404174 <main+0x318>
  404132:	bf00      	nop
  404134:	004013d9 	.word	0x004013d9
  404138:	004016fd 	.word	0x004016fd
  40413c:	004019dd 	.word	0x004019dd
  404140:	00401e39 	.word	0x00401e39
  404144:	07270e00 	.word	0x07270e00
  404148:	400e0800 	.word	0x400e0800
  40414c:	0040211d 	.word	0x0040211d
  404150:	00402165 	.word	0x00402165
  404154:	0040216d 	.word	0x0040216d
  404158:	00409ba8 	.word	0x00409ba8
  40415c:	004099b8 	.word	0x004099b8
  404160:	00403891 	.word	0x00403891
  404164:	00403e2d 	.word	0x00403e2d
  404168:	00403e45 	.word	0x00403e45
  40416c:	0040143d 	.word	0x0040143d
  404170:	cccccccd 	.word	0xcccccccd
  404174:	9653      	str	r6, [sp, #332]	; 0x14c

	usart_serial_write_packet((Usart *)UART1, varFuncitonPtr, sizeof(varFunciton));
  404176:	4628      	mov	r0, r5
  404178:	a954      	add	r1, sp, #336	; 0x150
  40417a:	221e      	movs	r2, #30
  40417c:	47c0      	blx	r8
	usart_serial_write_packet((Usart *)UART1, varInputPtr3, sizeof(varInput3));
  40417e:	4628      	mov	r0, r5
  404180:	4651      	mov	r1, sl
  404182:	220c      	movs	r2, #12
  404184:	47c0      	blx	r8
	dataDec_31 = dataDecTmp % 10;
	dataDec_31 = dataDec_31 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_30 = dataDecTmp % 10;
	dataDec_30 = dataDec_30 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_30);
  404186:	4628      	mov	r0, r5
  404188:	2135      	movs	r1, #53	; 0x35
  40418a:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, dataDec_31);
  40418c:	4628      	mov	r0, r5
  40418e:	2135      	movs	r1, #53	; 0x35
  404190:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  404192:	4628      	mov	r0, r5
  404194:	4621      	mov	r1, r4
  404196:	47b8      	blx	r7
	usart_serial_write_packet((Usart *)UART1, varPositionPtr, sizeof(varPosition));
  404198:	4628      	mov	r0, r5
  40419a:	a95f      	add	r1, sp, #380	; 0x17c
  40419c:	2211      	movs	r2, #17
  40419e:	47c0      	blx	r8
	dataDec_31 = dataDecTmp % 10;
	dataDec_31 = dataDec_31 + 48;
	dataDecTmp = dataDecTmp / 10;
	dataDec_30 = dataDecTmp % 10;
	dataDec_30 = dataDec_30 + 48;
	usart_serial_putchar((Usart *)UART1, dataDec_30);
  4041a0:	4628      	mov	r0, r5
  4041a2:	2130      	movs	r1, #48	; 0x30
  4041a4:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, dataDec_31);
  4041a6:	4628      	mov	r0, r5
  4041a8:	2135      	movs	r1, #53	; 0x35
  4041aa:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  4041ac:	4628      	mov	r0, r5
  4041ae:	4621      	mov	r1, r4
  4041b0:	47b8      	blx	r7
	usart_serial_write_packet((Usart *)UART1, varOutputPtr3, sizeof(varOutput3));
  4041b2:	4628      	mov	r0, r5
  4041b4:	a95c      	add	r1, sp, #368	; 0x170
  4041b6:	2209      	movs	r2, #9
  4041b8:	47c0      	blx	r8
	dataDecTmp = bitSetOutput;
  4041ba:	9b53      	ldr	r3, [sp, #332]	; 0x14c
	dataDec_30 = dataDecTmp % 10;
  4041bc:	fba9 0203 	umull	r0, r2, r9, r3
  4041c0:	08d2      	lsrs	r2, r2, #3
  4041c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4041c6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
	dataDec_30 = dataDec_30 + 48;
  4041ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
	usart_serial_putchar((Usart *)UART1, dataDec_30);
  4041ce:	4628      	mov	r0, r5
  4041d0:	b2c9      	uxtb	r1, r1
  4041d2:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  4041d4:	4628      	mov	r0, r5
  4041d6:	4621      	mov	r1, r4
  4041d8:	47b8      	blx	r7
	usart_serial_putchar((Usart *)UART1, '\n');
  4041da:	4628      	mov	r0, r5
  4041dc:	4621      	mov	r1, r4
  4041de:	47b8      	blx	r7
 * \brief Configure the ADC for the light sensor.
 */
static void configure_adc(void)
{
	/* Configure ADC pin for light sensor. */
	gpio_configure_pin(LIGHT_SENSOR_GPIO, LIGHT_SENSOR_FLAGS);
  4041e0:	2020      	movs	r0, #32
  4041e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4041e6:	4b98      	ldr	r3, [pc, #608]	; (404448 <main+0x5ec>)
  4041e8:	4798      	blx	r3

	/* Enable ADC clock. */
	pmc_enable_periph_clk(ID_ADC);
  4041ea:	201d      	movs	r0, #29
  4041ec:	4997      	ldr	r1, [pc, #604]	; (40444c <main+0x5f0>)
  4041ee:	4788      	blx	r1

	/* Configure ADC. */
	adc_init(ADC, sysclk_get_cpu_hz(), 1000000, ADC_MR_STARTUP_SUT0);
  4041f0:	4d97      	ldr	r5, [pc, #604]	; (404450 <main+0x5f4>)
  4041f2:	4628      	mov	r0, r5
  4041f4:	4997      	ldr	r1, [pc, #604]	; (404454 <main+0x5f8>)
  4041f6:	4a98      	ldr	r2, [pc, #608]	; (404458 <main+0x5fc>)
  4041f8:	465b      	mov	r3, fp
  4041fa:	4f98      	ldr	r7, [pc, #608]	; (40445c <main+0x600>)
  4041fc:	47b8      	blx	r7
	adc_enable_channel(ADC, ADC_CHANNEL_4);
  4041fe:	4628      	mov	r0, r5
  404200:	2104      	movs	r1, #4
  404202:	4b97      	ldr	r3, [pc, #604]	; (404460 <main+0x604>)
  404204:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 1);
  404206:	4628      	mov	r0, r5
  404208:	4659      	mov	r1, fp
  40420a:	4632      	mov	r2, r6
  40420c:	4b95      	ldr	r3, [pc, #596]	; (404464 <main+0x608>)
  40420e:	4798      	blx	r3

	// Configure ADC for light sensor.
	configure_adc();

	// Initialize at30tse.
	at30tse_init();
  404210:	4b95      	ldr	r3, [pc, #596]	; (404468 <main+0x60c>)
  404212:	4798      	blx	r3
 * pressed or released.
 */
static void configure_buttons(void)
{
	/* Configure Pushbutton 1. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  404214:	200b      	movs	r0, #11
  404216:	4b8d      	ldr	r3, [pc, #564]	; (40444c <main+0x5f0>)
  404218:	4798      	blx	r3
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  40421a:	f505 2528 	add.w	r5, r5, #688128	; 0xa8000
  40421e:	f505 6560 	add.w	r5, r5, #3584	; 0xe00
  404222:	4628      	mov	r0, r5
  404224:	4631      	mov	r1, r6
  404226:	4622      	mov	r2, r4
  404228:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 4044d0 <main+0x674>
  40422c:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  40422e:	4b8f      	ldr	r3, [pc, #572]	; (40446c <main+0x610>)
  404230:	9300      	str	r3, [sp, #0]
  404232:	4628      	mov	r0, r5
  404234:	210b      	movs	r1, #11
  404236:	4632      	mov	r2, r6
  404238:	2379      	movs	r3, #121	; 0x79
  40423a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 4044d4 <main+0x678>
  40423e:	47c8      	blx	r9
  404240:	f8df 8294 	ldr.w	r8, [pc, #660]	; 4044d8 <main+0x67c>
  404244:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404248:	f8c8 0000 	str.w	r0, [r8]
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
  40424c:	4628      	mov	r0, r5
  40424e:	210b      	movs	r1, #11
  404250:	465a      	mov	r2, fp
  404252:	4f87      	ldr	r7, [pc, #540]	; (404470 <main+0x614>)
  404254:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  404256:	4628      	mov	r0, r5
  404258:	4631      	mov	r1, r6
  40425a:	4e86      	ldr	r6, [pc, #536]	; (404474 <main+0x618>)
  40425c:	47b0      	blx	r6

	/* Configure Pushbutton 2. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  40425e:	200d      	movs	r0, #13
  404260:	497a      	ldr	r1, [pc, #488]	; (40444c <main+0x5f0>)
  404262:	4788      	blx	r1
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  404264:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  404268:	4628      	mov	r0, r5
  40426a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40426e:	4622      	mov	r2, r4
  404270:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  404272:	4b81      	ldr	r3, [pc, #516]	; (404478 <main+0x61c>)
  404274:	9300      	str	r3, [sp, #0]
  404276:	4628      	mov	r0, r5
  404278:	210d      	movs	r1, #13
  40427a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40427e:	2379      	movs	r3, #121	; 0x79
  404280:	47c8      	blx	r9
  404282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  404286:	f8c8 3000 	str.w	r3, [r8]
			PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
  40428a:	4628      	mov	r0, r5
  40428c:	210d      	movs	r1, #13
  40428e:	465a      	mov	r2, fp
  404290:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  404292:	4628      	mov	r0, r5
  404294:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404298:	47b0      	blx	r6

	/* Configure Pushbutton 3. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  40429a:	200d      	movs	r0, #13
  40429c:	496b      	ldr	r1, [pc, #428]	; (40444c <main+0x5f0>)
  40429e:	4788      	blx	r1
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  4042a0:	4628      	mov	r0, r5
  4042a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4042a6:	4622      	mov	r2, r4
  4042a8:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  4042aa:	4b74      	ldr	r3, [pc, #464]	; (40447c <main+0x620>)
  4042ac:	9300      	str	r3, [sp, #0]
  4042ae:	4628      	mov	r0, r5
  4042b0:	210d      	movs	r1, #13
  4042b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4042b6:	2379      	movs	r3, #121	; 0x79
  4042b8:	47c8      	blx	r9
  4042ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4042be:	f8c8 3000 	str.w	r3, [r8]
			PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, Button3_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_3_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, IRQ_PRIOR_PIO);
  4042c2:	4628      	mov	r0, r5
  4042c4:	210d      	movs	r1, #13
  4042c6:	465a      	mov	r2, fp
  4042c8:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  4042ca:	4628      	mov	r0, r5
  4042cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4042d0:	47b0      	blx	r6

	/* Configure SD card detection. */
	pmc_enable_periph_clk(SD_MMC_0_CD_ID);
  4042d2:	200d      	movs	r0, #13
  4042d4:	495d      	ldr	r1, [pc, #372]	; (40444c <main+0x5f0>)
  4042d6:	4788      	blx	r1
	pio_set_debounce_filter(SD_MMC_0_CD_PIO, SD_MMC_0_CD_MASK, 10);
  4042d8:	4628      	mov	r0, r5
  4042da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4042de:	4622      	mov	r2, r4
  4042e0:	47d0      	blx	sl
	pio_handler_set(SD_MMC_0_CD_PIO, SD_MMC_0_CD_ID, SD_MMC_0_CD_MASK,
  4042e2:	4b67      	ldr	r3, [pc, #412]	; (404480 <main+0x624>)
  4042e4:	9300      	str	r3, [sp, #0]
  4042e6:	4628      	mov	r0, r5
  4042e8:	210d      	movs	r1, #13
  4042ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4042ee:	2349      	movs	r3, #73	; 0x49
  4042f0:	47c8      	blx	r9
  4042f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4042f6:	f8c8 3000 	str.w	r3, [r8]
			SD_MMC_0_CD_ATTR, SD_Detect_Handler);
	NVIC_EnableIRQ((IRQn_Type) SD_MMC_0_CD_ID);
	pio_handler_set_priority(SD_MMC_0_CD_PIO, (IRQn_Type) SD_MMC_0_CD_ID, IRQ_PRIOR_PIO);
  4042fa:	4628      	mov	r0, r5
  4042fc:	210d      	movs	r1, #13
  4042fe:	465a      	mov	r2, fp
  404300:	47b8      	blx	r7
	pio_enable_interrupt(SD_MMC_0_CD_PIO, SD_MMC_0_CD_MASK);
  404302:	4628      	mov	r0, r5
  404304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404308:	47b0      	blx	r6

	// Configure IO1 buttons.
	configure_buttons();

	// Initialize SPI and SSD1306 controller.
	ssd1306_init();
  40430a:	4b5e      	ldr	r3, [pc, #376]	; (404484 <main+0x628>)
  40430c:	4798      	blx	r3
	ssd1306_clear();
  40430e:	4c5e      	ldr	r4, [pc, #376]	; (404488 <main+0x62c>)
  404310:	47a0      	blx	r4

    // Clear screen.
    ssd1306_clear();
  404312:	47a0      	blx	r4
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  404314:	20b0      	movs	r0, #176	; 0xb0
  404316:	4c5d      	ldr	r4, [pc, #372]	; (40448c <main+0x630>)
  404318:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40431a:	2010      	movs	r0, #16
  40431c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40431e:	4658      	mov	r0, fp
  404320:	47a0      	blx	r4
    ssd1306_set_page_address(0);
    ssd1306_set_column_address(0);
    ssd1306_write_text(name);
  404322:	a87e      	add	r0, sp, #504	; 0x1f8
  404324:	4d5a      	ldr	r5, [pc, #360]	; (404490 <main+0x634>)
  404326:	47a8      	blx	r5
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  404328:	20b2      	movs	r0, #178	; 0xb2
  40432a:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40432c:	2010      	movs	r0, #16
  40432e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  404330:	4658      	mov	r0, fp
  404332:	47a0      	blx	r4
    ssd1306_set_page_address(2);
    ssd1306_set_column_address(0);
    ssd1306_write_text("Atmel Corp");
  404334:	4857      	ldr	r0, [pc, #348]	; (404494 <main+0x638>)
  404336:	47a8      	blx	r5
	
    delay_s(10); //Blocking delay in sec
  404338:	4857      	ldr	r0, [pc, #348]	; (404498 <main+0x63c>)
  40433a:	4b58      	ldr	r3, [pc, #352]	; (40449c <main+0x640>)
  40433c:	4798      	blx	r3
  40433e:	465b      	mov	r3, fp

	// Clear internal buffers.
	for (i = 0; i < BUFFER_SIZE; ++i)
	{
		temperature[i] = 0;
  404340:	465a      	mov	r2, fp
		light[i] = 0;
  404342:	a988      	add	r1, sp, #544	; 0x220
    delay_s(10); //Blocking delay in sec

	// Clear internal buffers.
	for (i = 0; i < BUFFER_SIZE; ++i)
	{
		temperature[i] = 0;
  404344:	a8a8      	add	r0, sp, #672	; 0x2a0
  404346:	541a      	strb	r2, [r3, r0]
		light[i] = 0;
  404348:	545a      	strb	r2, [r3, r1]
  40434a:	3301      	adds	r3, #1
    ssd1306_write_text("Atmel Corp");
	
    delay_s(10); //Blocking delay in sec

	// Clear internal buffers.
	for (i = 0; i < BUFFER_SIZE; ++i)
  40434c:	2b80      	cmp	r3, #128	; 0x80
  40434e:	d1f9      	bne.n	404344 <main+0x4e8>
  404350:	4c53      	ldr	r4, [pc, #332]	; (4044a0 <main+0x644>)
	}

	while (true)
	{
		/* Refresh page title only if necessary. */
		if (app_mode_switch > 0)
  404352:	4b54      	ldr	r3, [pc, #336]	; (4044a4 <main+0x648>)
  404354:	681b      	ldr	r3, [r3, #0]
  404356:	2b00      	cmp	r3, #0
  404358:	f000 823a 	beq.w	4047d0 <main+0x974>
		{
			app_mode = (app_mode + 1) % 3;
  40435c:	4a52      	ldr	r2, [pc, #328]	; (4044a8 <main+0x64c>)
  40435e:	6811      	ldr	r1, [r2, #0]
  404360:	3101      	adds	r1, #1
  404362:	4b52      	ldr	r3, [pc, #328]	; (4044ac <main+0x650>)
  404364:	fba3 0301 	umull	r0, r3, r3, r1
  404368:	085b      	lsrs	r3, r3, #1
  40436a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40436e:	1acb      	subs	r3, r1, r3
  404370:	6013      	str	r3, [r2, #0]
  404372:	f04f 0800 	mov.w	r8, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  404376:	f8df 9114 	ldr.w	r9, [pc, #276]	; 40448c <main+0x630>
  40437a:	f008 0007 	and.w	r0, r8, #7
  40437e:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  404382:	47c8      	blx	r9
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  404384:	2010      	movs	r0, #16
  404386:	47c8      	blx	r9
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  404388:	2000      	movs	r0, #0
  40438a:	47c8      	blx	r9
  40438c:	2680      	movs	r6, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40438e:	2702      	movs	r7, #2
  404390:	9713      	str	r7, [sp, #76]	; 0x4c
	spi_select_device(SSD1306_SPI, &device);
  404392:	4d47      	ldr	r5, [pc, #284]	; (4044b0 <main+0x654>)
  404394:	4628      	mov	r0, r5
  404396:	a913      	add	r1, sp, #76	; 0x4c
  404398:	4b46      	ldr	r3, [pc, #280]	; (4044b4 <main+0x658>)
  40439a:	4798      	blx	r3
  40439c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4043a0:	6323      	str	r3, [r4, #48]	; 0x30
  4043a2:	2300      	movs	r3, #0
  4043a4:	60eb      	str	r3, [r5, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4043a6:	2056      	movs	r0, #86	; 0x56
  4043a8:	4b3c      	ldr	r3, [pc, #240]	; (40449c <main+0x640>)
  4043aa:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4043ac:	4628      	mov	r0, r5
  4043ae:	a913      	add	r1, sp, #76	; 0x4c
  4043b0:	4b41      	ldr	r3, [pc, #260]	; (4044b8 <main+0x65c>)
  4043b2:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  4043b4:	3e01      	subs	r6, #1
  4043b6:	d1eb      	bne.n	404390 <main+0x534>
  4043b8:	f108 0801 	add.w	r8, r8, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  4043bc:	f1b8 0f04 	cmp.w	r8, #4
  4043c0:	d1db      	bne.n	40437a <main+0x51e>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4043c2:	20b0      	movs	r0, #176	; 0xb0
  4043c4:	4d31      	ldr	r5, [pc, #196]	; (40448c <main+0x630>)
  4043c6:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4043c8:	2010      	movs	r0, #16
  4043ca:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4043cc:	2000      	movs	r0, #0
  4043ce:	47a8      	blx	r5
			ssd1306_clear();
			ssd1306_set_page_address(0);
			ssd1306_set_column_address(0);

			/* Temperature mode. */
			if (app_mode == 0)
  4043d0:	4b35      	ldr	r3, [pc, #212]	; (4044a8 <main+0x64c>)
  4043d2:	681b      	ldr	r3, [r3, #0]
  4043d4:	b983      	cbnz	r3, 4043f8 <main+0x59c>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4043d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4043da:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4043dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4043e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  4043e4:	f5a3 33f9 	sub.w	r3, r3, #127488	; 0x1f200
  4043e8:	631a      	str	r2, [r3, #48]	; 0x30
  4043ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4043ee:	6323      	str	r3, [r4, #48]	; 0x30
			{
				ioport_set_pin_level(IO1_LED1_PIN, IO1_LED1_ACTIVE);
				ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
				ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
				ssd1306_write_text("Temperature sensor:");
  4043f0:	4832      	ldr	r0, [pc, #200]	; (4044bc <main+0x660>)
  4043f2:	4b27      	ldr	r3, [pc, #156]	; (404490 <main+0x634>)
  4043f4:	4798      	blx	r3
  4043f6:	e023      	b.n	404440 <main+0x5e4>
			}
			/* Light mode. */
			else if (app_mode == 1)
  4043f8:	4b2b      	ldr	r3, [pc, #172]	; (4044a8 <main+0x64c>)
  4043fa:	681b      	ldr	r3, [r3, #0]
  4043fc:	2b01      	cmp	r3, #1
  4043fe:	d10d      	bne.n	40441c <main+0x5c0>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404400:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  404404:	4b2e      	ldr	r3, [pc, #184]	; (4044c0 <main+0x664>)
  404406:	635a      	str	r2, [r3, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404408:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40440c:	6323      	str	r3, [r4, #48]	; 0x30
  40440e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  404412:	6323      	str	r3, [r4, #48]	; 0x30
			{
				ioport_set_pin_level(IO1_LED2_PIN, IO1_LED2_ACTIVE);
				ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
				ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
				ssd1306_write_text("Light sensor:");
  404414:	482b      	ldr	r0, [pc, #172]	; (4044c4 <main+0x668>)
  404416:	4b1e      	ldr	r3, [pc, #120]	; (404490 <main+0x634>)
  404418:	4798      	blx	r3
  40441a:	e011      	b.n	404440 <main+0x5e4>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40441c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  404420:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404422:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  404426:	6323      	str	r3, [r4, #48]	; 0x30
  404428:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40442c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  404430:	f5a3 33f9 	sub.w	r3, r3, #127488	; 0x1f200
  404434:	631a      	str	r2, [r3, #48]	; 0x30
			{
				ioport_set_pin_level(IO1_LED3_PIN, IO1_LED3_ACTIVE);
				ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
				ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);

				sd_listing_pos = 0;
  404436:	2200      	movs	r2, #0
  404438:	4b23      	ldr	r3, [pc, #140]	; (4044c8 <main+0x66c>)
  40443a:	601a      	str	r2, [r3, #0]
				display_sd_info();
  40443c:	4b23      	ldr	r3, [pc, #140]	; (4044cc <main+0x670>)
  40443e:	4798      	blx	r3
			}

			app_mode_switch = 0;
  404440:	2200      	movs	r2, #0
  404442:	4b18      	ldr	r3, [pc, #96]	; (4044a4 <main+0x648>)
  404444:	601a      	str	r2, [r3, #0]
  404446:	e1c3      	b.n	4047d0 <main+0x974>
  404448:	004019dd 	.word	0x004019dd
  40444c:	00401e39 	.word	0x00401e39
  404450:	40038000 	.word	0x40038000
  404454:	07270e00 	.word	0x07270e00
  404458:	000f4240 	.word	0x000f4240
  40445c:	0040180d 	.word	0x0040180d
  404460:	00401859 	.word	0x00401859
  404464:	00401841 	.word	0x00401841
  404468:	004002d1 	.word	0x004002d1
  40446c:	0040384d 	.word	0x0040384d
  404470:	00401cc5 	.word	0x00401cc5
  404474:	004019ad 	.word	0x004019ad
  404478:	00403de5 	.word	0x00403de5
  40447c:	00403d95 	.word	0x00403d95
  404480:	00403861 	.word	0x00403861
  404484:	00400169 	.word	0x00400169
  404488:	00403b3d 	.word	0x00403b3d
  40448c:	00403919 	.word	0x00403919
  404490:	00400221 	.word	0x00400221
  404494:	00409b60 	.word	0x00409b60
  404498:	051be56e 	.word	0x051be56e
  40449c:	20000001 	.word	0x20000001
  4044a0:	400e1200 	.word	0x400e1200
  4044a4:	20000438 	.word	0x20000438
  4044a8:	20000434 	.word	0x20000434
  4044ac:	aaaaaaab 	.word	0xaaaaaaab
  4044b0:	40008000 	.word	0x40008000
  4044b4:	004015a9 	.word	0x004015a9
  4044b8:	004015d9 	.word	0x004015d9
  4044bc:	00409b6c 	.word	0x00409b6c
  4044c0:	400e0e00 	.word	0x400e0e00
  4044c4:	00409b80 	.word	0x00409b80
  4044c8:	20000d98 	.word	0x20000d98
  4044cc:	00403961 	.word	0x00403961
  4044d0:	00401875 	.word	0x00401875
  4044d4:	00401c4d 	.word	0x00401c4d
  4044d8:	e000e100 	.word	0xe000e100
		}

		// Shift graph buffers.
		for (i = 0; i < BUFFER_SIZE - 1; ++i)
		{
			temperature[i] = temperature[i + 1];
  4044dc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4044e0:	a8a8      	add	r0, sp, #672	; 0x2a0
  4044e2:	541d      	strb	r5, [r3, r0]
			light[i] = light[i + 1];
  4044e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4044e8:	5598      	strb	r0, [r3, r6]
  4044ea:	3301      	adds	r3, #1

			app_mode_switch = 0;
		}

		// Shift graph buffers.
		for (i = 0; i < BUFFER_SIZE - 1; ++i)
  4044ec:	2b7f      	cmp	r3, #127	; 0x7f
  4044ee:	d1f5      	bne.n	4044dc <main+0x680>
			temperature[i] = temperature[i + 1];
			light[i] = light[i + 1];
		}

		// Get temperature in a range from 0 to 40 degrees.
		if (at30tse_read_temperature(&temp) == TWI_SUCCESS)
  4044f0:	a884      	add	r0, sp, #528	; 0x210
  4044f2:	4b7c      	ldr	r3, [pc, #496]	; (4046e4 <main+0x888>)
  4044f4:	4798      	blx	r3
  4044f6:	bb28      	cbnz	r0, 404544 <main+0x6e8>
		{
			// Don't care about negative temperature.
			if (temp < 0)
  4044f8:	ab84      	add	r3, sp, #528	; 0x210
  4044fa:	e9d3 6700 	ldrd	r6, r7, [r3]
  4044fe:	4630      	mov	r0, r6
  404500:	4639      	mov	r1, r7
  404502:	2200      	movs	r2, #0
  404504:	2300      	movs	r3, #0
  404506:	4d78      	ldr	r5, [pc, #480]	; (4046e8 <main+0x88c>)
  404508:	47a8      	blx	r5
  40450a:	b128      	cbz	r0, 404518 <main+0x6bc>
				temp = 0;
  40450c:	ab84      	add	r3, sp, #528	; 0x210
  40450e:	2000      	movs	r0, #0
  404510:	2100      	movs	r1, #0
  404512:	e9c3 0100 	strd	r0, r1, [r3]
  404516:	e006      	b.n	404526 <main+0x6ca>

			// Update temperature for display.
			// Note: -12 in order to rescale for better rendering.
			if (temp < 12)
  404518:	4630      	mov	r0, r6
  40451a:	4639      	mov	r1, r7
  40451c:	2200      	movs	r2, #0
  40451e:	4b73      	ldr	r3, [pc, #460]	; (4046ec <main+0x890>)
  404520:	4d71      	ldr	r5, [pc, #452]	; (4046e8 <main+0x88c>)
  404522:	47a8      	blx	r5
  404524:	b118      	cbz	r0, 40452e <main+0x6d2>
				temperature[BUFFER_SIZE - 1] = 0;
  404526:	2300      	movs	r3, #0
  404528:	f88d 331f 	strb.w	r3, [sp, #799]	; 0x31f
  40452c:	e00d      	b.n	40454a <main+0x6ee>
			else
				temperature[BUFFER_SIZE - 1] = temp - 12;
  40452e:	4630      	mov	r0, r6
  404530:	4639      	mov	r1, r7
  404532:	2200      	movs	r2, #0
  404534:	4b6d      	ldr	r3, [pc, #436]	; (4046ec <main+0x890>)
  404536:	4d6e      	ldr	r5, [pc, #440]	; (4046f0 <main+0x894>)
  404538:	47a8      	blx	r5
  40453a:	4b6e      	ldr	r3, [pc, #440]	; (4046f4 <main+0x898>)
  40453c:	4798      	blx	r3
  40453e:	f88d 031f 	strb.w	r0, [sp, #799]	; 0x31f
  404542:	e002      	b.n	40454a <main+0x6ee>
		}
		else
		{
			// Error print zero values.
			temperature[BUFFER_SIZE - 1] = 0;
  404544:	2300      	movs	r3, #0
  404546:	f88d 331f 	strb.w	r3, [sp, #799]	; 0x31f
		}

		// Get light sensor information.
		// Rescale for better rendering.
		adc_start(ADC);
  40454a:	4d6b      	ldr	r5, [pc, #428]	; (4046f8 <main+0x89c>)
  40454c:	4628      	mov	r0, r5
  40454e:	4b6b      	ldr	r3, [pc, #428]	; (4046fc <main+0x8a0>)
  404550:	4798      	blx	r3
		adc_value = adc_get_channel_value(ADC, ADC_CHANNEL_4);
  404552:	4628      	mov	r0, r5
  404554:	2104      	movs	r1, #4
  404556:	4b6a      	ldr	r3, [pc, #424]	; (404700 <main+0x8a4>)
  404558:	4798      	blx	r3
		light[BUFFER_SIZE - 1] = 24 - adc_value * 24 / 4096;
  40455a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  40455e:	f3c3 2353 	ubfx	r3, r3, #9, #20
  404562:	f1c3 0318 	rsb	r3, r3, #24
  404566:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f

		// Print temperature in text format.
		if (app_mode == 0)
  40456a:	4b66      	ldr	r3, [pc, #408]	; (404704 <main+0x8a8>)
  40456c:	681b      	ldr	r3, [r3, #0]
  40456e:	2b00      	cmp	r3, #0
  404570:	d150      	bne.n	404614 <main+0x7b8>
		{
			sprintf(value_disp, "%d", (uint8_t)temp);
  404572:	adc8      	add	r5, sp, #800	; 0x320
  404574:	e975 0144 	ldrd	r0, r1, [r5, #-272]!	; 0x110
  404578:	4b5e      	ldr	r3, [pc, #376]	; (4046f4 <main+0x898>)
  40457a:	4798      	blx	r3
  40457c:	b2c2      	uxtb	r2, r0
  40457e:	a886      	add	r0, sp, #536	; 0x218
  404580:	4961      	ldr	r1, [pc, #388]	; (404708 <main+0x8ac>)
  404582:	4b62      	ldr	r3, [pc, #392]	; (40470c <main+0x8b0>)
  404584:	4798      	blx	r3
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  404586:	2015      	movs	r0, #21
  404588:	4e61      	ldr	r6, [pc, #388]	; (404710 <main+0x8b4>)
  40458a:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40458c:	200f      	movs	r0, #15
  40458e:	47b0      	blx	r6
			ssd1306_set_column_address(95);
			ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(0));
  404590:	20b0      	movs	r0, #176	; 0xb0
  404592:	47b0      	blx	r6
			ssd1306_write_text(" ");
  404594:	485f      	ldr	r0, [pc, #380]	; (404714 <main+0x8b8>)
  404596:	4b60      	ldr	r3, [pc, #384]	; (404718 <main+0x8bc>)
  404598:	4798      	blx	r3
			// Avoid character overlapping.
			if (temp < 10)
  40459a:	e9d5 0100 	ldrd	r0, r1, [r5]
  40459e:	2200      	movs	r2, #0
  4045a0:	4b5e      	ldr	r3, [pc, #376]	; (40471c <main+0x8c0>)
  4045a2:	4d51      	ldr	r5, [pc, #324]	; (4046e8 <main+0x88c>)
  4045a4:	47a8      	blx	r5
  4045a6:	b108      	cbz	r0, 4045ac <main+0x750>
				ssd1306_clear_char();
  4045a8:	4b5d      	ldr	r3, [pc, #372]	; (404720 <main+0x8c4>)
  4045aa:	4798      	blx	r3
			ssd1306_write_text(value_disp);
  4045ac:	a886      	add	r0, sp, #536	; 0x218
  4045ae:	4e5a      	ldr	r6, [pc, #360]	; (404718 <main+0x8bc>)
  4045b0:	47b0      	blx	r6
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4045b2:	f04f 0b02 	mov.w	fp, #2
  4045b6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
	spi_select_device(SSD1306_SPI, &device);
  4045ba:	4d5a      	ldr	r5, [pc, #360]	; (404724 <main+0x8c8>)
  4045bc:	4628      	mov	r0, r5
  4045be:	a913      	add	r1, sp, #76	; 0x4c
  4045c0:	f8df a17c 	ldr.w	sl, [pc, #380]	; 404740 <main+0x8e4>
  4045c4:	47d0      	blx	sl
  4045c6:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
  4045ca:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  4045ce:	2106      	movs	r1, #6
  4045d0:	60e9      	str	r1, [r5, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4045d2:	2056      	movs	r0, #86	; 0x56
  4045d4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 404744 <main+0x8e8>
  4045d8:	47c0      	blx	r8
	spi_deselect_device(SSD1306_SPI, &device);
  4045da:	4628      	mov	r0, r5
  4045dc:	a913      	add	r1, sp, #76	; 0x4c
  4045de:	4f52      	ldr	r7, [pc, #328]	; (404728 <main+0x8cc>)
  4045e0:	47b8      	blx	r7
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4045e2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
	spi_select_device(SSD1306_SPI, &device);
  4045e6:	4628      	mov	r0, r5
  4045e8:	a913      	add	r1, sp, #76	; 0x4c
  4045ea:	47d0      	blx	sl
  4045ec:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  4045f0:	2306      	movs	r3, #6
  4045f2:	60eb      	str	r3, [r5, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4045f4:	2056      	movs	r0, #86	; 0x56
  4045f6:	47c0      	blx	r8
	spi_deselect_device(SSD1306_SPI, &device);
  4045f8:	4628      	mov	r0, r5
  4045fa:	a913      	add	r1, sp, #76	; 0x4c
  4045fc:	47b8      	blx	r7
			// Display degree symbol.
			ssd1306_write_data(0x06);
			ssd1306_write_data(0x06);
			ssd1306_write_text("c");
  4045fe:	484b      	ldr	r0, [pc, #300]	; (40472c <main+0x8d0>)
  404600:	47b0      	blx	r6

			// Refresh graph.
			ssd1306_draw_graph(0, 1, BUFFER_SIZE, 3, temperature);
  404602:	aba8      	add	r3, sp, #672	; 0x2a0
  404604:	9300      	str	r3, [sp, #0]
  404606:	2000      	movs	r0, #0
  404608:	2101      	movs	r1, #1
  40460a:	2280      	movs	r2, #128	; 0x80
  40460c:	2303      	movs	r3, #3
  40460e:	4d48      	ldr	r5, [pc, #288]	; (404730 <main+0x8d4>)
  404610:	47a8      	blx	r5
  404612:	e0d9      	b.n	4047c8 <main+0x96c>
		}
		else if (app_mode == 1)
  404614:	4b3b      	ldr	r3, [pc, #236]	; (404704 <main+0x8a8>)
  404616:	681b      	ldr	r3, [r3, #0]
  404618:	2b01      	cmp	r3, #1
  40461a:	d129      	bne.n	404670 <main+0x814>
		{
			light_value = 100 - (adc_value * 100 / 4096);
  40461c:	2364      	movs	r3, #100	; 0x64
  40461e:	fb03 f000 	mul.w	r0, r3, r0
  404622:	0b05      	lsrs	r5, r0, #12
  404624:	1b5d      	subs	r5, r3, r5
			sprintf(value_disp, "%lu", light_value);
  404626:	a886      	add	r0, sp, #536	; 0x218
  404628:	4942      	ldr	r1, [pc, #264]	; (404734 <main+0x8d8>)
  40462a:	462a      	mov	r2, r5
  40462c:	4b37      	ldr	r3, [pc, #220]	; (40470c <main+0x8b0>)
  40462e:	4798      	blx	r3
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  404630:	2016      	movs	r0, #22
  404632:	4e37      	ldr	r6, [pc, #220]	; (404710 <main+0x8b4>)
  404634:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  404636:	2002      	movs	r0, #2
  404638:	47b0      	blx	r6
			ssd1306_set_column_address(98);
			ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(0));
  40463a:	20b0      	movs	r0, #176	; 0xb0
  40463c:	47b0      	blx	r6
			ssd1306_write_text(" ");
  40463e:	4835      	ldr	r0, [pc, #212]	; (404714 <main+0x8b8>)
  404640:	4b35      	ldr	r3, [pc, #212]	; (404718 <main+0x8bc>)
  404642:	4798      	blx	r3
			// Avoid character overlapping.
			if (light_value < 10)
  404644:	2d09      	cmp	r5, #9
  404646:	d801      	bhi.n	40464c <main+0x7f0>
				ssd1306_clear_char();
  404648:	4b35      	ldr	r3, [pc, #212]	; (404720 <main+0x8c4>)
  40464a:	4798      	blx	r3
			ssd1306_write_text(value_disp);
  40464c:	a886      	add	r0, sp, #536	; 0x218
  40464e:	4e32      	ldr	r6, [pc, #200]	; (404718 <main+0x8bc>)
  404650:	47b0      	blx	r6
			ssd1306_write_text("%");
  404652:	4839      	ldr	r0, [pc, #228]	; (404738 <main+0x8dc>)
  404654:	47b0      	blx	r6
			// Avoid character overlapping.
			if (light_value < 100)
  404656:	2d63      	cmp	r5, #99	; 0x63
  404658:	d801      	bhi.n	40465e <main+0x802>
				ssd1306_clear_char();
  40465a:	4b31      	ldr	r3, [pc, #196]	; (404720 <main+0x8c4>)
  40465c:	4798      	blx	r3

			// Refresh graph.
			ssd1306_draw_graph(0, 1, BUFFER_SIZE, 3, light);
  40465e:	ab88      	add	r3, sp, #544	; 0x220
  404660:	9300      	str	r3, [sp, #0]
  404662:	2000      	movs	r0, #0
  404664:	2101      	movs	r1, #1
  404666:	2280      	movs	r2, #128	; 0x80
  404668:	2303      	movs	r3, #3
  40466a:	4d31      	ldr	r5, [pc, #196]	; (404730 <main+0x8d4>)
  40466c:	47a8      	blx	r5
  40466e:	e0ab      	b.n	4047c8 <main+0x96c>
		}
		else
		{
			// Refresh screen if card was inserted/removed or browsing content.
			if (sd_update == 1)
  404670:	4b32      	ldr	r3, [pc, #200]	; (40473c <main+0x8e0>)
  404672:	681b      	ldr	r3, [r3, #0]
  404674:	2b01      	cmp	r3, #1
  404676:	f040 80a7 	bne.w	4047c8 <main+0x96c>
  40467a:	f04f 0800 	mov.w	r8, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40467e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 404710 <main+0x8b4>
  404682:	f008 0007 	and.w	r0, r8, #7
  404686:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40468a:	47c8      	blx	r9
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40468c:	2010      	movs	r0, #16
  40468e:	47c8      	blx	r9
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  404690:	2000      	movs	r0, #0
  404692:	47c8      	blx	r9
  404694:	2680      	movs	r6, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  404696:	2702      	movs	r7, #2
  404698:	9713      	str	r7, [sp, #76]	; 0x4c
	spi_select_device(SSD1306_SPI, &device);
  40469a:	4d22      	ldr	r5, [pc, #136]	; (404724 <main+0x8c8>)
  40469c:	4628      	mov	r0, r5
  40469e:	a913      	add	r1, sp, #76	; 0x4c
  4046a0:	4b27      	ldr	r3, [pc, #156]	; (404740 <main+0x8e4>)
  4046a2:	4798      	blx	r3
  4046a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4046a8:	6323      	str	r3, [r4, #48]	; 0x30
  4046aa:	2300      	movs	r3, #0
  4046ac:	60eb      	str	r3, [r5, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4046ae:	2056      	movs	r0, #86	; 0x56
  4046b0:	4b24      	ldr	r3, [pc, #144]	; (404744 <main+0x8e8>)
  4046b2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4046b4:	4628      	mov	r0, r5
  4046b6:	a913      	add	r1, sp, #76	; 0x4c
  4046b8:	4b1b      	ldr	r3, [pc, #108]	; (404728 <main+0x8cc>)
  4046ba:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  4046bc:	3e01      	subs	r6, #1
  4046be:	d1eb      	bne.n	404698 <main+0x83c>
  4046c0:	f108 0801 	add.w	r8, r8, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  4046c4:	f1b8 0f04 	cmp.w	r8, #4
  4046c8:	d1db      	bne.n	404682 <main+0x826>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4046ca:	20b0      	movs	r0, #176	; 0xb0
  4046cc:	4d10      	ldr	r5, [pc, #64]	; (404710 <main+0x8b4>)
  4046ce:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4046d0:	2010      	movs	r0, #16
  4046d2:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4046d4:	2000      	movs	r0, #0
  4046d6:	47a8      	blx	r5
				// Clear screen.
				ssd1306_clear();
				ssd1306_set_page_address(0);
				ssd1306_set_column_address(0);

				if (sd_listing_pos == 0)
  4046d8:	4b1b      	ldr	r3, [pc, #108]	; (404748 <main+0x8ec>)
  4046da:	681b      	ldr	r3, [r3, #0]
  4046dc:	bbc3      	cbnz	r3, 404750 <main+0x8f4>
				{
					// Show SD card info.
					display_sd_info();
  4046de:	4b1b      	ldr	r3, [pc, #108]	; (40474c <main+0x8f0>)
  4046e0:	4798      	blx	r3
  4046e2:	e06e      	b.n	4047c2 <main+0x966>
  4046e4:	0040033d 	.word	0x0040033d
  4046e8:	00405059 	.word	0x00405059
  4046ec:	40280000 	.word	0x40280000
  4046f0:	0040480d 	.word	0x0040480d
  4046f4:	004050a9 	.word	0x004050a9
  4046f8:	40038000 	.word	0x40038000
  4046fc:	00401851 	.word	0x00401851
  404700:	00401865 	.word	0x00401865
  404704:	20000434 	.word	0x20000434
  404708:	00409b90 	.word	0x00409b90
  40470c:	004051cd 	.word	0x004051cd
  404710:	00403919 	.word	0x00403919
  404714:	00409b94 	.word	0x00409b94
  404718:	00400221 	.word	0x00400221
  40471c:	40240000 	.word	0x40240000
  404720:	00403cb5 	.word	0x00403cb5
  404724:	40008000 	.word	0x40008000
  404728:	004015d9 	.word	0x004015d9
  40472c:	00409b98 	.word	0x00409b98
  404730:	00403bc1 	.word	0x00403bc1
  404734:	00409b9c 	.word	0x00409b9c
  404738:	00409ba0 	.word	0x00409ba0
  40473c:	20000da0 	.word	0x20000da0
  404740:	004015a9 	.word	0x004015a9
  404744:	20000001 	.word	0x20000001
  404748:	20000d98 	.word	0x20000d98
  40474c:	00403961 	.word	0x00403961
	uint32_t pos;
	char *pc_fn;
	const char *path = "0:";
#if _USE_LFN
	char c_lfn[_MAX_LFN + 1];
	fno.lfname = c_lfn;
  404750:	ab13      	add	r3, sp, #76	; 0x4c
  404752:	9308      	str	r3, [sp, #32]
	fno.lfsize = sizeof(c_lfn);
  404754:	f44f 7380 	mov.w	r3, #256	; 0x100
  404758:	9309      	str	r3, [sp, #36]	; 0x24

	line = 0;
	pos = 1;

	/* Open the directory */
	res = f_opendir(&dir, path);
  40475a:	a80a      	add	r0, sp, #40	; 0x28
  40475c:	491f      	ldr	r1, [pc, #124]	; (4047dc <main+0x980>)
  40475e:	4b20      	ldr	r3, [pc, #128]	; (4047e0 <main+0x984>)
  404760:	4798      	blx	r3
	if (res == FR_OK)
  404762:	bb70      	cbnz	r0, 4047c2 <main+0x966>
  404764:	2701      	movs	r7, #1
  404766:	2600      	movs	r6, #0
	{
		for (;;)
		{
			res = f_readdir(&dir, &fno);
  404768:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4047fc <main+0x9a0>
			if (*pc_fn == '.')
			{
				continue;
			}

			if ((pos >= sd_listing_pos) && (line < 4))
  40476c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 404800 <main+0x9a4>
	res = f_opendir(&dir, path);
	if (res == FR_OK)
	{
		for (;;)
		{
			res = f_readdir(&dir, &fno);
  404770:	a80a      	add	r0, sp, #40	; 0x28
  404772:	a902      	add	r1, sp, #8
  404774:	47c0      	blx	r8
			if (res != FR_OK || fno.fname[0] == 0)
  404776:	bb20      	cbnz	r0, 4047c2 <main+0x966>
  404778:	f89d 3011 	ldrb.w	r3, [sp, #17]
  40477c:	b30b      	cbz	r3, 4047c2 <main+0x966>
			{
				break;
			}

#if _USE_LFN
			pc_fn = *fno.lfname ? fno.lfname : fno.fname;
  40477e:	9d08      	ldr	r5, [sp, #32]
  404780:	782b      	ldrb	r3, [r5, #0]
  404782:	b90b      	cbnz	r3, 404788 <main+0x92c>
  404784:	f10d 0511 	add.w	r5, sp, #17
#else
			pc_fn = fno.fname;
#endif
			if (*pc_fn == '.')
  404788:	782b      	ldrb	r3, [r5, #0]
  40478a:	2b2e      	cmp	r3, #46	; 0x2e
  40478c:	d0f0      	beq.n	404770 <main+0x914>
			{
				continue;
			}

			if ((pos >= sd_listing_pos) && (line < 4))
  40478e:	f8d9 3000 	ldr.w	r3, [r9]
  404792:	429f      	cmp	r7, r3
  404794:	d313      	bcc.n	4047be <main+0x962>
  404796:	2e03      	cmp	r6, #3
  404798:	d811      	bhi.n	4047be <main+0x962>
			{
				ssd1306_set_page_address(line++);
  40479a:	f106 0a01 	add.w	sl, r6, #1
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40479e:	f006 0007 	and.w	r0, r6, #7
  4047a2:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4047a6:	4e0f      	ldr	r6, [pc, #60]	; (4047e4 <main+0x988>)
  4047a8:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4047aa:	2010      	movs	r0, #16
  4047ac:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4047ae:	2000      	movs	r0, #0
  4047b0:	47b0      	blx	r6
				ssd1306_set_column_address(0);
				ssd1306_write_text("/");
  4047b2:	480d      	ldr	r0, [pc, #52]	; (4047e8 <main+0x98c>)
  4047b4:	4e0d      	ldr	r6, [pc, #52]	; (4047ec <main+0x990>)
  4047b6:	47b0      	blx	r6
				ssd1306_write_text(pc_fn);
  4047b8:	4628      	mov	r0, r5
  4047ba:	47b0      	blx	r6
				continue;
			}

			if ((pos >= sd_listing_pos) && (line < 4))
			{
				ssd1306_set_page_address(line++);
  4047bc:	4656      	mov	r6, sl
				ssd1306_set_column_address(0);
				ssd1306_write_text("/");
				ssd1306_write_text(pc_fn);
			}

			pos += 1;
  4047be:	3701      	adds	r7, #1
  4047c0:	e7d6      	b.n	404770 <main+0x914>
				{
					// List SD card files.
					display_sd_files();
				}

				sd_update = 0;
  4047c2:	2200      	movs	r2, #0
  4047c4:	4b0a      	ldr	r3, [pc, #40]	; (4047f0 <main+0x994>)
  4047c6:	601a      	str	r2, [r3, #0]
			}

		}

		/* Wait and stop screen flickers. */
		delay_ms(50);
  4047c8:	480a      	ldr	r0, [pc, #40]	; (4047f4 <main+0x998>)
  4047ca:	4b0b      	ldr	r3, [pc, #44]	; (4047f8 <main+0x99c>)
  4047cc:	4798      	blx	r3
	}
  4047ce:	e5c0      	b.n	404352 <main+0x4f6>
  4047d0:	a9a8      	add	r1, sp, #672	; 0x2a0
  4047d2:	aa88      	add	r2, sp, #544	; 0x220
  4047d4:	2300      	movs	r3, #0

		// Shift graph buffers.
		for (i = 0; i < BUFFER_SIZE - 1; ++i)
		{
			temperature[i] = temperature[i + 1];
			light[i] = light[i + 1];
  4047d6:	4616      	mov	r6, r2
  4047d8:	e680      	b.n	4044dc <main+0x680>
  4047da:	bf00      	nop
  4047dc:	00409b28 	.word	0x00409b28
  4047e0:	004036e1 	.word	0x004036e1
  4047e4:	00403919 	.word	0x00403919
  4047e8:	00409ba4 	.word	0x00409ba4
  4047ec:	00400221 	.word	0x00400221
  4047f0:	20000da0 	.word	0x20000da0
  4047f4:	00068a1c 	.word	0x00068a1c
  4047f8:	20000001 	.word	0x20000001
  4047fc:	00403765 	.word	0x00403765
  404800:	20000d98 	.word	0x20000d98

00404804 <__aeabi_drsub>:
  404804:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404808:	e002      	b.n	404810 <__adddf3>
  40480a:	bf00      	nop

0040480c <__aeabi_dsub>:
  40480c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404810 <__adddf3>:
  404810:	b530      	push	{r4, r5, lr}
  404812:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404816:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40481a:	ea94 0f05 	teq	r4, r5
  40481e:	bf08      	it	eq
  404820:	ea90 0f02 	teqeq	r0, r2
  404824:	bf1f      	itttt	ne
  404826:	ea54 0c00 	orrsne.w	ip, r4, r0
  40482a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40482e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404832:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404836:	f000 80e2 	beq.w	4049fe <__adddf3+0x1ee>
  40483a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40483e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404842:	bfb8      	it	lt
  404844:	426d      	neglt	r5, r5
  404846:	dd0c      	ble.n	404862 <__adddf3+0x52>
  404848:	442c      	add	r4, r5
  40484a:	ea80 0202 	eor.w	r2, r0, r2
  40484e:	ea81 0303 	eor.w	r3, r1, r3
  404852:	ea82 0000 	eor.w	r0, r2, r0
  404856:	ea83 0101 	eor.w	r1, r3, r1
  40485a:	ea80 0202 	eor.w	r2, r0, r2
  40485e:	ea81 0303 	eor.w	r3, r1, r3
  404862:	2d36      	cmp	r5, #54	; 0x36
  404864:	bf88      	it	hi
  404866:	bd30      	pophi	{r4, r5, pc}
  404868:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40486c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404870:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404874:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404878:	d002      	beq.n	404880 <__adddf3+0x70>
  40487a:	4240      	negs	r0, r0
  40487c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404880:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404884:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404888:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40488c:	d002      	beq.n	404894 <__adddf3+0x84>
  40488e:	4252      	negs	r2, r2
  404890:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404894:	ea94 0f05 	teq	r4, r5
  404898:	f000 80a7 	beq.w	4049ea <__adddf3+0x1da>
  40489c:	f1a4 0401 	sub.w	r4, r4, #1
  4048a0:	f1d5 0e20 	rsbs	lr, r5, #32
  4048a4:	db0d      	blt.n	4048c2 <__adddf3+0xb2>
  4048a6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4048aa:	fa22 f205 	lsr.w	r2, r2, r5
  4048ae:	1880      	adds	r0, r0, r2
  4048b0:	f141 0100 	adc.w	r1, r1, #0
  4048b4:	fa03 f20e 	lsl.w	r2, r3, lr
  4048b8:	1880      	adds	r0, r0, r2
  4048ba:	fa43 f305 	asr.w	r3, r3, r5
  4048be:	4159      	adcs	r1, r3
  4048c0:	e00e      	b.n	4048e0 <__adddf3+0xd0>
  4048c2:	f1a5 0520 	sub.w	r5, r5, #32
  4048c6:	f10e 0e20 	add.w	lr, lr, #32
  4048ca:	2a01      	cmp	r2, #1
  4048cc:	fa03 fc0e 	lsl.w	ip, r3, lr
  4048d0:	bf28      	it	cs
  4048d2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4048d6:	fa43 f305 	asr.w	r3, r3, r5
  4048da:	18c0      	adds	r0, r0, r3
  4048dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4048e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4048e4:	d507      	bpl.n	4048f6 <__adddf3+0xe6>
  4048e6:	f04f 0e00 	mov.w	lr, #0
  4048ea:	f1dc 0c00 	rsbs	ip, ip, #0
  4048ee:	eb7e 0000 	sbcs.w	r0, lr, r0
  4048f2:	eb6e 0101 	sbc.w	r1, lr, r1
  4048f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4048fa:	d31b      	bcc.n	404934 <__adddf3+0x124>
  4048fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404900:	d30c      	bcc.n	40491c <__adddf3+0x10c>
  404902:	0849      	lsrs	r1, r1, #1
  404904:	ea5f 0030 	movs.w	r0, r0, rrx
  404908:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40490c:	f104 0401 	add.w	r4, r4, #1
  404910:	ea4f 5244 	mov.w	r2, r4, lsl #21
  404914:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  404918:	f080 809a 	bcs.w	404a50 <__adddf3+0x240>
  40491c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404920:	bf08      	it	eq
  404922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404926:	f150 0000 	adcs.w	r0, r0, #0
  40492a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40492e:	ea41 0105 	orr.w	r1, r1, r5
  404932:	bd30      	pop	{r4, r5, pc}
  404934:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404938:	4140      	adcs	r0, r0
  40493a:	eb41 0101 	adc.w	r1, r1, r1
  40493e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404942:	f1a4 0401 	sub.w	r4, r4, #1
  404946:	d1e9      	bne.n	40491c <__adddf3+0x10c>
  404948:	f091 0f00 	teq	r1, #0
  40494c:	bf04      	itt	eq
  40494e:	4601      	moveq	r1, r0
  404950:	2000      	moveq	r0, #0
  404952:	fab1 f381 	clz	r3, r1
  404956:	bf08      	it	eq
  404958:	3320      	addeq	r3, #32
  40495a:	f1a3 030b 	sub.w	r3, r3, #11
  40495e:	f1b3 0220 	subs.w	r2, r3, #32
  404962:	da0c      	bge.n	40497e <__adddf3+0x16e>
  404964:	320c      	adds	r2, #12
  404966:	dd08      	ble.n	40497a <__adddf3+0x16a>
  404968:	f102 0c14 	add.w	ip, r2, #20
  40496c:	f1c2 020c 	rsb	r2, r2, #12
  404970:	fa01 f00c 	lsl.w	r0, r1, ip
  404974:	fa21 f102 	lsr.w	r1, r1, r2
  404978:	e00c      	b.n	404994 <__adddf3+0x184>
  40497a:	f102 0214 	add.w	r2, r2, #20
  40497e:	bfd8      	it	le
  404980:	f1c2 0c20 	rsble	ip, r2, #32
  404984:	fa01 f102 	lsl.w	r1, r1, r2
  404988:	fa20 fc0c 	lsr.w	ip, r0, ip
  40498c:	bfdc      	itt	le
  40498e:	ea41 010c 	orrle.w	r1, r1, ip
  404992:	4090      	lslle	r0, r2
  404994:	1ae4      	subs	r4, r4, r3
  404996:	bfa2      	ittt	ge
  404998:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40499c:	4329      	orrge	r1, r5
  40499e:	bd30      	popge	{r4, r5, pc}
  4049a0:	ea6f 0404 	mvn.w	r4, r4
  4049a4:	3c1f      	subs	r4, #31
  4049a6:	da1c      	bge.n	4049e2 <__adddf3+0x1d2>
  4049a8:	340c      	adds	r4, #12
  4049aa:	dc0e      	bgt.n	4049ca <__adddf3+0x1ba>
  4049ac:	f104 0414 	add.w	r4, r4, #20
  4049b0:	f1c4 0220 	rsb	r2, r4, #32
  4049b4:	fa20 f004 	lsr.w	r0, r0, r4
  4049b8:	fa01 f302 	lsl.w	r3, r1, r2
  4049bc:	ea40 0003 	orr.w	r0, r0, r3
  4049c0:	fa21 f304 	lsr.w	r3, r1, r4
  4049c4:	ea45 0103 	orr.w	r1, r5, r3
  4049c8:	bd30      	pop	{r4, r5, pc}
  4049ca:	f1c4 040c 	rsb	r4, r4, #12
  4049ce:	f1c4 0220 	rsb	r2, r4, #32
  4049d2:	fa20 f002 	lsr.w	r0, r0, r2
  4049d6:	fa01 f304 	lsl.w	r3, r1, r4
  4049da:	ea40 0003 	orr.w	r0, r0, r3
  4049de:	4629      	mov	r1, r5
  4049e0:	bd30      	pop	{r4, r5, pc}
  4049e2:	fa21 f004 	lsr.w	r0, r1, r4
  4049e6:	4629      	mov	r1, r5
  4049e8:	bd30      	pop	{r4, r5, pc}
  4049ea:	f094 0f00 	teq	r4, #0
  4049ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4049f2:	bf06      	itte	eq
  4049f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4049f8:	3401      	addeq	r4, #1
  4049fa:	3d01      	subne	r5, #1
  4049fc:	e74e      	b.n	40489c <__adddf3+0x8c>
  4049fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404a02:	bf18      	it	ne
  404a04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404a08:	d029      	beq.n	404a5e <__adddf3+0x24e>
  404a0a:	ea94 0f05 	teq	r4, r5
  404a0e:	bf08      	it	eq
  404a10:	ea90 0f02 	teqeq	r0, r2
  404a14:	d005      	beq.n	404a22 <__adddf3+0x212>
  404a16:	ea54 0c00 	orrs.w	ip, r4, r0
  404a1a:	bf04      	itt	eq
  404a1c:	4619      	moveq	r1, r3
  404a1e:	4610      	moveq	r0, r2
  404a20:	bd30      	pop	{r4, r5, pc}
  404a22:	ea91 0f03 	teq	r1, r3
  404a26:	bf1e      	ittt	ne
  404a28:	2100      	movne	r1, #0
  404a2a:	2000      	movne	r0, #0
  404a2c:	bd30      	popne	{r4, r5, pc}
  404a2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404a32:	d105      	bne.n	404a40 <__adddf3+0x230>
  404a34:	0040      	lsls	r0, r0, #1
  404a36:	4149      	adcs	r1, r1
  404a38:	bf28      	it	cs
  404a3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404a3e:	bd30      	pop	{r4, r5, pc}
  404a40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404a44:	bf3c      	itt	cc
  404a46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404a4a:	bd30      	popcc	{r4, r5, pc}
  404a4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404a50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404a54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404a58:	f04f 0000 	mov.w	r0, #0
  404a5c:	bd30      	pop	{r4, r5, pc}
  404a5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404a62:	bf1a      	itte	ne
  404a64:	4619      	movne	r1, r3
  404a66:	4610      	movne	r0, r2
  404a68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404a6c:	bf1c      	itt	ne
  404a6e:	460b      	movne	r3, r1
  404a70:	4602      	movne	r2, r0
  404a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404a76:	bf06      	itte	eq
  404a78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404a7c:	ea91 0f03 	teqeq	r1, r3
  404a80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404a84:	bd30      	pop	{r4, r5, pc}
  404a86:	bf00      	nop

00404a88 <__aeabi_ui2d>:
  404a88:	f090 0f00 	teq	r0, #0
  404a8c:	bf04      	itt	eq
  404a8e:	2100      	moveq	r1, #0
  404a90:	4770      	bxeq	lr
  404a92:	b530      	push	{r4, r5, lr}
  404a94:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404a98:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404a9c:	f04f 0500 	mov.w	r5, #0
  404aa0:	f04f 0100 	mov.w	r1, #0
  404aa4:	e750      	b.n	404948 <__adddf3+0x138>
  404aa6:	bf00      	nop

00404aa8 <__aeabi_i2d>:
  404aa8:	f090 0f00 	teq	r0, #0
  404aac:	bf04      	itt	eq
  404aae:	2100      	moveq	r1, #0
  404ab0:	4770      	bxeq	lr
  404ab2:	b530      	push	{r4, r5, lr}
  404ab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404ab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404abc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404ac0:	bf48      	it	mi
  404ac2:	4240      	negmi	r0, r0
  404ac4:	f04f 0100 	mov.w	r1, #0
  404ac8:	e73e      	b.n	404948 <__adddf3+0x138>
  404aca:	bf00      	nop

00404acc <__aeabi_f2d>:
  404acc:	0042      	lsls	r2, r0, #1
  404ace:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404ad2:	ea4f 0131 	mov.w	r1, r1, rrx
  404ad6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404ada:	bf1f      	itttt	ne
  404adc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404ae0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404ae4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404ae8:	4770      	bxne	lr
  404aea:	f092 0f00 	teq	r2, #0
  404aee:	bf14      	ite	ne
  404af0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404af4:	4770      	bxeq	lr
  404af6:	b530      	push	{r4, r5, lr}
  404af8:	f44f 7460 	mov.w	r4, #896	; 0x380
  404afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404b00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404b04:	e720      	b.n	404948 <__adddf3+0x138>
  404b06:	bf00      	nop

00404b08 <__aeabi_ul2d>:
  404b08:	ea50 0201 	orrs.w	r2, r0, r1
  404b0c:	bf08      	it	eq
  404b0e:	4770      	bxeq	lr
  404b10:	b530      	push	{r4, r5, lr}
  404b12:	f04f 0500 	mov.w	r5, #0
  404b16:	e00a      	b.n	404b2e <__aeabi_l2d+0x16>

00404b18 <__aeabi_l2d>:
  404b18:	ea50 0201 	orrs.w	r2, r0, r1
  404b1c:	bf08      	it	eq
  404b1e:	4770      	bxeq	lr
  404b20:	b530      	push	{r4, r5, lr}
  404b22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404b26:	d502      	bpl.n	404b2e <__aeabi_l2d+0x16>
  404b28:	4240      	negs	r0, r0
  404b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404b2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404b32:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404b36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404b3a:	f43f aedc 	beq.w	4048f6 <__adddf3+0xe6>
  404b3e:	f04f 0203 	mov.w	r2, #3
  404b42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404b46:	bf18      	it	ne
  404b48:	3203      	addne	r2, #3
  404b4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404b4e:	bf18      	it	ne
  404b50:	3203      	addne	r2, #3
  404b52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404b56:	f1c2 0320 	rsb	r3, r2, #32
  404b5a:	fa00 fc03 	lsl.w	ip, r0, r3
  404b5e:	fa20 f002 	lsr.w	r0, r0, r2
  404b62:	fa01 fe03 	lsl.w	lr, r1, r3
  404b66:	ea40 000e 	orr.w	r0, r0, lr
  404b6a:	fa21 f102 	lsr.w	r1, r1, r2
  404b6e:	4414      	add	r4, r2
  404b70:	e6c1      	b.n	4048f6 <__adddf3+0xe6>
  404b72:	bf00      	nop

00404b74 <__aeabi_dmul>:
  404b74:	b570      	push	{r4, r5, r6, lr}
  404b76:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404b82:	bf1d      	ittte	ne
  404b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404b88:	ea94 0f0c 	teqne	r4, ip
  404b8c:	ea95 0f0c 	teqne	r5, ip
  404b90:	f000 f8de 	bleq	404d50 <__aeabi_dmul+0x1dc>
  404b94:	442c      	add	r4, r5
  404b96:	ea81 0603 	eor.w	r6, r1, r3
  404b9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404b9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404ba2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404ba6:	bf18      	it	ne
  404ba8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404bac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404bb4:	d038      	beq.n	404c28 <__aeabi_dmul+0xb4>
  404bb6:	fba0 ce02 	umull	ip, lr, r0, r2
  404bba:	f04f 0500 	mov.w	r5, #0
  404bbe:	fbe1 e502 	umlal	lr, r5, r1, r2
  404bc2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404bc6:	fbe0 e503 	umlal	lr, r5, r0, r3
  404bca:	f04f 0600 	mov.w	r6, #0
  404bce:	fbe1 5603 	umlal	r5, r6, r1, r3
  404bd2:	f09c 0f00 	teq	ip, #0
  404bd6:	bf18      	it	ne
  404bd8:	f04e 0e01 	orrne.w	lr, lr, #1
  404bdc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404be0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404be4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404be8:	d204      	bcs.n	404bf4 <__aeabi_dmul+0x80>
  404bea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404bee:	416d      	adcs	r5, r5
  404bf0:	eb46 0606 	adc.w	r6, r6, r6
  404bf4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404bf8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404bfc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404c00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404c04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  404c08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404c0c:	bf88      	it	hi
  404c0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404c12:	d81e      	bhi.n	404c52 <__aeabi_dmul+0xde>
  404c14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404c18:	bf08      	it	eq
  404c1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  404c1e:	f150 0000 	adcs.w	r0, r0, #0
  404c22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404c26:	bd70      	pop	{r4, r5, r6, pc}
  404c28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404c2c:	ea46 0101 	orr.w	r1, r6, r1
  404c30:	ea40 0002 	orr.w	r0, r0, r2
  404c34:	ea81 0103 	eor.w	r1, r1, r3
  404c38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404c3c:	bfc2      	ittt	gt
  404c3e:	ebd4 050c 	rsbsgt	r5, r4, ip
  404c42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404c46:	bd70      	popgt	{r4, r5, r6, pc}
  404c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404c4c:	f04f 0e00 	mov.w	lr, #0
  404c50:	3c01      	subs	r4, #1
  404c52:	f300 80ab 	bgt.w	404dac <__aeabi_dmul+0x238>
  404c56:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404c5a:	bfde      	ittt	le
  404c5c:	2000      	movle	r0, #0
  404c5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404c62:	bd70      	pople	{r4, r5, r6, pc}
  404c64:	f1c4 0400 	rsb	r4, r4, #0
  404c68:	3c20      	subs	r4, #32
  404c6a:	da35      	bge.n	404cd8 <__aeabi_dmul+0x164>
  404c6c:	340c      	adds	r4, #12
  404c6e:	dc1b      	bgt.n	404ca8 <__aeabi_dmul+0x134>
  404c70:	f104 0414 	add.w	r4, r4, #20
  404c74:	f1c4 0520 	rsb	r5, r4, #32
  404c78:	fa00 f305 	lsl.w	r3, r0, r5
  404c7c:	fa20 f004 	lsr.w	r0, r0, r4
  404c80:	fa01 f205 	lsl.w	r2, r1, r5
  404c84:	ea40 0002 	orr.w	r0, r0, r2
  404c88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404c8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404c90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404c94:	fa21 f604 	lsr.w	r6, r1, r4
  404c98:	eb42 0106 	adc.w	r1, r2, r6
  404c9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404ca0:	bf08      	it	eq
  404ca2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404ca6:	bd70      	pop	{r4, r5, r6, pc}
  404ca8:	f1c4 040c 	rsb	r4, r4, #12
  404cac:	f1c4 0520 	rsb	r5, r4, #32
  404cb0:	fa00 f304 	lsl.w	r3, r0, r4
  404cb4:	fa20 f005 	lsr.w	r0, r0, r5
  404cb8:	fa01 f204 	lsl.w	r2, r1, r4
  404cbc:	ea40 0002 	orr.w	r0, r0, r2
  404cc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404cc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404cc8:	f141 0100 	adc.w	r1, r1, #0
  404ccc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404cd0:	bf08      	it	eq
  404cd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404cd6:	bd70      	pop	{r4, r5, r6, pc}
  404cd8:	f1c4 0520 	rsb	r5, r4, #32
  404cdc:	fa00 f205 	lsl.w	r2, r0, r5
  404ce0:	ea4e 0e02 	orr.w	lr, lr, r2
  404ce4:	fa20 f304 	lsr.w	r3, r0, r4
  404ce8:	fa01 f205 	lsl.w	r2, r1, r5
  404cec:	ea43 0302 	orr.w	r3, r3, r2
  404cf0:	fa21 f004 	lsr.w	r0, r1, r4
  404cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404cf8:	fa21 f204 	lsr.w	r2, r1, r4
  404cfc:	ea20 0002 	bic.w	r0, r0, r2
  404d00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404d04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404d08:	bf08      	it	eq
  404d0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404d0e:	bd70      	pop	{r4, r5, r6, pc}
  404d10:	f094 0f00 	teq	r4, #0
  404d14:	d10f      	bne.n	404d36 <__aeabi_dmul+0x1c2>
  404d16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404d1a:	0040      	lsls	r0, r0, #1
  404d1c:	eb41 0101 	adc.w	r1, r1, r1
  404d20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404d24:	bf08      	it	eq
  404d26:	3c01      	subeq	r4, #1
  404d28:	d0f7      	beq.n	404d1a <__aeabi_dmul+0x1a6>
  404d2a:	ea41 0106 	orr.w	r1, r1, r6
  404d2e:	f095 0f00 	teq	r5, #0
  404d32:	bf18      	it	ne
  404d34:	4770      	bxne	lr
  404d36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404d3a:	0052      	lsls	r2, r2, #1
  404d3c:	eb43 0303 	adc.w	r3, r3, r3
  404d40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404d44:	bf08      	it	eq
  404d46:	3d01      	subeq	r5, #1
  404d48:	d0f7      	beq.n	404d3a <__aeabi_dmul+0x1c6>
  404d4a:	ea43 0306 	orr.w	r3, r3, r6
  404d4e:	4770      	bx	lr
  404d50:	ea94 0f0c 	teq	r4, ip
  404d54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404d58:	bf18      	it	ne
  404d5a:	ea95 0f0c 	teqne	r5, ip
  404d5e:	d00c      	beq.n	404d7a <__aeabi_dmul+0x206>
  404d60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404d64:	bf18      	it	ne
  404d66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404d6a:	d1d1      	bne.n	404d10 <__aeabi_dmul+0x19c>
  404d6c:	ea81 0103 	eor.w	r1, r1, r3
  404d70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404d74:	f04f 0000 	mov.w	r0, #0
  404d78:	bd70      	pop	{r4, r5, r6, pc}
  404d7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404d7e:	bf06      	itte	eq
  404d80:	4610      	moveq	r0, r2
  404d82:	4619      	moveq	r1, r3
  404d84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404d88:	d019      	beq.n	404dbe <__aeabi_dmul+0x24a>
  404d8a:	ea94 0f0c 	teq	r4, ip
  404d8e:	d102      	bne.n	404d96 <__aeabi_dmul+0x222>
  404d90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404d94:	d113      	bne.n	404dbe <__aeabi_dmul+0x24a>
  404d96:	ea95 0f0c 	teq	r5, ip
  404d9a:	d105      	bne.n	404da8 <__aeabi_dmul+0x234>
  404d9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404da0:	bf1c      	itt	ne
  404da2:	4610      	movne	r0, r2
  404da4:	4619      	movne	r1, r3
  404da6:	d10a      	bne.n	404dbe <__aeabi_dmul+0x24a>
  404da8:	ea81 0103 	eor.w	r1, r1, r3
  404dac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404db0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404db4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404db8:	f04f 0000 	mov.w	r0, #0
  404dbc:	bd70      	pop	{r4, r5, r6, pc}
  404dbe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404dc2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404dc6:	bd70      	pop	{r4, r5, r6, pc}

00404dc8 <__aeabi_ddiv>:
  404dc8:	b570      	push	{r4, r5, r6, lr}
  404dca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404dce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404dd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404dd6:	bf1d      	ittte	ne
  404dd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404ddc:	ea94 0f0c 	teqne	r4, ip
  404de0:	ea95 0f0c 	teqne	r5, ip
  404de4:	f000 f8a7 	bleq	404f36 <__aeabi_ddiv+0x16e>
  404de8:	eba4 0405 	sub.w	r4, r4, r5
  404dec:	ea81 0e03 	eor.w	lr, r1, r3
  404df0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404df4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404df8:	f000 8088 	beq.w	404f0c <__aeabi_ddiv+0x144>
  404dfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404e00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404e04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404e08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404e0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404e10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404e14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404e18:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404e1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404e20:	429d      	cmp	r5, r3
  404e22:	bf08      	it	eq
  404e24:	4296      	cmpeq	r6, r2
  404e26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404e2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404e2e:	d202      	bcs.n	404e36 <__aeabi_ddiv+0x6e>
  404e30:	085b      	lsrs	r3, r3, #1
  404e32:	ea4f 0232 	mov.w	r2, r2, rrx
  404e36:	1ab6      	subs	r6, r6, r2
  404e38:	eb65 0503 	sbc.w	r5, r5, r3
  404e3c:	085b      	lsrs	r3, r3, #1
  404e3e:	ea4f 0232 	mov.w	r2, r2, rrx
  404e42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404e46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404e4a:	ebb6 0e02 	subs.w	lr, r6, r2
  404e4e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404e52:	bf22      	ittt	cs
  404e54:	1ab6      	subcs	r6, r6, r2
  404e56:	4675      	movcs	r5, lr
  404e58:	ea40 000c 	orrcs.w	r0, r0, ip
  404e5c:	085b      	lsrs	r3, r3, #1
  404e5e:	ea4f 0232 	mov.w	r2, r2, rrx
  404e62:	ebb6 0e02 	subs.w	lr, r6, r2
  404e66:	eb75 0e03 	sbcs.w	lr, r5, r3
  404e6a:	bf22      	ittt	cs
  404e6c:	1ab6      	subcs	r6, r6, r2
  404e6e:	4675      	movcs	r5, lr
  404e70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404e74:	085b      	lsrs	r3, r3, #1
  404e76:	ea4f 0232 	mov.w	r2, r2, rrx
  404e7a:	ebb6 0e02 	subs.w	lr, r6, r2
  404e7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404e82:	bf22      	ittt	cs
  404e84:	1ab6      	subcs	r6, r6, r2
  404e86:	4675      	movcs	r5, lr
  404e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404e8c:	085b      	lsrs	r3, r3, #1
  404e8e:	ea4f 0232 	mov.w	r2, r2, rrx
  404e92:	ebb6 0e02 	subs.w	lr, r6, r2
  404e96:	eb75 0e03 	sbcs.w	lr, r5, r3
  404e9a:	bf22      	ittt	cs
  404e9c:	1ab6      	subcs	r6, r6, r2
  404e9e:	4675      	movcs	r5, lr
  404ea0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404ea4:	ea55 0e06 	orrs.w	lr, r5, r6
  404ea8:	d018      	beq.n	404edc <__aeabi_ddiv+0x114>
  404eaa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404eae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404eb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404eb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404eba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404ebe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404ec2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404ec6:	d1c0      	bne.n	404e4a <__aeabi_ddiv+0x82>
  404ec8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404ecc:	d10b      	bne.n	404ee6 <__aeabi_ddiv+0x11e>
  404ece:	ea41 0100 	orr.w	r1, r1, r0
  404ed2:	f04f 0000 	mov.w	r0, #0
  404ed6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404eda:	e7b6      	b.n	404e4a <__aeabi_ddiv+0x82>
  404edc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404ee0:	bf04      	itt	eq
  404ee2:	4301      	orreq	r1, r0
  404ee4:	2000      	moveq	r0, #0
  404ee6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404eea:	bf88      	it	hi
  404eec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404ef0:	f63f aeaf 	bhi.w	404c52 <__aeabi_dmul+0xde>
  404ef4:	ebb5 0c03 	subs.w	ip, r5, r3
  404ef8:	bf04      	itt	eq
  404efa:	ebb6 0c02 	subseq.w	ip, r6, r2
  404efe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404f02:	f150 0000 	adcs.w	r0, r0, #0
  404f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404f0a:	bd70      	pop	{r4, r5, r6, pc}
  404f0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404f10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404f14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404f18:	bfc2      	ittt	gt
  404f1a:	ebd4 050c 	rsbsgt	r5, r4, ip
  404f1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404f22:	bd70      	popgt	{r4, r5, r6, pc}
  404f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404f28:	f04f 0e00 	mov.w	lr, #0
  404f2c:	3c01      	subs	r4, #1
  404f2e:	e690      	b.n	404c52 <__aeabi_dmul+0xde>
  404f30:	ea45 0e06 	orr.w	lr, r5, r6
  404f34:	e68d      	b.n	404c52 <__aeabi_dmul+0xde>
  404f36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404f3a:	ea94 0f0c 	teq	r4, ip
  404f3e:	bf08      	it	eq
  404f40:	ea95 0f0c 	teqeq	r5, ip
  404f44:	f43f af3b 	beq.w	404dbe <__aeabi_dmul+0x24a>
  404f48:	ea94 0f0c 	teq	r4, ip
  404f4c:	d10a      	bne.n	404f64 <__aeabi_ddiv+0x19c>
  404f4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404f52:	f47f af34 	bne.w	404dbe <__aeabi_dmul+0x24a>
  404f56:	ea95 0f0c 	teq	r5, ip
  404f5a:	f47f af25 	bne.w	404da8 <__aeabi_dmul+0x234>
  404f5e:	4610      	mov	r0, r2
  404f60:	4619      	mov	r1, r3
  404f62:	e72c      	b.n	404dbe <__aeabi_dmul+0x24a>
  404f64:	ea95 0f0c 	teq	r5, ip
  404f68:	d106      	bne.n	404f78 <__aeabi_ddiv+0x1b0>
  404f6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404f6e:	f43f aefd 	beq.w	404d6c <__aeabi_dmul+0x1f8>
  404f72:	4610      	mov	r0, r2
  404f74:	4619      	mov	r1, r3
  404f76:	e722      	b.n	404dbe <__aeabi_dmul+0x24a>
  404f78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404f7c:	bf18      	it	ne
  404f7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404f82:	f47f aec5 	bne.w	404d10 <__aeabi_dmul+0x19c>
  404f86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404f8a:	f47f af0d 	bne.w	404da8 <__aeabi_dmul+0x234>
  404f8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404f92:	f47f aeeb 	bne.w	404d6c <__aeabi_dmul+0x1f8>
  404f96:	e712      	b.n	404dbe <__aeabi_dmul+0x24a>

00404f98 <__gedf2>:
  404f98:	f04f 3cff 	mov.w	ip, #4294967295
  404f9c:	e006      	b.n	404fac <__cmpdf2+0x4>
  404f9e:	bf00      	nop

00404fa0 <__ledf2>:
  404fa0:	f04f 0c01 	mov.w	ip, #1
  404fa4:	e002      	b.n	404fac <__cmpdf2+0x4>
  404fa6:	bf00      	nop

00404fa8 <__cmpdf2>:
  404fa8:	f04f 0c01 	mov.w	ip, #1
  404fac:	f84d cd04 	str.w	ip, [sp, #-4]!
  404fb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404fb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404fb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404fbc:	bf18      	it	ne
  404fbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404fc2:	d01b      	beq.n	404ffc <__cmpdf2+0x54>
  404fc4:	b001      	add	sp, #4
  404fc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  404fca:	bf0c      	ite	eq
  404fcc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404fd0:	ea91 0f03 	teqne	r1, r3
  404fd4:	bf02      	ittt	eq
  404fd6:	ea90 0f02 	teqeq	r0, r2
  404fda:	2000      	moveq	r0, #0
  404fdc:	4770      	bxeq	lr
  404fde:	f110 0f00 	cmn.w	r0, #0
  404fe2:	ea91 0f03 	teq	r1, r3
  404fe6:	bf58      	it	pl
  404fe8:	4299      	cmppl	r1, r3
  404fea:	bf08      	it	eq
  404fec:	4290      	cmpeq	r0, r2
  404fee:	bf2c      	ite	cs
  404ff0:	17d8      	asrcs	r0, r3, #31
  404ff2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  404ff6:	f040 0001 	orr.w	r0, r0, #1
  404ffa:	4770      	bx	lr
  404ffc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405000:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405004:	d102      	bne.n	40500c <__cmpdf2+0x64>
  405006:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40500a:	d107      	bne.n	40501c <__cmpdf2+0x74>
  40500c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405014:	d1d6      	bne.n	404fc4 <__cmpdf2+0x1c>
  405016:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40501a:	d0d3      	beq.n	404fc4 <__cmpdf2+0x1c>
  40501c:	f85d 0b04 	ldr.w	r0, [sp], #4
  405020:	4770      	bx	lr
  405022:	bf00      	nop

00405024 <__aeabi_cdrcmple>:
  405024:	4684      	mov	ip, r0
  405026:	4610      	mov	r0, r2
  405028:	4662      	mov	r2, ip
  40502a:	468c      	mov	ip, r1
  40502c:	4619      	mov	r1, r3
  40502e:	4663      	mov	r3, ip
  405030:	e000      	b.n	405034 <__aeabi_cdcmpeq>
  405032:	bf00      	nop

00405034 <__aeabi_cdcmpeq>:
  405034:	b501      	push	{r0, lr}
  405036:	f7ff ffb7 	bl	404fa8 <__cmpdf2>
  40503a:	2800      	cmp	r0, #0
  40503c:	bf48      	it	mi
  40503e:	f110 0f00 	cmnmi.w	r0, #0
  405042:	bd01      	pop	{r0, pc}

00405044 <__aeabi_dcmpeq>:
  405044:	f84d ed08 	str.w	lr, [sp, #-8]!
  405048:	f7ff fff4 	bl	405034 <__aeabi_cdcmpeq>
  40504c:	bf0c      	ite	eq
  40504e:	2001      	moveq	r0, #1
  405050:	2000      	movne	r0, #0
  405052:	f85d fb08 	ldr.w	pc, [sp], #8
  405056:	bf00      	nop

00405058 <__aeabi_dcmplt>:
  405058:	f84d ed08 	str.w	lr, [sp, #-8]!
  40505c:	f7ff ffea 	bl	405034 <__aeabi_cdcmpeq>
  405060:	bf34      	ite	cc
  405062:	2001      	movcc	r0, #1
  405064:	2000      	movcs	r0, #0
  405066:	f85d fb08 	ldr.w	pc, [sp], #8
  40506a:	bf00      	nop

0040506c <__aeabi_dcmple>:
  40506c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405070:	f7ff ffe0 	bl	405034 <__aeabi_cdcmpeq>
  405074:	bf94      	ite	ls
  405076:	2001      	movls	r0, #1
  405078:	2000      	movhi	r0, #0
  40507a:	f85d fb08 	ldr.w	pc, [sp], #8
  40507e:	bf00      	nop

00405080 <__aeabi_dcmpge>:
  405080:	f84d ed08 	str.w	lr, [sp, #-8]!
  405084:	f7ff ffce 	bl	405024 <__aeabi_cdrcmple>
  405088:	bf94      	ite	ls
  40508a:	2001      	movls	r0, #1
  40508c:	2000      	movhi	r0, #0
  40508e:	f85d fb08 	ldr.w	pc, [sp], #8
  405092:	bf00      	nop

00405094 <__aeabi_dcmpgt>:
  405094:	f84d ed08 	str.w	lr, [sp, #-8]!
  405098:	f7ff ffc4 	bl	405024 <__aeabi_cdrcmple>
  40509c:	bf34      	ite	cc
  40509e:	2001      	movcc	r0, #1
  4050a0:	2000      	movcs	r0, #0
  4050a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4050a6:	bf00      	nop

004050a8 <__aeabi_d2uiz>:
  4050a8:	004a      	lsls	r2, r1, #1
  4050aa:	d211      	bcs.n	4050d0 <__aeabi_d2uiz+0x28>
  4050ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4050b0:	d211      	bcs.n	4050d6 <__aeabi_d2uiz+0x2e>
  4050b2:	d50d      	bpl.n	4050d0 <__aeabi_d2uiz+0x28>
  4050b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4050b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4050bc:	d40e      	bmi.n	4050dc <__aeabi_d2uiz+0x34>
  4050be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4050c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4050c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4050ca:	fa23 f002 	lsr.w	r0, r3, r2
  4050ce:	4770      	bx	lr
  4050d0:	f04f 0000 	mov.w	r0, #0
  4050d4:	4770      	bx	lr
  4050d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4050da:	d102      	bne.n	4050e2 <__aeabi_d2uiz+0x3a>
  4050dc:	f04f 30ff 	mov.w	r0, #4294967295
  4050e0:	4770      	bx	lr
  4050e2:	f04f 0000 	mov.w	r0, #0
  4050e6:	4770      	bx	lr

004050e8 <__libc_init_array>:
  4050e8:	b570      	push	{r4, r5, r6, lr}
  4050ea:	4e0f      	ldr	r6, [pc, #60]	; (405128 <__libc_init_array+0x40>)
  4050ec:	4d0f      	ldr	r5, [pc, #60]	; (40512c <__libc_init_array+0x44>)
  4050ee:	1b76      	subs	r6, r6, r5
  4050f0:	10b6      	asrs	r6, r6, #2
  4050f2:	d007      	beq.n	405104 <__libc_init_array+0x1c>
  4050f4:	3d04      	subs	r5, #4
  4050f6:	2400      	movs	r4, #0
  4050f8:	3401      	adds	r4, #1
  4050fa:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4050fe:	4798      	blx	r3
  405100:	42a6      	cmp	r6, r4
  405102:	d1f9      	bne.n	4050f8 <__libc_init_array+0x10>
  405104:	4e0a      	ldr	r6, [pc, #40]	; (405130 <__libc_init_array+0x48>)
  405106:	4d0b      	ldr	r5, [pc, #44]	; (405134 <__libc_init_array+0x4c>)
  405108:	1b76      	subs	r6, r6, r5
  40510a:	f004 fe1b 	bl	409d44 <_init>
  40510e:	10b6      	asrs	r6, r6, #2
  405110:	d008      	beq.n	405124 <__libc_init_array+0x3c>
  405112:	3d04      	subs	r5, #4
  405114:	2400      	movs	r4, #0
  405116:	3401      	adds	r4, #1
  405118:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40511c:	4798      	blx	r3
  40511e:	42a6      	cmp	r6, r4
  405120:	d1f9      	bne.n	405116 <__libc_init_array+0x2e>
  405122:	bd70      	pop	{r4, r5, r6, pc}
  405124:	bd70      	pop	{r4, r5, r6, pc}
  405126:	bf00      	nop
  405128:	00409d50 	.word	0x00409d50
  40512c:	00409d50 	.word	0x00409d50
  405130:	00409d58 	.word	0x00409d58
  405134:	00409d50 	.word	0x00409d50

00405138 <memset>:
  405138:	b4f0      	push	{r4, r5, r6, r7}
  40513a:	0784      	lsls	r4, r0, #30
  40513c:	d043      	beq.n	4051c6 <memset+0x8e>
  40513e:	1e54      	subs	r4, r2, #1
  405140:	2a00      	cmp	r2, #0
  405142:	d03e      	beq.n	4051c2 <memset+0x8a>
  405144:	b2cd      	uxtb	r5, r1
  405146:	4603      	mov	r3, r0
  405148:	e003      	b.n	405152 <memset+0x1a>
  40514a:	1e62      	subs	r2, r4, #1
  40514c:	2c00      	cmp	r4, #0
  40514e:	d038      	beq.n	4051c2 <memset+0x8a>
  405150:	4614      	mov	r4, r2
  405152:	f803 5b01 	strb.w	r5, [r3], #1
  405156:	079a      	lsls	r2, r3, #30
  405158:	d1f7      	bne.n	40514a <memset+0x12>
  40515a:	2c03      	cmp	r4, #3
  40515c:	d92a      	bls.n	4051b4 <memset+0x7c>
  40515e:	b2cd      	uxtb	r5, r1
  405160:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405164:	2c0f      	cmp	r4, #15
  405166:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40516a:	d915      	bls.n	405198 <memset+0x60>
  40516c:	f1a4 0710 	sub.w	r7, r4, #16
  405170:	093f      	lsrs	r7, r7, #4
  405172:	f103 0610 	add.w	r6, r3, #16
  405176:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40517a:	461a      	mov	r2, r3
  40517c:	6015      	str	r5, [r2, #0]
  40517e:	6055      	str	r5, [r2, #4]
  405180:	6095      	str	r5, [r2, #8]
  405182:	60d5      	str	r5, [r2, #12]
  405184:	3210      	adds	r2, #16
  405186:	42b2      	cmp	r2, r6
  405188:	d1f8      	bne.n	40517c <memset+0x44>
  40518a:	f004 040f 	and.w	r4, r4, #15
  40518e:	3701      	adds	r7, #1
  405190:	2c03      	cmp	r4, #3
  405192:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  405196:	d90d      	bls.n	4051b4 <memset+0x7c>
  405198:	461e      	mov	r6, r3
  40519a:	4622      	mov	r2, r4
  40519c:	3a04      	subs	r2, #4
  40519e:	2a03      	cmp	r2, #3
  4051a0:	f846 5b04 	str.w	r5, [r6], #4
  4051a4:	d8fa      	bhi.n	40519c <memset+0x64>
  4051a6:	1f22      	subs	r2, r4, #4
  4051a8:	f022 0203 	bic.w	r2, r2, #3
  4051ac:	3204      	adds	r2, #4
  4051ae:	4413      	add	r3, r2
  4051b0:	f004 0403 	and.w	r4, r4, #3
  4051b4:	b12c      	cbz	r4, 4051c2 <memset+0x8a>
  4051b6:	b2c9      	uxtb	r1, r1
  4051b8:	441c      	add	r4, r3
  4051ba:	f803 1b01 	strb.w	r1, [r3], #1
  4051be:	42a3      	cmp	r3, r4
  4051c0:	d1fb      	bne.n	4051ba <memset+0x82>
  4051c2:	bcf0      	pop	{r4, r5, r6, r7}
  4051c4:	4770      	bx	lr
  4051c6:	4614      	mov	r4, r2
  4051c8:	4603      	mov	r3, r0
  4051ca:	e7c6      	b.n	40515a <memset+0x22>

004051cc <sprintf>:
  4051cc:	b40e      	push	{r1, r2, r3}
  4051ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  4051d0:	b09c      	sub	sp, #112	; 0x70
  4051d2:	ab21      	add	r3, sp, #132	; 0x84
  4051d4:	490f      	ldr	r1, [pc, #60]	; (405214 <sprintf+0x48>)
  4051d6:	f853 2b04 	ldr.w	r2, [r3], #4
  4051da:	9301      	str	r3, [sp, #4]
  4051dc:	4605      	mov	r5, r0
  4051de:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4051e2:	6808      	ldr	r0, [r1, #0]
  4051e4:	9502      	str	r5, [sp, #8]
  4051e6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4051ea:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4051ee:	a902      	add	r1, sp, #8
  4051f0:	9506      	str	r5, [sp, #24]
  4051f2:	f8ad 7014 	strh.w	r7, [sp, #20]
  4051f6:	9404      	str	r4, [sp, #16]
  4051f8:	9407      	str	r4, [sp, #28]
  4051fa:	f8ad 6016 	strh.w	r6, [sp, #22]
  4051fe:	f000 f83b 	bl	405278 <_svfprintf_r>
  405202:	9b02      	ldr	r3, [sp, #8]
  405204:	2200      	movs	r2, #0
  405206:	701a      	strb	r2, [r3, #0]
  405208:	b01c      	add	sp, #112	; 0x70
  40520a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40520e:	b003      	add	sp, #12
  405210:	4770      	bx	lr
  405212:	bf00      	nop
  405214:	20000868 	.word	0x20000868

00405218 <strlen>:
  405218:	f020 0103 	bic.w	r1, r0, #3
  40521c:	f010 0003 	ands.w	r0, r0, #3
  405220:	f1c0 0000 	rsb	r0, r0, #0
  405224:	f851 3b04 	ldr.w	r3, [r1], #4
  405228:	f100 0c04 	add.w	ip, r0, #4
  40522c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  405230:	f06f 0200 	mvn.w	r2, #0
  405234:	bf1c      	itt	ne
  405236:	fa22 f20c 	lsrne.w	r2, r2, ip
  40523a:	4313      	orrne	r3, r2
  40523c:	f04f 0c01 	mov.w	ip, #1
  405240:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  405244:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  405248:	eba3 020c 	sub.w	r2, r3, ip
  40524c:	ea22 0203 	bic.w	r2, r2, r3
  405250:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  405254:	bf04      	itt	eq
  405256:	f851 3b04 	ldreq.w	r3, [r1], #4
  40525a:	3004      	addeq	r0, #4
  40525c:	d0f4      	beq.n	405248 <strlen+0x30>
  40525e:	f013 0fff 	tst.w	r3, #255	; 0xff
  405262:	bf1f      	itttt	ne
  405264:	3001      	addne	r0, #1
  405266:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40526a:	3001      	addne	r0, #1
  40526c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  405270:	bf18      	it	ne
  405272:	3001      	addne	r0, #1
  405274:	4770      	bx	lr
  405276:	bf00      	nop

00405278 <_svfprintf_r>:
  405278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40527c:	b0c9      	sub	sp, #292	; 0x124
  40527e:	4691      	mov	r9, r2
  405280:	9310      	str	r3, [sp, #64]	; 0x40
  405282:	910c      	str	r1, [sp, #48]	; 0x30
  405284:	900d      	str	r0, [sp, #52]	; 0x34
  405286:	f002 fb6b 	bl	407960 <_localeconv_r>
  40528a:	6800      	ldr	r0, [r0, #0]
  40528c:	9015      	str	r0, [sp, #84]	; 0x54
  40528e:	f7ff ffc3 	bl	405218 <strlen>
  405292:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405294:	9018      	str	r0, [sp, #96]	; 0x60
  405296:	89a3      	ldrh	r3, [r4, #12]
  405298:	061a      	lsls	r2, r3, #24
  40529a:	d503      	bpl.n	4052a4 <_svfprintf_r+0x2c>
  40529c:	6923      	ldr	r3, [r4, #16]
  40529e:	2b00      	cmp	r3, #0
  4052a0:	f001 808d 	beq.w	4063be <_svfprintf_r+0x1146>
  4052a4:	ac38      	add	r4, sp, #224	; 0xe0
  4052a6:	46a4      	mov	ip, r4
  4052a8:	9408      	str	r4, [sp, #32]
  4052aa:	942b      	str	r4, [sp, #172]	; 0xac
  4052ac:	2500      	movs	r5, #0
  4052ae:	2400      	movs	r4, #0
  4052b0:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  4052b4:	2300      	movs	r3, #0
  4052b6:	9311      	str	r3, [sp, #68]	; 0x44
  4052b8:	932d      	str	r3, [sp, #180]	; 0xb4
  4052ba:	932c      	str	r3, [sp, #176]	; 0xb0
  4052bc:	931a      	str	r3, [sp, #104]	; 0x68
  4052be:	9319      	str	r3, [sp, #100]	; 0x64
  4052c0:	930e      	str	r3, [sp, #56]	; 0x38
  4052c2:	4666      	mov	r6, ip
  4052c4:	f899 3000 	ldrb.w	r3, [r9]
  4052c8:	2b00      	cmp	r3, #0
  4052ca:	f000 80f8 	beq.w	4054be <_svfprintf_r+0x246>
  4052ce:	2b25      	cmp	r3, #37	; 0x25
  4052d0:	f000 80f5 	beq.w	4054be <_svfprintf_r+0x246>
  4052d4:	f109 0201 	add.w	r2, r9, #1
  4052d8:	e001      	b.n	4052de <_svfprintf_r+0x66>
  4052da:	2b25      	cmp	r3, #37	; 0x25
  4052dc:	d004      	beq.n	4052e8 <_svfprintf_r+0x70>
  4052de:	4614      	mov	r4, r2
  4052e0:	3201      	adds	r2, #1
  4052e2:	7823      	ldrb	r3, [r4, #0]
  4052e4:	2b00      	cmp	r3, #0
  4052e6:	d1f8      	bne.n	4052da <_svfprintf_r+0x62>
  4052e8:	ebc9 0504 	rsb	r5, r9, r4
  4052ec:	b17d      	cbz	r5, 40530e <_svfprintf_r+0x96>
  4052ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4052f0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4052f2:	f8c6 9000 	str.w	r9, [r6]
  4052f6:	3301      	adds	r3, #1
  4052f8:	442a      	add	r2, r5
  4052fa:	2b07      	cmp	r3, #7
  4052fc:	6075      	str	r5, [r6, #4]
  4052fe:	922d      	str	r2, [sp, #180]	; 0xb4
  405300:	932c      	str	r3, [sp, #176]	; 0xb0
  405302:	f300 80c2 	bgt.w	40548a <_svfprintf_r+0x212>
  405306:	3608      	adds	r6, #8
  405308:	980e      	ldr	r0, [sp, #56]	; 0x38
  40530a:	4428      	add	r0, r5
  40530c:	900e      	str	r0, [sp, #56]	; 0x38
  40530e:	7823      	ldrb	r3, [r4, #0]
  405310:	2b00      	cmp	r3, #0
  405312:	f000 80c2 	beq.w	40549a <_svfprintf_r+0x222>
  405316:	2300      	movs	r3, #0
  405318:	f894 8001 	ldrb.w	r8, [r4, #1]
  40531c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  405320:	461a      	mov	r2, r3
  405322:	930f      	str	r3, [sp, #60]	; 0x3c
  405324:	9309      	str	r3, [sp, #36]	; 0x24
  405326:	f104 0901 	add.w	r9, r4, #1
  40532a:	f04f 34ff 	mov.w	r4, #4294967295
  40532e:	940a      	str	r4, [sp, #40]	; 0x28
  405330:	f109 0901 	add.w	r9, r9, #1
  405334:	f1a8 0320 	sub.w	r3, r8, #32
  405338:	2b58      	cmp	r3, #88	; 0x58
  40533a:	f200 83c7 	bhi.w	405acc <_svfprintf_r+0x854>
  40533e:	e8df f013 	tbh	[pc, r3, lsl #1]
  405342:	026a      	.short	0x026a
  405344:	03c503c5 	.word	0x03c503c5
  405348:	03c50271 	.word	0x03c50271
  40534c:	03c503c5 	.word	0x03c503c5
  405350:	03c503c5 	.word	0x03c503c5
  405354:	031403c5 	.word	0x031403c5
  405358:	03c50364 	.word	0x03c50364
  40535c:	00c0009d 	.word	0x00c0009d
  405360:	027803c5 	.word	0x027803c5
  405364:	027f027f 	.word	0x027f027f
  405368:	027f027f 	.word	0x027f027f
  40536c:	027f027f 	.word	0x027f027f
  405370:	027f027f 	.word	0x027f027f
  405374:	03c5027f 	.word	0x03c5027f
  405378:	03c503c5 	.word	0x03c503c5
  40537c:	03c503c5 	.word	0x03c503c5
  405380:	03c503c5 	.word	0x03c503c5
  405384:	03c503c5 	.word	0x03c503c5
  405388:	029003c5 	.word	0x029003c5
  40538c:	03c5036f 	.word	0x03c5036f
  405390:	03c5036f 	.word	0x03c5036f
  405394:	03c503c5 	.word	0x03c503c5
  405398:	036803c5 	.word	0x036803c5
  40539c:	03c503c5 	.word	0x03c503c5
  4053a0:	03c50078 	.word	0x03c50078
  4053a4:	03c503c5 	.word	0x03c503c5
  4053a8:	03c503c5 	.word	0x03c503c5
  4053ac:	03c50059 	.word	0x03c50059
  4053b0:	02af03c5 	.word	0x02af03c5
  4053b4:	03c503c5 	.word	0x03c503c5
  4053b8:	03c503c5 	.word	0x03c503c5
  4053bc:	03c503c5 	.word	0x03c503c5
  4053c0:	03c503c5 	.word	0x03c503c5
  4053c4:	03c503c5 	.word	0x03c503c5
  4053c8:	03480337 	.word	0x03480337
  4053cc:	036f036f 	.word	0x036f036f
  4053d0:	02ff036f 	.word	0x02ff036f
  4053d4:	03c50348 	.word	0x03c50348
  4053d8:	030803c5 	.word	0x030803c5
  4053dc:	02c503c5 	.word	0x02c503c5
  4053e0:	0321007c 	.word	0x0321007c
  4053e4:	03c503a5 	.word	0x03c503a5
  4053e8:	03c502d9 	.word	0x03c502d9
  4053ec:	03c5005f 	.word	0x03c5005f
  4053f0:	00de03c5 	.word	0x00de03c5
  4053f4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4053f8:	f04c 0c10 	orr.w	ip, ip, #16
  4053fc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  405400:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405402:	06a2      	lsls	r2, r4, #26
  405404:	f100 8356 	bmi.w	405ab4 <_svfprintf_r+0x83c>
  405408:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40540a:	06e3      	lsls	r3, r4, #27
  40540c:	f100 85e0 	bmi.w	405fd0 <_svfprintf_r+0xd58>
  405410:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  405414:	f01c 0f40 	tst.w	ip, #64	; 0x40
  405418:	f000 85da 	beq.w	405fd0 <_svfprintf_r+0xd58>
  40541c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  405420:	f8bc 4000 	ldrh.w	r4, [ip]
  405424:	f10c 0c04 	add.w	ip, ip, #4
  405428:	2500      	movs	r5, #0
  40542a:	2301      	movs	r3, #1
  40542c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405430:	e08c      	b.n	40554c <_svfprintf_r+0x2d4>
  405432:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405434:	f045 0510 	orr.w	r5, r5, #16
  405438:	9509      	str	r5, [sp, #36]	; 0x24
  40543a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40543e:	f01c 0320 	ands.w	r3, ip, #32
  405442:	f040 832c 	bne.w	405a9e <_svfprintf_r+0x826>
  405446:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40544a:	f01c 0210 	ands.w	r2, ip, #16
  40544e:	f040 85b8 	bne.w	405fc2 <_svfprintf_r+0xd4a>
  405452:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  405456:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40545a:	f000 85b2 	beq.w	405fc2 <_svfprintf_r+0xd4a>
  40545e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  405462:	f8bc 4000 	ldrh.w	r4, [ip]
  405466:	f10c 0c04 	add.w	ip, ip, #4
  40546a:	4613      	mov	r3, r2
  40546c:	2500      	movs	r5, #0
  40546e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405472:	e06b      	b.n	40554c <_svfprintf_r+0x2d4>
  405474:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  405476:	9310      	str	r3, [sp, #64]	; 0x40
  405478:	4264      	negs	r4, r4
  40547a:	940f      	str	r4, [sp, #60]	; 0x3c
  40547c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40547e:	f045 0504 	orr.w	r5, r5, #4
  405482:	9509      	str	r5, [sp, #36]	; 0x24
  405484:	f899 8000 	ldrb.w	r8, [r9]
  405488:	e752      	b.n	405330 <_svfprintf_r+0xb8>
  40548a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40548c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40548e:	aa2b      	add	r2, sp, #172	; 0xac
  405490:	f003 fb76 	bl	408b80 <__ssprint_r>
  405494:	b940      	cbnz	r0, 4054a8 <_svfprintf_r+0x230>
  405496:	ae38      	add	r6, sp, #224	; 0xe0
  405498:	e736      	b.n	405308 <_svfprintf_r+0x90>
  40549a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40549c:	b123      	cbz	r3, 4054a8 <_svfprintf_r+0x230>
  40549e:	980d      	ldr	r0, [sp, #52]	; 0x34
  4054a0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4054a2:	aa2b      	add	r2, sp, #172	; 0xac
  4054a4:	f003 fb6c 	bl	408b80 <__ssprint_r>
  4054a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4054aa:	980e      	ldr	r0, [sp, #56]	; 0x38
  4054ac:	89a3      	ldrh	r3, [r4, #12]
  4054ae:	f013 0f40 	tst.w	r3, #64	; 0x40
  4054b2:	bf18      	it	ne
  4054b4:	f04f 30ff 	movne.w	r0, #4294967295
  4054b8:	b049      	add	sp, #292	; 0x124
  4054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054be:	464c      	mov	r4, r9
  4054c0:	e725      	b.n	40530e <_svfprintf_r+0x96>
  4054c2:	f899 8000 	ldrb.w	r8, [r9]
  4054c6:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  4054ca:	f109 0001 	add.w	r0, r9, #1
  4054ce:	f001 8118 	beq.w	406702 <_svfprintf_r+0x148a>
  4054d2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  4054d6:	2b09      	cmp	r3, #9
  4054d8:	bf98      	it	ls
  4054da:	2100      	movls	r1, #0
  4054dc:	f201 8077 	bhi.w	4065ce <_svfprintf_r+0x1356>
  4054e0:	f810 8b01 	ldrb.w	r8, [r0], #1
  4054e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4054e8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  4054ec:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  4054f0:	2b09      	cmp	r3, #9
  4054f2:	d9f5      	bls.n	4054e0 <_svfprintf_r+0x268>
  4054f4:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  4054f8:	910a      	str	r1, [sp, #40]	; 0x28
  4054fa:	4681      	mov	r9, r0
  4054fc:	e71a      	b.n	405334 <_svfprintf_r+0xbc>
  4054fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405500:	4ca1      	ldr	r4, [pc, #644]	; (405788 <_svfprintf_r+0x510>)
  405502:	941a      	str	r4, [sp, #104]	; 0x68
  405504:	06af      	lsls	r7, r5, #26
  405506:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40550a:	f140 81d1 	bpl.w	4058b0 <_svfprintf_r+0x638>
  40550e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  405512:	f10c 0307 	add.w	r3, ip, #7
  405516:	f023 0307 	bic.w	r3, r3, #7
  40551a:	f103 0408 	add.w	r4, r3, #8
  40551e:	9410      	str	r4, [sp, #64]	; 0x40
  405520:	e9d3 4500 	ldrd	r4, r5, [r3]
  405524:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  405528:	f01c 0f01 	tst.w	ip, #1
  40552c:	f000 8464 	beq.w	405df8 <_svfprintf_r+0xb80>
  405530:	ea54 0005 	orrs.w	r0, r4, r5
  405534:	f000 8460 	beq.w	405df8 <_svfprintf_r+0xb80>
  405538:	2330      	movs	r3, #48	; 0x30
  40553a:	f04c 0c02 	orr.w	ip, ip, #2
  40553e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  405542:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  405546:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40554a:	2302      	movs	r3, #2
  40554c:	f04f 0a00 	mov.w	sl, #0
  405550:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  405554:	990a      	ldr	r1, [sp, #40]	; 0x28
  405556:	2900      	cmp	r1, #0
  405558:	db05      	blt.n	405566 <_svfprintf_r+0x2ee>
  40555a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40555e:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  405562:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  405566:	ea54 0005 	orrs.w	r0, r4, r5
  40556a:	f040 82c7 	bne.w	405afc <_svfprintf_r+0x884>
  40556e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405570:	2900      	cmp	r1, #0
  405572:	f040 82c3 	bne.w	405afc <_svfprintf_r+0x884>
  405576:	2b00      	cmp	r3, #0
  405578:	f040 843a 	bne.w	405df0 <_svfprintf_r+0xb78>
  40557c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  405580:	f01c 0f01 	tst.w	ip, #1
  405584:	f000 8434 	beq.w	405df0 <_svfprintf_r+0xb78>
  405588:	af48      	add	r7, sp, #288	; 0x120
  40558a:	2330      	movs	r3, #48	; 0x30
  40558c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  405590:	9d08      	ldr	r5, [sp, #32]
  405592:	1bec      	subs	r4, r5, r7
  405594:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  405598:	2500      	movs	r5, #0
  40559a:	4564      	cmp	r4, ip
  40559c:	bfa8      	it	ge
  40559e:	46a4      	movge	ip, r4
  4055a0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4055a4:	9514      	str	r5, [sp, #80]	; 0x50
  4055a6:	f1ba 0f00 	cmp.w	sl, #0
  4055aa:	d002      	beq.n	4055b2 <_svfprintf_r+0x33a>
  4055ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4055ae:	3501      	adds	r5, #1
  4055b0:	950b      	str	r5, [sp, #44]	; 0x2c
  4055b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055b4:	f013 0302 	ands.w	r3, r3, #2
  4055b8:	9312      	str	r3, [sp, #72]	; 0x48
  4055ba:	d002      	beq.n	4055c2 <_svfprintf_r+0x34a>
  4055bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4055be:	3502      	adds	r5, #2
  4055c0:	950b      	str	r5, [sp, #44]	; 0x2c
  4055c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4055c6:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  4055ca:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  4055ce:	f040 8292 	bne.w	405af6 <_svfprintf_r+0x87e>
  4055d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4055d4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  4055d8:	ebcc 0b05 	rsb	fp, ip, r5
  4055dc:	f1bb 0f00 	cmp.w	fp, #0
  4055e0:	f340 8289 	ble.w	405af6 <_svfprintf_r+0x87e>
  4055e4:	f1bb 0f10 	cmp.w	fp, #16
  4055e8:	992d      	ldr	r1, [sp, #180]	; 0xb4
  4055ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4055ec:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 405790 <_svfprintf_r+0x518>
  4055f0:	dd2c      	ble.n	40564c <_svfprintf_r+0x3d4>
  4055f2:	971b      	str	r7, [sp, #108]	; 0x6c
  4055f4:	4630      	mov	r0, r6
  4055f6:	4657      	mov	r7, sl
  4055f8:	2510      	movs	r5, #16
  4055fa:	46ca      	mov	sl, r9
  4055fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4055fe:	46a1      	mov	r9, r4
  405600:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  405602:	e006      	b.n	405612 <_svfprintf_r+0x39a>
  405604:	f1ab 0b10 	sub.w	fp, fp, #16
  405608:	f1bb 0f10 	cmp.w	fp, #16
  40560c:	f100 0008 	add.w	r0, r0, #8
  405610:	dd17      	ble.n	405642 <_svfprintf_r+0x3ca>
  405612:	3201      	adds	r2, #1
  405614:	3110      	adds	r1, #16
  405616:	2a07      	cmp	r2, #7
  405618:	912d      	str	r1, [sp, #180]	; 0xb4
  40561a:	922c      	str	r2, [sp, #176]	; 0xb0
  40561c:	6007      	str	r7, [r0, #0]
  40561e:	6045      	str	r5, [r0, #4]
  405620:	ddf0      	ble.n	405604 <_svfprintf_r+0x38c>
  405622:	4620      	mov	r0, r4
  405624:	4631      	mov	r1, r6
  405626:	aa2b      	add	r2, sp, #172	; 0xac
  405628:	f003 faaa 	bl	408b80 <__ssprint_r>
  40562c:	2800      	cmp	r0, #0
  40562e:	f47f af3b 	bne.w	4054a8 <_svfprintf_r+0x230>
  405632:	f1ab 0b10 	sub.w	fp, fp, #16
  405636:	f1bb 0f10 	cmp.w	fp, #16
  40563a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40563c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40563e:	a838      	add	r0, sp, #224	; 0xe0
  405640:	dce7      	bgt.n	405612 <_svfprintf_r+0x39a>
  405642:	464c      	mov	r4, r9
  405644:	46d1      	mov	r9, sl
  405646:	46ba      	mov	sl, r7
  405648:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40564a:	4606      	mov	r6, r0
  40564c:	3201      	adds	r2, #1
  40564e:	eb0b 0c01 	add.w	ip, fp, r1
  405652:	2a07      	cmp	r2, #7
  405654:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405658:	922c      	str	r2, [sp, #176]	; 0xb0
  40565a:	e886 0c00 	stmia.w	r6, {sl, fp}
  40565e:	f300 841c 	bgt.w	405e9a <_svfprintf_r+0xc22>
  405662:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  405666:	3608      	adds	r6, #8
  405668:	f1ba 0f00 	cmp.w	sl, #0
  40566c:	d00f      	beq.n	40568e <_svfprintf_r+0x416>
  40566e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405670:	3301      	adds	r3, #1
  405672:	f10c 0c01 	add.w	ip, ip, #1
  405676:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  40567a:	2201      	movs	r2, #1
  40567c:	2b07      	cmp	r3, #7
  40567e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405682:	932c      	str	r3, [sp, #176]	; 0xb0
  405684:	e886 0006 	stmia.w	r6, {r1, r2}
  405688:	f300 839a 	bgt.w	405dc0 <_svfprintf_r+0xb48>
  40568c:	3608      	adds	r6, #8
  40568e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405690:	b173      	cbz	r3, 4056b0 <_svfprintf_r+0x438>
  405692:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405694:	3301      	adds	r3, #1
  405696:	f10c 0c02 	add.w	ip, ip, #2
  40569a:	a924      	add	r1, sp, #144	; 0x90
  40569c:	2202      	movs	r2, #2
  40569e:	2b07      	cmp	r3, #7
  4056a0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4056a4:	932c      	str	r3, [sp, #176]	; 0xb0
  4056a6:	e886 0006 	stmia.w	r6, {r1, r2}
  4056aa:	f300 8395 	bgt.w	405dd8 <_svfprintf_r+0xb60>
  4056ae:	3608      	adds	r6, #8
  4056b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  4056b2:	2d80      	cmp	r5, #128	; 0x80
  4056b4:	f000 82cc 	beq.w	405c50 <_svfprintf_r+0x9d8>
  4056b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4056ba:	ebc4 0a05 	rsb	sl, r4, r5
  4056be:	f1ba 0f00 	cmp.w	sl, #0
  4056c2:	dd3b      	ble.n	40573c <_svfprintf_r+0x4c4>
  4056c4:	f1ba 0f10 	cmp.w	sl, #16
  4056c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4056ca:	4d30      	ldr	r5, [pc, #192]	; (40578c <_svfprintf_r+0x514>)
  4056cc:	dd2b      	ble.n	405726 <_svfprintf_r+0x4ae>
  4056ce:	940a      	str	r4, [sp, #40]	; 0x28
  4056d0:	4632      	mov	r2, r6
  4056d2:	f04f 0b10 	mov.w	fp, #16
  4056d6:	462e      	mov	r6, r5
  4056d8:	4661      	mov	r1, ip
  4056da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4056dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4056de:	e006      	b.n	4056ee <_svfprintf_r+0x476>
  4056e0:	f1aa 0a10 	sub.w	sl, sl, #16
  4056e4:	f1ba 0f10 	cmp.w	sl, #16
  4056e8:	f102 0208 	add.w	r2, r2, #8
  4056ec:	dd17      	ble.n	40571e <_svfprintf_r+0x4a6>
  4056ee:	3301      	adds	r3, #1
  4056f0:	3110      	adds	r1, #16
  4056f2:	2b07      	cmp	r3, #7
  4056f4:	912d      	str	r1, [sp, #180]	; 0xb4
  4056f6:	932c      	str	r3, [sp, #176]	; 0xb0
  4056f8:	e882 0840 	stmia.w	r2, {r6, fp}
  4056fc:	ddf0      	ble.n	4056e0 <_svfprintf_r+0x468>
  4056fe:	4620      	mov	r0, r4
  405700:	4629      	mov	r1, r5
  405702:	aa2b      	add	r2, sp, #172	; 0xac
  405704:	f003 fa3c 	bl	408b80 <__ssprint_r>
  405708:	2800      	cmp	r0, #0
  40570a:	f47f aecd 	bne.w	4054a8 <_svfprintf_r+0x230>
  40570e:	f1aa 0a10 	sub.w	sl, sl, #16
  405712:	f1ba 0f10 	cmp.w	sl, #16
  405716:	992d      	ldr	r1, [sp, #180]	; 0xb4
  405718:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40571a:	aa38      	add	r2, sp, #224	; 0xe0
  40571c:	dce7      	bgt.n	4056ee <_svfprintf_r+0x476>
  40571e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405720:	4635      	mov	r5, r6
  405722:	468c      	mov	ip, r1
  405724:	4616      	mov	r6, r2
  405726:	3301      	adds	r3, #1
  405728:	44d4      	add	ip, sl
  40572a:	2b07      	cmp	r3, #7
  40572c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405730:	932c      	str	r3, [sp, #176]	; 0xb0
  405732:	e886 0420 	stmia.w	r6, {r5, sl}
  405736:	f300 8337 	bgt.w	405da8 <_svfprintf_r+0xb30>
  40573a:	3608      	adds	r6, #8
  40573c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40573e:	05ed      	lsls	r5, r5, #23
  405740:	f100 8226 	bmi.w	405b90 <_svfprintf_r+0x918>
  405744:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405746:	6037      	str	r7, [r6, #0]
  405748:	3301      	adds	r3, #1
  40574a:	44a4      	add	ip, r4
  40574c:	2b07      	cmp	r3, #7
  40574e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405752:	6074      	str	r4, [r6, #4]
  405754:	932c      	str	r3, [sp, #176]	; 0xb0
  405756:	f300 8311 	bgt.w	405d7c <_svfprintf_r+0xb04>
  40575a:	3608      	adds	r6, #8
  40575c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40575e:	0763      	lsls	r3, r4, #29
  405760:	d549      	bpl.n	4057f6 <_svfprintf_r+0x57e>
  405762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405764:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405766:	1a2c      	subs	r4, r5, r0
  405768:	2c00      	cmp	r4, #0
  40576a:	dd44      	ble.n	4057f6 <_svfprintf_r+0x57e>
  40576c:	2c10      	cmp	r4, #16
  40576e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405770:	f8df a01c 	ldr.w	sl, [pc, #28]	; 405790 <_svfprintf_r+0x518>
  405774:	dd2b      	ble.n	4057ce <_svfprintf_r+0x556>
  405776:	4657      	mov	r7, sl
  405778:	2510      	movs	r5, #16
  40577a:	4662      	mov	r2, ip
  40577c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  405780:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  405784:	e00b      	b.n	40579e <_svfprintf_r+0x526>
  405786:	bf00      	nop
  405788:	00409bfc 	.word	0x00409bfc
  40578c:	00409bc8 	.word	0x00409bc8
  405790:	00409c1c 	.word	0x00409c1c
  405794:	3c10      	subs	r4, #16
  405796:	2c10      	cmp	r4, #16
  405798:	f106 0608 	add.w	r6, r6, #8
  40579c:	dd15      	ble.n	4057ca <_svfprintf_r+0x552>
  40579e:	3301      	adds	r3, #1
  4057a0:	3210      	adds	r2, #16
  4057a2:	2b07      	cmp	r3, #7
  4057a4:	922d      	str	r2, [sp, #180]	; 0xb4
  4057a6:	932c      	str	r3, [sp, #176]	; 0xb0
  4057a8:	6037      	str	r7, [r6, #0]
  4057aa:	6075      	str	r5, [r6, #4]
  4057ac:	ddf2      	ble.n	405794 <_svfprintf_r+0x51c>
  4057ae:	4650      	mov	r0, sl
  4057b0:	4641      	mov	r1, r8
  4057b2:	aa2b      	add	r2, sp, #172	; 0xac
  4057b4:	f003 f9e4 	bl	408b80 <__ssprint_r>
  4057b8:	2800      	cmp	r0, #0
  4057ba:	f47f ae75 	bne.w	4054a8 <_svfprintf_r+0x230>
  4057be:	3c10      	subs	r4, #16
  4057c0:	2c10      	cmp	r4, #16
  4057c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4057c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4057c6:	ae38      	add	r6, sp, #224	; 0xe0
  4057c8:	dce9      	bgt.n	40579e <_svfprintf_r+0x526>
  4057ca:	4694      	mov	ip, r2
  4057cc:	46ba      	mov	sl, r7
  4057ce:	3301      	adds	r3, #1
  4057d0:	44a4      	add	ip, r4
  4057d2:	2b07      	cmp	r3, #7
  4057d4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4057d8:	932c      	str	r3, [sp, #176]	; 0xb0
  4057da:	f8c6 a000 	str.w	sl, [r6]
  4057de:	6074      	str	r4, [r6, #4]
  4057e0:	dd09      	ble.n	4057f6 <_svfprintf_r+0x57e>
  4057e2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4057e4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4057e6:	aa2b      	add	r2, sp, #172	; 0xac
  4057e8:	f003 f9ca 	bl	408b80 <__ssprint_r>
  4057ec:	2800      	cmp	r0, #0
  4057ee:	f47f ae5b 	bne.w	4054a8 <_svfprintf_r+0x230>
  4057f2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4057f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4057f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4057fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4057fc:	42a8      	cmp	r0, r5
  4057fe:	bfac      	ite	ge
  405800:	1824      	addge	r4, r4, r0
  405802:	1964      	addlt	r4, r4, r5
  405804:	940e      	str	r4, [sp, #56]	; 0x38
  405806:	f1bc 0f00 	cmp.w	ip, #0
  40580a:	f040 82c3 	bne.w	405d94 <_svfprintf_r+0xb1c>
  40580e:	2300      	movs	r3, #0
  405810:	932c      	str	r3, [sp, #176]	; 0xb0
  405812:	ae38      	add	r6, sp, #224	; 0xe0
  405814:	e556      	b.n	4052c4 <_svfprintf_r+0x4c>
  405816:	f899 8000 	ldrb.w	r8, [r9]
  40581a:	2a00      	cmp	r2, #0
  40581c:	f47f ad88 	bne.w	405330 <_svfprintf_r+0xb8>
  405820:	2220      	movs	r2, #32
  405822:	e585      	b.n	405330 <_svfprintf_r+0xb8>
  405824:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405826:	f045 0501 	orr.w	r5, r5, #1
  40582a:	9509      	str	r5, [sp, #36]	; 0x24
  40582c:	f899 8000 	ldrb.w	r8, [r9]
  405830:	e57e      	b.n	405330 <_svfprintf_r+0xb8>
  405832:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405834:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  405838:	9509      	str	r5, [sp, #36]	; 0x24
  40583a:	f899 8000 	ldrb.w	r8, [r9]
  40583e:	e577      	b.n	405330 <_svfprintf_r+0xb8>
  405840:	2400      	movs	r4, #0
  405842:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  405846:	940f      	str	r4, [sp, #60]	; 0x3c
  405848:	4621      	mov	r1, r4
  40584a:	f819 8b01 	ldrb.w	r8, [r9], #1
  40584e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  405852:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  405856:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40585a:	2b09      	cmp	r3, #9
  40585c:	d9f5      	bls.n	40584a <_svfprintf_r+0x5d2>
  40585e:	910f      	str	r1, [sp, #60]	; 0x3c
  405860:	e568      	b.n	405334 <_svfprintf_r+0xbc>
  405862:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  405866:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40586a:	f04c 0c10 	orr.w	ip, ip, #16
  40586e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  405872:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405874:	06a3      	lsls	r3, r4, #26
  405876:	f140 80b2 	bpl.w	4059de <_svfprintf_r+0x766>
  40587a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40587c:	1de9      	adds	r1, r5, #7
  40587e:	f021 0107 	bic.w	r1, r1, #7
  405882:	e9d1 2300 	ldrd	r2, r3, [r1]
  405886:	3108      	adds	r1, #8
  405888:	9110      	str	r1, [sp, #64]	; 0x40
  40588a:	4614      	mov	r4, r2
  40588c:	461d      	mov	r5, r3
  40588e:	2a00      	cmp	r2, #0
  405890:	f173 0000 	sbcs.w	r0, r3, #0
  405894:	f2c0 838b 	blt.w	405fae <_svfprintf_r+0xd36>
  405898:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40589c:	2301      	movs	r3, #1
  40589e:	e659      	b.n	405554 <_svfprintf_r+0x2dc>
  4058a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4058a2:	4cb7      	ldr	r4, [pc, #732]	; (405b80 <_svfprintf_r+0x908>)
  4058a4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4058a8:	06af      	lsls	r7, r5, #26
  4058aa:	941a      	str	r4, [sp, #104]	; 0x68
  4058ac:	f53f ae2f 	bmi.w	40550e <_svfprintf_r+0x296>
  4058b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4058b2:	06ed      	lsls	r5, r5, #27
  4058b4:	f140 845d 	bpl.w	406172 <_svfprintf_r+0xefa>
  4058b8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4058bc:	f8dc 4000 	ldr.w	r4, [ip]
  4058c0:	f10c 0c04 	add.w	ip, ip, #4
  4058c4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4058c8:	2500      	movs	r5, #0
  4058ca:	e62b      	b.n	405524 <_svfprintf_r+0x2ac>
  4058cc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4058d0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4058d4:	f01c 0f20 	tst.w	ip, #32
  4058d8:	f000 843d 	beq.w	406156 <_svfprintf_r+0xede>
  4058dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4058de:	6821      	ldr	r1, [r4, #0]
  4058e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4058e2:	17e5      	asrs	r5, r4, #31
  4058e4:	462b      	mov	r3, r5
  4058e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4058e8:	4622      	mov	r2, r4
  4058ea:	3504      	adds	r5, #4
  4058ec:	9510      	str	r5, [sp, #64]	; 0x40
  4058ee:	e9c1 2300 	strd	r2, r3, [r1]
  4058f2:	e4e7      	b.n	4052c4 <_svfprintf_r+0x4c>
  4058f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4058f6:	6827      	ldr	r7, [r4, #0]
  4058f8:	f04f 0a00 	mov.w	sl, #0
  4058fc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  405900:	1d25      	adds	r5, r4, #4
  405902:	2f00      	cmp	r7, #0
  405904:	f000 85f5 	beq.w	4064f2 <_svfprintf_r+0x127a>
  405908:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40590a:	2c00      	cmp	r4, #0
  40590c:	4638      	mov	r0, r7
  40590e:	f2c0 85a7 	blt.w	406460 <_svfprintf_r+0x11e8>
  405912:	4651      	mov	r1, sl
  405914:	4622      	mov	r2, r4
  405916:	f002 fac3 	bl	407ea0 <memchr>
  40591a:	2800      	cmp	r0, #0
  40591c:	f000 861f 	beq.w	40655e <_svfprintf_r+0x12e6>
  405920:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405922:	9510      	str	r5, [sp, #64]	; 0x40
  405924:	1bc0      	subs	r0, r0, r7
  405926:	42a0      	cmp	r0, r4
  405928:	bfb8      	it	lt
  40592a:	4604      	movlt	r4, r0
  40592c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  405930:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  405934:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  405938:	950b      	str	r5, [sp, #44]	; 0x2c
  40593a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40593e:	e632      	b.n	4055a6 <_svfprintf_r+0x32e>
  405940:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  405944:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  405948:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40594c:	f899 8000 	ldrb.w	r8, [r9]
  405950:	e4ee      	b.n	405330 <_svfprintf_r+0xb8>
  405952:	f899 8000 	ldrb.w	r8, [r9]
  405956:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  40595a:	464b      	mov	r3, r9
  40595c:	f000 848b 	beq.w	406276 <_svfprintf_r+0xffe>
  405960:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405962:	f045 0510 	orr.w	r5, r5, #16
  405966:	9509      	str	r5, [sp, #36]	; 0x24
  405968:	e4e2      	b.n	405330 <_svfprintf_r+0xb8>
  40596a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40596c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40596e:	6824      	ldr	r4, [r4, #0]
  405970:	940f      	str	r4, [sp, #60]	; 0x3c
  405972:	2c00      	cmp	r4, #0
  405974:	f105 0304 	add.w	r3, r5, #4
  405978:	f6ff ad7c 	blt.w	405474 <_svfprintf_r+0x1fc>
  40597c:	9310      	str	r3, [sp, #64]	; 0x40
  40597e:	f899 8000 	ldrb.w	r8, [r9]
  405982:	e4d5      	b.n	405330 <_svfprintf_r+0xb8>
  405984:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405986:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40598a:	487e      	ldr	r0, [pc, #504]	; (405b84 <_svfprintf_r+0x90c>)
  40598c:	6814      	ldr	r4, [r2, #0]
  40598e:	901a      	str	r0, [sp, #104]	; 0x68
  405990:	2330      	movs	r3, #48	; 0x30
  405992:	1d15      	adds	r5, r2, #4
  405994:	f04f 0878 	mov.w	r8, #120	; 0x78
  405998:	f04c 0c02 	orr.w	ip, ip, #2
  40599c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  4059a0:	9510      	str	r5, [sp, #64]	; 0x40
  4059a2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4059a6:	2500      	movs	r5, #0
  4059a8:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  4059ac:	2302      	movs	r3, #2
  4059ae:	e5cd      	b.n	40554c <_svfprintf_r+0x2d4>
  4059b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4059b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4059b4:	6812      	ldr	r2, [r2, #0]
  4059b6:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  4059ba:	2300      	movs	r3, #0
  4059bc:	2401      	movs	r4, #1
  4059be:	3504      	adds	r5, #4
  4059c0:	469a      	mov	sl, r3
  4059c2:	940b      	str	r4, [sp, #44]	; 0x2c
  4059c4:	9510      	str	r5, [sp, #64]	; 0x40
  4059c6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  4059ca:	930a      	str	r3, [sp, #40]	; 0x28
  4059cc:	9314      	str	r3, [sp, #80]	; 0x50
  4059ce:	af2e      	add	r7, sp, #184	; 0xb8
  4059d0:	e5ef      	b.n	4055b2 <_svfprintf_r+0x33a>
  4059d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4059d4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4059d8:	06a3      	lsls	r3, r4, #26
  4059da:	f53f af4e 	bmi.w	40587a <_svfprintf_r+0x602>
  4059de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4059e2:	f01c 0f10 	tst.w	ip, #16
  4059e6:	f040 82d2 	bne.w	405f8e <_svfprintf_r+0xd16>
  4059ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4059ec:	0667      	lsls	r7, r4, #25
  4059ee:	f140 82ce 	bpl.w	405f8e <_svfprintf_r+0xd16>
  4059f2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4059f6:	f9bc 4000 	ldrsh.w	r4, [ip]
  4059fa:	f10c 0c04 	add.w	ip, ip, #4
  4059fe:	17e5      	asrs	r5, r4, #31
  405a00:	4622      	mov	r2, r4
  405a02:	462b      	mov	r3, r5
  405a04:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405a08:	e741      	b.n	40588e <_svfprintf_r+0x616>
  405a0a:	f899 8000 	ldrb.w	r8, [r9]
  405a0e:	222b      	movs	r2, #43	; 0x2b
  405a10:	e48e      	b.n	405330 <_svfprintf_r+0xb8>
  405a12:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405a14:	f045 0508 	orr.w	r5, r5, #8
  405a18:	9509      	str	r5, [sp, #36]	; 0x24
  405a1a:	f899 8000 	ldrb.w	r8, [r9]
  405a1e:	e487      	b.n	405330 <_svfprintf_r+0xb8>
  405a20:	9d10      	ldr	r5, [sp, #64]	; 0x40
  405a22:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405a24:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  405a28:	1deb      	adds	r3, r5, #7
  405a2a:	0725      	lsls	r5, r4, #28
  405a2c:	f023 0307 	bic.w	r3, r3, #7
  405a30:	f140 838a 	bpl.w	406148 <_svfprintf_r+0xed0>
  405a34:	e9d3 4500 	ldrd	r4, r5, [r3]
  405a38:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  405a3c:	f103 0c08 	add.w	ip, r3, #8
  405a40:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405a44:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405a48:	f003 f860 	bl	408b0c <__fpclassifyd>
  405a4c:	2801      	cmp	r0, #1
  405a4e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405a52:	f040 835f 	bne.w	406114 <_svfprintf_r+0xe9c>
  405a56:	2200      	movs	r2, #0
  405a58:	2300      	movs	r3, #0
  405a5a:	f7ff fafd 	bl	405058 <__aeabi_dcmplt>
  405a5e:	2800      	cmp	r0, #0
  405a60:	f040 856d 	bne.w	40653e <_svfprintf_r+0x12c6>
  405a64:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  405a68:	2503      	movs	r5, #3
  405a6a:	950b      	str	r5, [sp, #44]	; 0x2c
  405a6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405a6e:	4f46      	ldr	r7, [pc, #280]	; (405b88 <_svfprintf_r+0x910>)
  405a70:	4b46      	ldr	r3, [pc, #280]	; (405b8c <_svfprintf_r+0x914>)
  405a72:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  405a76:	2400      	movs	r4, #0
  405a78:	9509      	str	r5, [sp, #36]	; 0x24
  405a7a:	2500      	movs	r5, #0
  405a7c:	940a      	str	r4, [sp, #40]	; 0x28
  405a7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  405a82:	bfd8      	it	le
  405a84:	461f      	movle	r7, r3
  405a86:	2403      	movs	r4, #3
  405a88:	9514      	str	r5, [sp, #80]	; 0x50
  405a8a:	e58c      	b.n	4055a6 <_svfprintf_r+0x32e>
  405a8c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  405a90:	f04c 0c20 	orr.w	ip, ip, #32
  405a94:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  405a98:	f899 8000 	ldrb.w	r8, [r9]
  405a9c:	e448      	b.n	405330 <_svfprintf_r+0xb8>
  405a9e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  405aa0:	1de3      	adds	r3, r4, #7
  405aa2:	f023 0307 	bic.w	r3, r3, #7
  405aa6:	f103 0508 	add.w	r5, r3, #8
  405aaa:	9510      	str	r5, [sp, #64]	; 0x40
  405aac:	e9d3 4500 	ldrd	r4, r5, [r3]
  405ab0:	2300      	movs	r3, #0
  405ab2:	e54b      	b.n	40554c <_svfprintf_r+0x2d4>
  405ab4:	9d10      	ldr	r5, [sp, #64]	; 0x40
  405ab6:	1deb      	adds	r3, r5, #7
  405ab8:	f023 0307 	bic.w	r3, r3, #7
  405abc:	f103 0c08 	add.w	ip, r3, #8
  405ac0:	e9d3 4500 	ldrd	r4, r5, [r3]
  405ac4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405ac8:	2301      	movs	r3, #1
  405aca:	e53f      	b.n	40554c <_svfprintf_r+0x2d4>
  405acc:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  405ad0:	f1b8 0f00 	cmp.w	r8, #0
  405ad4:	f43f ace1 	beq.w	40549a <_svfprintf_r+0x222>
  405ad8:	2300      	movs	r3, #0
  405ada:	f04f 0c01 	mov.w	ip, #1
  405ade:	469a      	mov	sl, r3
  405ae0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  405ae4:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  405ae8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  405aec:	930a      	str	r3, [sp, #40]	; 0x28
  405aee:	9314      	str	r3, [sp, #80]	; 0x50
  405af0:	4664      	mov	r4, ip
  405af2:	af2e      	add	r7, sp, #184	; 0xb8
  405af4:	e55d      	b.n	4055b2 <_svfprintf_r+0x33a>
  405af6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  405afa:	e5b5      	b.n	405668 <_svfprintf_r+0x3f0>
  405afc:	2b01      	cmp	r3, #1
  405afe:	f000 80ec 	beq.w	405cda <_svfprintf_r+0xa62>
  405b02:	2b02      	cmp	r3, #2
  405b04:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  405b08:	d118      	bne.n	405b3c <_svfprintf_r+0x8c4>
  405b0a:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  405b0e:	4619      	mov	r1, r3
  405b10:	f004 000f 	and.w	r0, r4, #15
  405b14:	0922      	lsrs	r2, r4, #4
  405b16:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  405b1a:	460f      	mov	r7, r1
  405b1c:	092b      	lsrs	r3, r5, #4
  405b1e:	f81c 1000 	ldrb.w	r1, [ip, r0]
  405b22:	7039      	strb	r1, [r7, #0]
  405b24:	ea52 0003 	orrs.w	r0, r2, r3
  405b28:	4614      	mov	r4, r2
  405b2a:	461d      	mov	r5, r3
  405b2c:	f107 31ff 	add.w	r1, r7, #4294967295
  405b30:	d1ee      	bne.n	405b10 <_svfprintf_r+0x898>
  405b32:	9d08      	ldr	r5, [sp, #32]
  405b34:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  405b38:	1bec      	subs	r4, r5, r7
  405b3a:	e52b      	b.n	405594 <_svfprintf_r+0x31c>
  405b3c:	08e0      	lsrs	r0, r4, #3
  405b3e:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  405b42:	f004 0207 	and.w	r2, r4, #7
  405b46:	08e9      	lsrs	r1, r5, #3
  405b48:	3230      	adds	r2, #48	; 0x30
  405b4a:	ea50 0c01 	orrs.w	ip, r0, r1
  405b4e:	461f      	mov	r7, r3
  405b50:	701a      	strb	r2, [r3, #0]
  405b52:	4604      	mov	r4, r0
  405b54:	460d      	mov	r5, r1
  405b56:	f103 33ff 	add.w	r3, r3, #4294967295
  405b5a:	d1ef      	bne.n	405b3c <_svfprintf_r+0x8c4>
  405b5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405b5e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  405b62:	07e0      	lsls	r0, r4, #31
  405b64:	4639      	mov	r1, r7
  405b66:	f140 80c1 	bpl.w	405cec <_svfprintf_r+0xa74>
  405b6a:	2a30      	cmp	r2, #48	; 0x30
  405b6c:	f000 80be 	beq.w	405cec <_svfprintf_r+0xa74>
  405b70:	9d08      	ldr	r5, [sp, #32]
  405b72:	461f      	mov	r7, r3
  405b74:	2330      	movs	r3, #48	; 0x30
  405b76:	1bec      	subs	r4, r5, r7
  405b78:	f801 3c01 	strb.w	r3, [r1, #-1]
  405b7c:	e50a      	b.n	405594 <_svfprintf_r+0x31c>
  405b7e:	bf00      	nop
  405b80:	00409be8 	.word	0x00409be8
  405b84:	00409bfc 	.word	0x00409bfc
  405b88:	00409bdc 	.word	0x00409bdc
  405b8c:	00409bd8 	.word	0x00409bd8
  405b90:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  405b94:	f340 80ad 	ble.w	405cf2 <_svfprintf_r+0xa7a>
  405b98:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405b9c:	2200      	movs	r2, #0
  405b9e:	2300      	movs	r3, #0
  405ba0:	f8cd c01c 	str.w	ip, [sp, #28]
  405ba4:	f7ff fa4e 	bl	405044 <__aeabi_dcmpeq>
  405ba8:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405bac:	2800      	cmp	r0, #0
  405bae:	f000 8126 	beq.w	405dfe <_svfprintf_r+0xb86>
  405bb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405bb4:	4aaa      	ldr	r2, [pc, #680]	; (405e60 <_svfprintf_r+0xbe8>)
  405bb6:	6032      	str	r2, [r6, #0]
  405bb8:	3301      	adds	r3, #1
  405bba:	f10c 0c01 	add.w	ip, ip, #1
  405bbe:	2201      	movs	r2, #1
  405bc0:	2b07      	cmp	r3, #7
  405bc2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405bc6:	932c      	str	r3, [sp, #176]	; 0xb0
  405bc8:	6072      	str	r2, [r6, #4]
  405bca:	f300 82f7 	bgt.w	4061bc <_svfprintf_r+0xf44>
  405bce:	3608      	adds	r6, #8
  405bd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bd2:	9c11      	ldr	r4, [sp, #68]	; 0x44
  405bd4:	42a3      	cmp	r3, r4
  405bd6:	db03      	blt.n	405be0 <_svfprintf_r+0x968>
  405bd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405bda:	07ec      	lsls	r4, r5, #31
  405bdc:	f57f adbe 	bpl.w	40575c <_svfprintf_r+0x4e4>
  405be0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405be2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  405be4:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405be6:	6034      	str	r4, [r6, #0]
  405be8:	3301      	adds	r3, #1
  405bea:	44ac      	add	ip, r5
  405bec:	2b07      	cmp	r3, #7
  405bee:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405bf2:	6075      	str	r5, [r6, #4]
  405bf4:	932c      	str	r3, [sp, #176]	; 0xb0
  405bf6:	f300 8348 	bgt.w	40628a <_svfprintf_r+0x1012>
  405bfa:	3608      	adds	r6, #8
  405bfc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  405bfe:	1e6c      	subs	r4, r5, #1
  405c00:	2c00      	cmp	r4, #0
  405c02:	f77f adab 	ble.w	40575c <_svfprintf_r+0x4e4>
  405c06:	2c10      	cmp	r4, #16
  405c08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405c0a:	4d96      	ldr	r5, [pc, #600]	; (405e64 <_svfprintf_r+0xbec>)
  405c0c:	f340 8197 	ble.w	405f3e <_svfprintf_r+0xcc6>
  405c10:	2710      	movs	r7, #16
  405c12:	4662      	mov	r2, ip
  405c14:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  405c18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  405c1c:	e004      	b.n	405c28 <_svfprintf_r+0x9b0>
  405c1e:	3608      	adds	r6, #8
  405c20:	3c10      	subs	r4, #16
  405c22:	2c10      	cmp	r4, #16
  405c24:	f340 818a 	ble.w	405f3c <_svfprintf_r+0xcc4>
  405c28:	3301      	adds	r3, #1
  405c2a:	3210      	adds	r2, #16
  405c2c:	2b07      	cmp	r3, #7
  405c2e:	922d      	str	r2, [sp, #180]	; 0xb4
  405c30:	932c      	str	r3, [sp, #176]	; 0xb0
  405c32:	e886 00a0 	stmia.w	r6, {r5, r7}
  405c36:	ddf2      	ble.n	405c1e <_svfprintf_r+0x9a6>
  405c38:	4640      	mov	r0, r8
  405c3a:	4651      	mov	r1, sl
  405c3c:	aa2b      	add	r2, sp, #172	; 0xac
  405c3e:	f002 ff9f 	bl	408b80 <__ssprint_r>
  405c42:	2800      	cmp	r0, #0
  405c44:	f47f ac30 	bne.w	4054a8 <_svfprintf_r+0x230>
  405c48:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  405c4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405c4c:	ae38      	add	r6, sp, #224	; 0xe0
  405c4e:	e7e7      	b.n	405c20 <_svfprintf_r+0x9a8>
  405c50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405c52:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405c54:	ebc0 0a05 	rsb	sl, r0, r5
  405c58:	f1ba 0f00 	cmp.w	sl, #0
  405c5c:	f77f ad2c 	ble.w	4056b8 <_svfprintf_r+0x440>
  405c60:	f1ba 0f10 	cmp.w	sl, #16
  405c64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405c66:	4d7f      	ldr	r5, [pc, #508]	; (405e64 <_svfprintf_r+0xbec>)
  405c68:	dd2b      	ble.n	405cc2 <_svfprintf_r+0xa4a>
  405c6a:	9412      	str	r4, [sp, #72]	; 0x48
  405c6c:	4632      	mov	r2, r6
  405c6e:	f04f 0b10 	mov.w	fp, #16
  405c72:	462e      	mov	r6, r5
  405c74:	4661      	mov	r1, ip
  405c76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  405c78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  405c7a:	e006      	b.n	405c8a <_svfprintf_r+0xa12>
  405c7c:	f1aa 0a10 	sub.w	sl, sl, #16
  405c80:	f1ba 0f10 	cmp.w	sl, #16
  405c84:	f102 0208 	add.w	r2, r2, #8
  405c88:	dd17      	ble.n	405cba <_svfprintf_r+0xa42>
  405c8a:	3301      	adds	r3, #1
  405c8c:	3110      	adds	r1, #16
  405c8e:	2b07      	cmp	r3, #7
  405c90:	912d      	str	r1, [sp, #180]	; 0xb4
  405c92:	932c      	str	r3, [sp, #176]	; 0xb0
  405c94:	e882 0840 	stmia.w	r2, {r6, fp}
  405c98:	ddf0      	ble.n	405c7c <_svfprintf_r+0xa04>
  405c9a:	4620      	mov	r0, r4
  405c9c:	4629      	mov	r1, r5
  405c9e:	aa2b      	add	r2, sp, #172	; 0xac
  405ca0:	f002 ff6e 	bl	408b80 <__ssprint_r>
  405ca4:	2800      	cmp	r0, #0
  405ca6:	f47f abff 	bne.w	4054a8 <_svfprintf_r+0x230>
  405caa:	f1aa 0a10 	sub.w	sl, sl, #16
  405cae:	f1ba 0f10 	cmp.w	sl, #16
  405cb2:	992d      	ldr	r1, [sp, #180]	; 0xb4
  405cb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405cb6:	aa38      	add	r2, sp, #224	; 0xe0
  405cb8:	dce7      	bgt.n	405c8a <_svfprintf_r+0xa12>
  405cba:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405cbc:	4635      	mov	r5, r6
  405cbe:	468c      	mov	ip, r1
  405cc0:	4616      	mov	r6, r2
  405cc2:	3301      	adds	r3, #1
  405cc4:	44d4      	add	ip, sl
  405cc6:	2b07      	cmp	r3, #7
  405cc8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405ccc:	932c      	str	r3, [sp, #176]	; 0xb0
  405cce:	e886 0420 	stmia.w	r6, {r5, sl}
  405cd2:	f300 8212 	bgt.w	4060fa <_svfprintf_r+0xe82>
  405cd6:	3608      	adds	r6, #8
  405cd8:	e4ee      	b.n	4056b8 <_svfprintf_r+0x440>
  405cda:	2d00      	cmp	r5, #0
  405cdc:	bf08      	it	eq
  405cde:	2c0a      	cmpeq	r4, #10
  405ce0:	f080 8138 	bcs.w	405f54 <_svfprintf_r+0xcdc>
  405ce4:	af48      	add	r7, sp, #288	; 0x120
  405ce6:	3430      	adds	r4, #48	; 0x30
  405ce8:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405cec:	9d08      	ldr	r5, [sp, #32]
  405cee:	1bec      	subs	r4, r5, r7
  405cf0:	e450      	b.n	405594 <_svfprintf_r+0x31c>
  405cf2:	9c11      	ldr	r4, [sp, #68]	; 0x44
  405cf4:	2c01      	cmp	r4, #1
  405cf6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  405cf8:	f340 81d5 	ble.w	4060a6 <_svfprintf_r+0xe2e>
  405cfc:	3401      	adds	r4, #1
  405cfe:	f10c 0301 	add.w	r3, ip, #1
  405d02:	2201      	movs	r2, #1
  405d04:	2c07      	cmp	r4, #7
  405d06:	6037      	str	r7, [r6, #0]
  405d08:	932d      	str	r3, [sp, #180]	; 0xb4
  405d0a:	942c      	str	r4, [sp, #176]	; 0xb0
  405d0c:	6072      	str	r2, [r6, #4]
  405d0e:	f300 81db 	bgt.w	4060c8 <_svfprintf_r+0xe50>
  405d12:	3608      	adds	r6, #8
  405d14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  405d18:	9d15      	ldr	r5, [sp, #84]	; 0x54
  405d1a:	6035      	str	r5, [r6, #0]
  405d1c:	3401      	adds	r4, #1
  405d1e:	4498      	add	r8, r3
  405d20:	9d18      	ldr	r5, [sp, #96]	; 0x60
  405d22:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  405d26:	2c07      	cmp	r4, #7
  405d28:	942c      	str	r4, [sp, #176]	; 0xb0
  405d2a:	6075      	str	r5, [r6, #4]
  405d2c:	f300 81d8 	bgt.w	4060e0 <_svfprintf_r+0xe68>
  405d30:	3608      	adds	r6, #8
  405d32:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405d36:	2200      	movs	r2, #0
  405d38:	2300      	movs	r3, #0
  405d3a:	f7ff f983 	bl	405044 <__aeabi_dcmpeq>
  405d3e:	9d11      	ldr	r5, [sp, #68]	; 0x44
  405d40:	2800      	cmp	r0, #0
  405d42:	f040 80b9 	bne.w	405eb8 <_svfprintf_r+0xc40>
  405d46:	1e6b      	subs	r3, r5, #1
  405d48:	3401      	adds	r4, #1
  405d4a:	3701      	adds	r7, #1
  405d4c:	4498      	add	r8, r3
  405d4e:	2c07      	cmp	r4, #7
  405d50:	942c      	str	r4, [sp, #176]	; 0xb0
  405d52:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  405d56:	6037      	str	r7, [r6, #0]
  405d58:	6073      	str	r3, [r6, #4]
  405d5a:	f300 80e2 	bgt.w	405f22 <_svfprintf_r+0xcaa>
  405d5e:	3608      	adds	r6, #8
  405d60:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  405d64:	9d19      	ldr	r5, [sp, #100]	; 0x64
  405d66:	3401      	adds	r4, #1
  405d68:	44c4      	add	ip, r8
  405d6a:	ab27      	add	r3, sp, #156	; 0x9c
  405d6c:	2c07      	cmp	r4, #7
  405d6e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405d72:	942c      	str	r4, [sp, #176]	; 0xb0
  405d74:	e886 0028 	stmia.w	r6, {r3, r5}
  405d78:	f77f acef 	ble.w	40575a <_svfprintf_r+0x4e2>
  405d7c:	980d      	ldr	r0, [sp, #52]	; 0x34
  405d7e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405d80:	aa2b      	add	r2, sp, #172	; 0xac
  405d82:	f002 fefd 	bl	408b80 <__ssprint_r>
  405d86:	2800      	cmp	r0, #0
  405d88:	f47f ab8e 	bne.w	4054a8 <_svfprintf_r+0x230>
  405d8c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  405d90:	ae38      	add	r6, sp, #224	; 0xe0
  405d92:	e4e3      	b.n	40575c <_svfprintf_r+0x4e4>
  405d94:	980d      	ldr	r0, [sp, #52]	; 0x34
  405d96:	990c      	ldr	r1, [sp, #48]	; 0x30
  405d98:	aa2b      	add	r2, sp, #172	; 0xac
  405d9a:	f002 fef1 	bl	408b80 <__ssprint_r>
  405d9e:	2800      	cmp	r0, #0
  405da0:	f43f ad35 	beq.w	40580e <_svfprintf_r+0x596>
  405da4:	f7ff bb80 	b.w	4054a8 <_svfprintf_r+0x230>
  405da8:	980d      	ldr	r0, [sp, #52]	; 0x34
  405daa:	990c      	ldr	r1, [sp, #48]	; 0x30
  405dac:	aa2b      	add	r2, sp, #172	; 0xac
  405dae:	f002 fee7 	bl	408b80 <__ssprint_r>
  405db2:	2800      	cmp	r0, #0
  405db4:	f47f ab78 	bne.w	4054a8 <_svfprintf_r+0x230>
  405db8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  405dbc:	ae38      	add	r6, sp, #224	; 0xe0
  405dbe:	e4bd      	b.n	40573c <_svfprintf_r+0x4c4>
  405dc0:	980d      	ldr	r0, [sp, #52]	; 0x34
  405dc2:	990c      	ldr	r1, [sp, #48]	; 0x30
  405dc4:	aa2b      	add	r2, sp, #172	; 0xac
  405dc6:	f002 fedb 	bl	408b80 <__ssprint_r>
  405dca:	2800      	cmp	r0, #0
  405dcc:	f47f ab6c 	bne.w	4054a8 <_svfprintf_r+0x230>
  405dd0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  405dd4:	ae38      	add	r6, sp, #224	; 0xe0
  405dd6:	e45a      	b.n	40568e <_svfprintf_r+0x416>
  405dd8:	980d      	ldr	r0, [sp, #52]	; 0x34
  405dda:	990c      	ldr	r1, [sp, #48]	; 0x30
  405ddc:	aa2b      	add	r2, sp, #172	; 0xac
  405dde:	f002 fecf 	bl	408b80 <__ssprint_r>
  405de2:	2800      	cmp	r0, #0
  405de4:	f47f ab60 	bne.w	4054a8 <_svfprintf_r+0x230>
  405de8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  405dec:	ae38      	add	r6, sp, #224	; 0xe0
  405dee:	e45f      	b.n	4056b0 <_svfprintf_r+0x438>
  405df0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405df2:	af38      	add	r7, sp, #224	; 0xe0
  405df4:	f7ff bbce 	b.w	405594 <_svfprintf_r+0x31c>
  405df8:	2302      	movs	r3, #2
  405dfa:	f7ff bba7 	b.w	40554c <_svfprintf_r+0x2d4>
  405dfe:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405e00:	2b00      	cmp	r3, #0
  405e02:	f340 81e7 	ble.w	4061d4 <_svfprintf_r+0xf5c>
  405e06:	9c11      	ldr	r4, [sp, #68]	; 0x44
  405e08:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405e0a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  405e0e:	42ac      	cmp	r4, r5
  405e10:	bfa8      	it	ge
  405e12:	462c      	movge	r4, r5
  405e14:	2c00      	cmp	r4, #0
  405e16:	44ba      	add	sl, r7
  405e18:	dd0b      	ble.n	405e32 <_svfprintf_r+0xbba>
  405e1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405e1c:	6037      	str	r7, [r6, #0]
  405e1e:	3301      	adds	r3, #1
  405e20:	44a4      	add	ip, r4
  405e22:	2b07      	cmp	r3, #7
  405e24:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405e28:	6074      	str	r4, [r6, #4]
  405e2a:	932c      	str	r3, [sp, #176]	; 0xb0
  405e2c:	f300 8328 	bgt.w	406480 <_svfprintf_r+0x1208>
  405e30:	3608      	adds	r6, #8
  405e32:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405e34:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  405e38:	1b2c      	subs	r4, r5, r4
  405e3a:	2c00      	cmp	r4, #0
  405e3c:	f340 80db 	ble.w	405ff6 <_svfprintf_r+0xd7e>
  405e40:	2c10      	cmp	r4, #16
  405e42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405e44:	4d07      	ldr	r5, [pc, #28]	; (405e64 <_svfprintf_r+0xbec>)
  405e46:	f340 81ad 	ble.w	4061a4 <_svfprintf_r+0xf2c>
  405e4a:	970a      	str	r7, [sp, #40]	; 0x28
  405e4c:	f04f 0810 	mov.w	r8, #16
  405e50:	462f      	mov	r7, r5
  405e52:	4662      	mov	r2, ip
  405e54:	4625      	mov	r5, r4
  405e56:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  405e5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405e5c:	e009      	b.n	405e72 <_svfprintf_r+0xbfa>
  405e5e:	bf00      	nop
  405e60:	00409c18 	.word	0x00409c18
  405e64:	00409bc8 	.word	0x00409bc8
  405e68:	3608      	adds	r6, #8
  405e6a:	3d10      	subs	r5, #16
  405e6c:	2d10      	cmp	r5, #16
  405e6e:	f340 8195 	ble.w	40619c <_svfprintf_r+0xf24>
  405e72:	3301      	adds	r3, #1
  405e74:	3210      	adds	r2, #16
  405e76:	2b07      	cmp	r3, #7
  405e78:	922d      	str	r2, [sp, #180]	; 0xb4
  405e7a:	932c      	str	r3, [sp, #176]	; 0xb0
  405e7c:	e886 0180 	stmia.w	r6, {r7, r8}
  405e80:	ddf2      	ble.n	405e68 <_svfprintf_r+0xbf0>
  405e82:	4658      	mov	r0, fp
  405e84:	4621      	mov	r1, r4
  405e86:	aa2b      	add	r2, sp, #172	; 0xac
  405e88:	f002 fe7a 	bl	408b80 <__ssprint_r>
  405e8c:	2800      	cmp	r0, #0
  405e8e:	f47f ab0b 	bne.w	4054a8 <_svfprintf_r+0x230>
  405e92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  405e94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  405e96:	ae38      	add	r6, sp, #224	; 0xe0
  405e98:	e7e7      	b.n	405e6a <_svfprintf_r+0xbf2>
  405e9a:	980d      	ldr	r0, [sp, #52]	; 0x34
  405e9c:	990c      	ldr	r1, [sp, #48]	; 0x30
  405e9e:	aa2b      	add	r2, sp, #172	; 0xac
  405ea0:	f002 fe6e 	bl	408b80 <__ssprint_r>
  405ea4:	2800      	cmp	r0, #0
  405ea6:	f47f aaff 	bne.w	4054a8 <_svfprintf_r+0x230>
  405eaa:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  405eae:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  405eb2:	ae38      	add	r6, sp, #224	; 0xe0
  405eb4:	f7ff bbd8 	b.w	405668 <_svfprintf_r+0x3f0>
  405eb8:	1e6f      	subs	r7, r5, #1
  405eba:	2f00      	cmp	r7, #0
  405ebc:	f77f af50 	ble.w	405d60 <_svfprintf_r+0xae8>
  405ec0:	2f10      	cmp	r7, #16
  405ec2:	4db3      	ldr	r5, [pc, #716]	; (406190 <_svfprintf_r+0xf18>)
  405ec4:	dd23      	ble.n	405f0e <_svfprintf_r+0xc96>
  405ec6:	4643      	mov	r3, r8
  405ec8:	f04f 0a10 	mov.w	sl, #16
  405ecc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  405ed0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405ed4:	e004      	b.n	405ee0 <_svfprintf_r+0xc68>
  405ed6:	3f10      	subs	r7, #16
  405ed8:	2f10      	cmp	r7, #16
  405eda:	f106 0608 	add.w	r6, r6, #8
  405ede:	dd15      	ble.n	405f0c <_svfprintf_r+0xc94>
  405ee0:	3401      	adds	r4, #1
  405ee2:	3310      	adds	r3, #16
  405ee4:	2c07      	cmp	r4, #7
  405ee6:	932d      	str	r3, [sp, #180]	; 0xb4
  405ee8:	942c      	str	r4, [sp, #176]	; 0xb0
  405eea:	e886 0420 	stmia.w	r6, {r5, sl}
  405eee:	ddf2      	ble.n	405ed6 <_svfprintf_r+0xc5e>
  405ef0:	4640      	mov	r0, r8
  405ef2:	4659      	mov	r1, fp
  405ef4:	aa2b      	add	r2, sp, #172	; 0xac
  405ef6:	f002 fe43 	bl	408b80 <__ssprint_r>
  405efa:	2800      	cmp	r0, #0
  405efc:	f47f aad4 	bne.w	4054a8 <_svfprintf_r+0x230>
  405f00:	3f10      	subs	r7, #16
  405f02:	2f10      	cmp	r7, #16
  405f04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  405f06:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  405f08:	ae38      	add	r6, sp, #224	; 0xe0
  405f0a:	dce9      	bgt.n	405ee0 <_svfprintf_r+0xc68>
  405f0c:	4698      	mov	r8, r3
  405f0e:	3401      	adds	r4, #1
  405f10:	44b8      	add	r8, r7
  405f12:	2c07      	cmp	r4, #7
  405f14:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  405f18:	942c      	str	r4, [sp, #176]	; 0xb0
  405f1a:	e886 00a0 	stmia.w	r6, {r5, r7}
  405f1e:	f77f af1e 	ble.w	405d5e <_svfprintf_r+0xae6>
  405f22:	980d      	ldr	r0, [sp, #52]	; 0x34
  405f24:	990c      	ldr	r1, [sp, #48]	; 0x30
  405f26:	aa2b      	add	r2, sp, #172	; 0xac
  405f28:	f002 fe2a 	bl	408b80 <__ssprint_r>
  405f2c:	2800      	cmp	r0, #0
  405f2e:	f47f aabb 	bne.w	4054a8 <_svfprintf_r+0x230>
  405f32:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  405f36:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  405f38:	ae38      	add	r6, sp, #224	; 0xe0
  405f3a:	e711      	b.n	405d60 <_svfprintf_r+0xae8>
  405f3c:	4694      	mov	ip, r2
  405f3e:	3301      	adds	r3, #1
  405f40:	44a4      	add	ip, r4
  405f42:	2b07      	cmp	r3, #7
  405f44:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  405f48:	932c      	str	r3, [sp, #176]	; 0xb0
  405f4a:	6035      	str	r5, [r6, #0]
  405f4c:	6074      	str	r4, [r6, #4]
  405f4e:	f77f ac04 	ble.w	40575a <_svfprintf_r+0x4e2>
  405f52:	e713      	b.n	405d7c <_svfprintf_r+0xb04>
  405f54:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  405f58:	4620      	mov	r0, r4
  405f5a:	4629      	mov	r1, r5
  405f5c:	220a      	movs	r2, #10
  405f5e:	2300      	movs	r3, #0
  405f60:	f002 ff3a 	bl	408dd8 <__aeabi_uldivmod>
  405f64:	3230      	adds	r2, #48	; 0x30
  405f66:	f88b 2000 	strb.w	r2, [fp]
  405f6a:	4620      	mov	r0, r4
  405f6c:	4629      	mov	r1, r5
  405f6e:	220a      	movs	r2, #10
  405f70:	2300      	movs	r3, #0
  405f72:	f002 ff31 	bl	408dd8 <__aeabi_uldivmod>
  405f76:	4604      	mov	r4, r0
  405f78:	460d      	mov	r5, r1
  405f7a:	ea54 0c05 	orrs.w	ip, r4, r5
  405f7e:	465f      	mov	r7, fp
  405f80:	f10b 3bff 	add.w	fp, fp, #4294967295
  405f84:	d1e8      	bne.n	405f58 <_svfprintf_r+0xce0>
  405f86:	9d08      	ldr	r5, [sp, #32]
  405f88:	1bec      	subs	r4, r5, r7
  405f8a:	f7ff bb03 	b.w	405594 <_svfprintf_r+0x31c>
  405f8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  405f90:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  405f94:	682c      	ldr	r4, [r5, #0]
  405f96:	17e5      	asrs	r5, r4, #31
  405f98:	4622      	mov	r2, r4
  405f9a:	462b      	mov	r3, r5
  405f9c:	f10c 0c04 	add.w	ip, ip, #4
  405fa0:	2a00      	cmp	r2, #0
  405fa2:	f173 0000 	sbcs.w	r0, r3, #0
  405fa6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405faa:	f6bf ac75 	bge.w	405898 <_svfprintf_r+0x620>
  405fae:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405fb2:	4264      	negs	r4, r4
  405fb4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405fb8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  405fbc:	2301      	movs	r3, #1
  405fbe:	f7ff bac9 	b.w	405554 <_svfprintf_r+0x2dc>
  405fc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  405fc4:	682c      	ldr	r4, [r5, #0]
  405fc6:	3504      	adds	r5, #4
  405fc8:	9510      	str	r5, [sp, #64]	; 0x40
  405fca:	2500      	movs	r5, #0
  405fcc:	f7ff babe 	b.w	40554c <_svfprintf_r+0x2d4>
  405fd0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  405fd2:	682c      	ldr	r4, [r5, #0]
  405fd4:	3504      	adds	r5, #4
  405fd6:	9510      	str	r5, [sp, #64]	; 0x40
  405fd8:	2301      	movs	r3, #1
  405fda:	2500      	movs	r5, #0
  405fdc:	f7ff bab6 	b.w	40554c <_svfprintf_r+0x2d4>
  405fe0:	980d      	ldr	r0, [sp, #52]	; 0x34
  405fe2:	990c      	ldr	r1, [sp, #48]	; 0x30
  405fe4:	aa2b      	add	r2, sp, #172	; 0xac
  405fe6:	f002 fdcb 	bl	408b80 <__ssprint_r>
  405fea:	2800      	cmp	r0, #0
  405fec:	f47f aa5c 	bne.w	4054a8 <_svfprintf_r+0x230>
  405ff0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  405ff4:	ae38      	add	r6, sp, #224	; 0xe0
  405ff6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405ff8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405ffa:	442f      	add	r7, r5
  405ffc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  405ffe:	42ac      	cmp	r4, r5
  406000:	db42      	blt.n	406088 <_svfprintf_r+0xe10>
  406002:	9d09      	ldr	r5, [sp, #36]	; 0x24
  406004:	07e9      	lsls	r1, r5, #31
  406006:	d43f      	bmi.n	406088 <_svfprintf_r+0xe10>
  406008:	9811      	ldr	r0, [sp, #68]	; 0x44
  40600a:	ebc7 050a 	rsb	r5, r7, sl
  40600e:	1b04      	subs	r4, r0, r4
  406010:	42ac      	cmp	r4, r5
  406012:	bfb8      	it	lt
  406014:	4625      	movlt	r5, r4
  406016:	2d00      	cmp	r5, #0
  406018:	dd0b      	ble.n	406032 <_svfprintf_r+0xdba>
  40601a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40601c:	6037      	str	r7, [r6, #0]
  40601e:	3301      	adds	r3, #1
  406020:	44ac      	add	ip, r5
  406022:	2b07      	cmp	r3, #7
  406024:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  406028:	6075      	str	r5, [r6, #4]
  40602a:	932c      	str	r3, [sp, #176]	; 0xb0
  40602c:	f300 8252 	bgt.w	4064d4 <_svfprintf_r+0x125c>
  406030:	3608      	adds	r6, #8
  406032:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  406036:	1b64      	subs	r4, r4, r5
  406038:	2c00      	cmp	r4, #0
  40603a:	f77f ab8f 	ble.w	40575c <_svfprintf_r+0x4e4>
  40603e:	2c10      	cmp	r4, #16
  406040:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  406042:	4d53      	ldr	r5, [pc, #332]	; (406190 <_svfprintf_r+0xf18>)
  406044:	f77f af7b 	ble.w	405f3e <_svfprintf_r+0xcc6>
  406048:	2710      	movs	r7, #16
  40604a:	4662      	mov	r2, ip
  40604c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406050:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  406054:	e004      	b.n	406060 <_svfprintf_r+0xde8>
  406056:	3608      	adds	r6, #8
  406058:	3c10      	subs	r4, #16
  40605a:	2c10      	cmp	r4, #16
  40605c:	f77f af6e 	ble.w	405f3c <_svfprintf_r+0xcc4>
  406060:	3301      	adds	r3, #1
  406062:	3210      	adds	r2, #16
  406064:	2b07      	cmp	r3, #7
  406066:	922d      	str	r2, [sp, #180]	; 0xb4
  406068:	932c      	str	r3, [sp, #176]	; 0xb0
  40606a:	e886 00a0 	stmia.w	r6, {r5, r7}
  40606e:	ddf2      	ble.n	406056 <_svfprintf_r+0xdde>
  406070:	4640      	mov	r0, r8
  406072:	4651      	mov	r1, sl
  406074:	aa2b      	add	r2, sp, #172	; 0xac
  406076:	f002 fd83 	bl	408b80 <__ssprint_r>
  40607a:	2800      	cmp	r0, #0
  40607c:	f47f aa14 	bne.w	4054a8 <_svfprintf_r+0x230>
  406080:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  406082:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  406084:	ae38      	add	r6, sp, #224	; 0xe0
  406086:	e7e7      	b.n	406058 <_svfprintf_r+0xde0>
  406088:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40608a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40608c:	6035      	str	r5, [r6, #0]
  40608e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  406090:	6075      	str	r5, [r6, #4]
  406092:	3301      	adds	r3, #1
  406094:	44ac      	add	ip, r5
  406096:	2b07      	cmp	r3, #7
  406098:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40609c:	932c      	str	r3, [sp, #176]	; 0xb0
  40609e:	f300 81fb 	bgt.w	406498 <_svfprintf_r+0x1220>
  4060a2:	3608      	adds	r6, #8
  4060a4:	e7b0      	b.n	406008 <_svfprintf_r+0xd90>
  4060a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4060a8:	07ea      	lsls	r2, r5, #31
  4060aa:	f53f ae27 	bmi.w	405cfc <_svfprintf_r+0xa84>
  4060ae:	3401      	adds	r4, #1
  4060b0:	f10c 0801 	add.w	r8, ip, #1
  4060b4:	2301      	movs	r3, #1
  4060b6:	2c07      	cmp	r4, #7
  4060b8:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4060bc:	942c      	str	r4, [sp, #176]	; 0xb0
  4060be:	6037      	str	r7, [r6, #0]
  4060c0:	6073      	str	r3, [r6, #4]
  4060c2:	f77f ae4c 	ble.w	405d5e <_svfprintf_r+0xae6>
  4060c6:	e72c      	b.n	405f22 <_svfprintf_r+0xcaa>
  4060c8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4060ca:	990c      	ldr	r1, [sp, #48]	; 0x30
  4060cc:	aa2b      	add	r2, sp, #172	; 0xac
  4060ce:	f002 fd57 	bl	408b80 <__ssprint_r>
  4060d2:	2800      	cmp	r0, #0
  4060d4:	f47f a9e8 	bne.w	4054a8 <_svfprintf_r+0x230>
  4060d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4060da:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4060dc:	ae38      	add	r6, sp, #224	; 0xe0
  4060de:	e619      	b.n	405d14 <_svfprintf_r+0xa9c>
  4060e0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4060e2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4060e4:	aa2b      	add	r2, sp, #172	; 0xac
  4060e6:	f002 fd4b 	bl	408b80 <__ssprint_r>
  4060ea:	2800      	cmp	r0, #0
  4060ec:	f47f a9dc 	bne.w	4054a8 <_svfprintf_r+0x230>
  4060f0:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  4060f4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4060f6:	ae38      	add	r6, sp, #224	; 0xe0
  4060f8:	e61b      	b.n	405d32 <_svfprintf_r+0xaba>
  4060fa:	980d      	ldr	r0, [sp, #52]	; 0x34
  4060fc:	990c      	ldr	r1, [sp, #48]	; 0x30
  4060fe:	aa2b      	add	r2, sp, #172	; 0xac
  406100:	f002 fd3e 	bl	408b80 <__ssprint_r>
  406104:	2800      	cmp	r0, #0
  406106:	f47f a9cf 	bne.w	4054a8 <_svfprintf_r+0x230>
  40610a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40610e:	ae38      	add	r6, sp, #224	; 0xe0
  406110:	f7ff bad2 	b.w	4056b8 <_svfprintf_r+0x440>
  406114:	f002 fcfa 	bl	408b0c <__fpclassifyd>
  406118:	2800      	cmp	r0, #0
  40611a:	f040 80c2 	bne.w	4062a2 <_svfprintf_r+0x102a>
  40611e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406120:	4f1c      	ldr	r7, [pc, #112]	; (406194 <_svfprintf_r+0xf1c>)
  406122:	4b1d      	ldr	r3, [pc, #116]	; (406198 <_svfprintf_r+0xf20>)
  406124:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  406128:	900a      	str	r0, [sp, #40]	; 0x28
  40612a:	f04f 0c03 	mov.w	ip, #3
  40612e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  406132:	9409      	str	r4, [sp, #36]	; 0x24
  406134:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  406138:	9014      	str	r0, [sp, #80]	; 0x50
  40613a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40613e:	bfd8      	it	le
  406140:	461f      	movle	r7, r3
  406142:	4664      	mov	r4, ip
  406144:	f7ff ba2f 	b.w	4055a6 <_svfprintf_r+0x32e>
  406148:	e9d3 4500 	ldrd	r4, r5, [r3]
  40614c:	3308      	adds	r3, #8
  40614e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  406152:	9310      	str	r3, [sp, #64]	; 0x40
  406154:	e476      	b.n	405a44 <_svfprintf_r+0x7cc>
  406156:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40615a:	f01c 0f10 	tst.w	ip, #16
  40615e:	f000 8155 	beq.w	40640c <_svfprintf_r+0x1194>
  406162:	9c10      	ldr	r4, [sp, #64]	; 0x40
  406164:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406166:	6823      	ldr	r3, [r4, #0]
  406168:	3404      	adds	r4, #4
  40616a:	9410      	str	r4, [sp, #64]	; 0x40
  40616c:	601d      	str	r5, [r3, #0]
  40616e:	f7ff b8a9 	b.w	4052c4 <_svfprintf_r+0x4c>
  406172:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406174:	0664      	lsls	r4, r4, #25
  406176:	f140 8142 	bpl.w	4063fe <_svfprintf_r+0x1186>
  40617a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40617e:	f8bc 4000 	ldrh.w	r4, [ip]
  406182:	f10c 0c04 	add.w	ip, ip, #4
  406186:	2500      	movs	r5, #0
  406188:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40618c:	f7ff b9ca 	b.w	405524 <_svfprintf_r+0x2ac>
  406190:	00409bc8 	.word	0x00409bc8
  406194:	00409be4 	.word	0x00409be4
  406198:	00409be0 	.word	0x00409be0
  40619c:	462c      	mov	r4, r5
  40619e:	463d      	mov	r5, r7
  4061a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4061a2:	4694      	mov	ip, r2
  4061a4:	3301      	adds	r3, #1
  4061a6:	44a4      	add	ip, r4
  4061a8:	2b07      	cmp	r3, #7
  4061aa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4061ae:	932c      	str	r3, [sp, #176]	; 0xb0
  4061b0:	6035      	str	r5, [r6, #0]
  4061b2:	6074      	str	r4, [r6, #4]
  4061b4:	f73f af14 	bgt.w	405fe0 <_svfprintf_r+0xd68>
  4061b8:	3608      	adds	r6, #8
  4061ba:	e71c      	b.n	405ff6 <_svfprintf_r+0xd7e>
  4061bc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4061be:	990c      	ldr	r1, [sp, #48]	; 0x30
  4061c0:	aa2b      	add	r2, sp, #172	; 0xac
  4061c2:	f002 fcdd 	bl	408b80 <__ssprint_r>
  4061c6:	2800      	cmp	r0, #0
  4061c8:	f47f a96e 	bne.w	4054a8 <_svfprintf_r+0x230>
  4061cc:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4061d0:	ae38      	add	r6, sp, #224	; 0xe0
  4061d2:	e4fd      	b.n	405bd0 <_svfprintf_r+0x958>
  4061d4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4061d6:	49b7      	ldr	r1, [pc, #732]	; (4064b4 <_svfprintf_r+0x123c>)
  4061d8:	6031      	str	r1, [r6, #0]
  4061da:	3201      	adds	r2, #1
  4061dc:	f10c 0c01 	add.w	ip, ip, #1
  4061e0:	2101      	movs	r1, #1
  4061e2:	2a07      	cmp	r2, #7
  4061e4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4061e8:	922c      	str	r2, [sp, #176]	; 0xb0
  4061ea:	6071      	str	r1, [r6, #4]
  4061ec:	f300 80f7 	bgt.w	4063de <_svfprintf_r+0x1166>
  4061f0:	3608      	adds	r6, #8
  4061f2:	461c      	mov	r4, r3
  4061f4:	b92c      	cbnz	r4, 406202 <_svfprintf_r+0xf8a>
  4061f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4061f8:	b91d      	cbnz	r5, 406202 <_svfprintf_r+0xf8a>
  4061fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4061fc:	07e8      	lsls	r0, r5, #31
  4061fe:	f57f aaad 	bpl.w	40575c <_svfprintf_r+0x4e4>
  406202:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  406204:	9918      	ldr	r1, [sp, #96]	; 0x60
  406206:	9d15      	ldr	r5, [sp, #84]	; 0x54
  406208:	6035      	str	r5, [r6, #0]
  40620a:	3301      	adds	r3, #1
  40620c:	4461      	add	r1, ip
  40620e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  406210:	912d      	str	r1, [sp, #180]	; 0xb4
  406212:	2b07      	cmp	r3, #7
  406214:	6075      	str	r5, [r6, #4]
  406216:	932c      	str	r3, [sp, #176]	; 0xb0
  406218:	f300 81de 	bgt.w	4065d8 <_svfprintf_r+0x1360>
  40621c:	f106 0208 	add.w	r2, r6, #8
  406220:	4264      	negs	r4, r4
  406222:	2c00      	cmp	r4, #0
  406224:	f340 810b 	ble.w	40643e <_svfprintf_r+0x11c6>
  406228:	2c10      	cmp	r4, #16
  40622a:	4da3      	ldr	r5, [pc, #652]	; (4064b8 <_svfprintf_r+0x1240>)
  40622c:	f340 8148 	ble.w	4064c0 <_svfprintf_r+0x1248>
  406230:	46a3      	mov	fp, r4
  406232:	2610      	movs	r6, #16
  406234:	460c      	mov	r4, r1
  406236:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40623a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40623e:	e006      	b.n	40624e <_svfprintf_r+0xfd6>
  406240:	3208      	adds	r2, #8
  406242:	f1ab 0b10 	sub.w	fp, fp, #16
  406246:	f1bb 0f10 	cmp.w	fp, #16
  40624a:	f340 8137 	ble.w	4064bc <_svfprintf_r+0x1244>
  40624e:	3301      	adds	r3, #1
  406250:	3410      	adds	r4, #16
  406252:	2b07      	cmp	r3, #7
  406254:	942d      	str	r4, [sp, #180]	; 0xb4
  406256:	932c      	str	r3, [sp, #176]	; 0xb0
  406258:	e882 0060 	stmia.w	r2, {r5, r6}
  40625c:	ddf0      	ble.n	406240 <_svfprintf_r+0xfc8>
  40625e:	4640      	mov	r0, r8
  406260:	4651      	mov	r1, sl
  406262:	aa2b      	add	r2, sp, #172	; 0xac
  406264:	f002 fc8c 	bl	408b80 <__ssprint_r>
  406268:	2800      	cmp	r0, #0
  40626a:	f47f a91d 	bne.w	4054a8 <_svfprintf_r+0x230>
  40626e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  406270:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  406272:	aa38      	add	r2, sp, #224	; 0xe0
  406274:	e7e5      	b.n	406242 <_svfprintf_r+0xfca>
  406276:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406278:	f893 8001 	ldrb.w	r8, [r3, #1]
  40627c:	f044 0420 	orr.w	r4, r4, #32
  406280:	f109 0901 	add.w	r9, r9, #1
  406284:	9409      	str	r4, [sp, #36]	; 0x24
  406286:	f7ff b853 	b.w	405330 <_svfprintf_r+0xb8>
  40628a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40628c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40628e:	aa2b      	add	r2, sp, #172	; 0xac
  406290:	f002 fc76 	bl	408b80 <__ssprint_r>
  406294:	2800      	cmp	r0, #0
  406296:	f47f a907 	bne.w	4054a8 <_svfprintf_r+0x230>
  40629a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40629e:	ae38      	add	r6, sp, #224	; 0xe0
  4062a0:	e4ac      	b.n	405bfc <_svfprintf_r+0x984>
  4062a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4062a4:	3501      	adds	r5, #1
  4062a6:	f028 0a20 	bic.w	sl, r8, #32
  4062aa:	f000 80a5 	beq.w	4063f8 <_svfprintf_r+0x1180>
  4062ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4062b2:	d104      	bne.n	4062be <_svfprintf_r+0x1046>
  4062b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4062b6:	2d00      	cmp	r5, #0
  4062b8:	bf08      	it	eq
  4062ba:	2501      	moveq	r5, #1
  4062bc:	950a      	str	r5, [sp, #40]	; 0x28
  4062be:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4062c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4062c6:	2b00      	cmp	r3, #0
  4062c8:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  4062cc:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4062d0:	f2c0 819c 	blt.w	40660c <_svfprintf_r+0x1394>
  4062d4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4062d8:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  4062dc:	f04f 0b00 	mov.w	fp, #0
  4062e0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4062e4:	f000 819b 	beq.w	40661e <_svfprintf_r+0x13a6>
  4062e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  4062ec:	f000 81a9 	beq.w	406642 <_svfprintf_r+0x13ca>
  4062f0:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  4062f4:	bf0a      	itet	eq
  4062f6:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  4062f8:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4062fa:	1c65      	addeq	r5, r4, #1
  4062fc:	2002      	movs	r0, #2
  4062fe:	a925      	add	r1, sp, #148	; 0x94
  406300:	aa26      	add	r2, sp, #152	; 0x98
  406302:	ab29      	add	r3, sp, #164	; 0xa4
  406304:	e88d 0021 	stmia.w	sp, {r0, r5}
  406308:	9203      	str	r2, [sp, #12]
  40630a:	9304      	str	r3, [sp, #16]
  40630c:	9102      	str	r1, [sp, #8]
  40630e:	980d      	ldr	r0, [sp, #52]	; 0x34
  406310:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  406314:	f000 fad4 	bl	4068c0 <_dtoa_r>
  406318:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40631c:	4607      	mov	r7, r0
  40631e:	d002      	beq.n	406326 <_svfprintf_r+0x10ae>
  406320:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  406324:	d105      	bne.n	406332 <_svfprintf_r+0x10ba>
  406326:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40632a:	f01c 0f01 	tst.w	ip, #1
  40632e:	f000 819c 	beq.w	40666a <_svfprintf_r+0x13f2>
  406332:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  406336:	eb07 0405 	add.w	r4, r7, r5
  40633a:	f000 811c 	beq.w	406576 <_svfprintf_r+0x12fe>
  40633e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  406342:	2200      	movs	r2, #0
  406344:	2300      	movs	r3, #0
  406346:	f7fe fe7d 	bl	405044 <__aeabi_dcmpeq>
  40634a:	2800      	cmp	r0, #0
  40634c:	f040 8105 	bne.w	40655a <_svfprintf_r+0x12e2>
  406350:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  406352:	429c      	cmp	r4, r3
  406354:	d906      	bls.n	406364 <_svfprintf_r+0x10ec>
  406356:	2130      	movs	r1, #48	; 0x30
  406358:	1c5a      	adds	r2, r3, #1
  40635a:	9229      	str	r2, [sp, #164]	; 0xa4
  40635c:	7019      	strb	r1, [r3, #0]
  40635e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  406360:	429c      	cmp	r4, r3
  406362:	d8f9      	bhi.n	406358 <_svfprintf_r+0x10e0>
  406364:	1bdb      	subs	r3, r3, r7
  406366:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40636a:	9311      	str	r3, [sp, #68]	; 0x44
  40636c:	f000 80ed 	beq.w	40654a <_svfprintf_r+0x12d2>
  406370:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  406374:	f340 81f2 	ble.w	40675c <_svfprintf_r+0x14e4>
  406378:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40637c:	f000 8168 	beq.w	406650 <_svfprintf_r+0x13d8>
  406380:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406382:	9414      	str	r4, [sp, #80]	; 0x50
  406384:	9c11      	ldr	r4, [sp, #68]	; 0x44
  406386:	9d14      	ldr	r5, [sp, #80]	; 0x50
  406388:	42ac      	cmp	r4, r5
  40638a:	f300 8132 	bgt.w	4065f2 <_svfprintf_r+0x137a>
  40638e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  406392:	f01c 0f01 	tst.w	ip, #1
  406396:	f040 81ad 	bne.w	4066f4 <_svfprintf_r+0x147c>
  40639a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40639e:	462c      	mov	r4, r5
  4063a0:	f04f 0867 	mov.w	r8, #103	; 0x67
  4063a4:	f1bb 0f00 	cmp.w	fp, #0
  4063a8:	f040 80b2 	bne.w	406510 <_svfprintf_r+0x1298>
  4063ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4063ae:	930b      	str	r3, [sp, #44]	; 0x2c
  4063b0:	9509      	str	r5, [sp, #36]	; 0x24
  4063b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  4063b6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4063ba:	f7ff b8f4 	b.w	4055a6 <_svfprintf_r+0x32e>
  4063be:	980d      	ldr	r0, [sp, #52]	; 0x34
  4063c0:	2140      	movs	r1, #64	; 0x40
  4063c2:	f001 fad1 	bl	407968 <_malloc_r>
  4063c6:	6020      	str	r0, [r4, #0]
  4063c8:	6120      	str	r0, [r4, #16]
  4063ca:	2800      	cmp	r0, #0
  4063cc:	f000 81bf 	beq.w	40674e <_svfprintf_r+0x14d6>
  4063d0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  4063d4:	2340      	movs	r3, #64	; 0x40
  4063d6:	f8cc 3014 	str.w	r3, [ip, #20]
  4063da:	f7fe bf63 	b.w	4052a4 <_svfprintf_r+0x2c>
  4063de:	980d      	ldr	r0, [sp, #52]	; 0x34
  4063e0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4063e2:	aa2b      	add	r2, sp, #172	; 0xac
  4063e4:	f002 fbcc 	bl	408b80 <__ssprint_r>
  4063e8:	2800      	cmp	r0, #0
  4063ea:	f47f a85d 	bne.w	4054a8 <_svfprintf_r+0x230>
  4063ee:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4063f0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4063f4:	ae38      	add	r6, sp, #224	; 0xe0
  4063f6:	e6fd      	b.n	4061f4 <_svfprintf_r+0xf7c>
  4063f8:	2406      	movs	r4, #6
  4063fa:	940a      	str	r4, [sp, #40]	; 0x28
  4063fc:	e75f      	b.n	4062be <_svfprintf_r+0x1046>
  4063fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
  406400:	682c      	ldr	r4, [r5, #0]
  406402:	3504      	adds	r5, #4
  406404:	9510      	str	r5, [sp, #64]	; 0x40
  406406:	2500      	movs	r5, #0
  406408:	f7ff b88c 	b.w	405524 <_svfprintf_r+0x2ac>
  40640c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  406410:	f01c 0f40 	tst.w	ip, #64	; 0x40
  406414:	f000 8087 	beq.w	406526 <_svfprintf_r+0x12ae>
  406418:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40641a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40641c:	6823      	ldr	r3, [r4, #0]
  40641e:	3404      	adds	r4, #4
  406420:	9410      	str	r4, [sp, #64]	; 0x40
  406422:	801d      	strh	r5, [r3, #0]
  406424:	f7fe bf4e 	b.w	4052c4 <_svfprintf_r+0x4c>
  406428:	980d      	ldr	r0, [sp, #52]	; 0x34
  40642a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40642c:	aa2b      	add	r2, sp, #172	; 0xac
  40642e:	f002 fba7 	bl	408b80 <__ssprint_r>
  406432:	2800      	cmp	r0, #0
  406434:	f47f a838 	bne.w	4054a8 <_svfprintf_r+0x230>
  406438:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40643a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40643c:	aa38      	add	r2, sp, #224	; 0xe0
  40643e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  406442:	9c11      	ldr	r4, [sp, #68]	; 0x44
  406444:	6017      	str	r7, [r2, #0]
  406446:	3301      	adds	r3, #1
  406448:	448c      	add	ip, r1
  40644a:	2b07      	cmp	r3, #7
  40644c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  406450:	932c      	str	r3, [sp, #176]	; 0xb0
  406452:	6054      	str	r4, [r2, #4]
  406454:	f73f ac92 	bgt.w	405d7c <_svfprintf_r+0xb04>
  406458:	f102 0608 	add.w	r6, r2, #8
  40645c:	f7ff b97e 	b.w	40575c <_svfprintf_r+0x4e4>
  406460:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  406464:	f7fe fed8 	bl	405218 <strlen>
  406468:	9510      	str	r5, [sp, #64]	; 0x40
  40646a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  40646e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406470:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  406474:	4604      	mov	r4, r0
  406476:	9514      	str	r5, [sp, #80]	; 0x50
  406478:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40647c:	f7ff b893 	b.w	4055a6 <_svfprintf_r+0x32e>
  406480:	980d      	ldr	r0, [sp, #52]	; 0x34
  406482:	990c      	ldr	r1, [sp, #48]	; 0x30
  406484:	aa2b      	add	r2, sp, #172	; 0xac
  406486:	f002 fb7b 	bl	408b80 <__ssprint_r>
  40648a:	2800      	cmp	r0, #0
  40648c:	f47f a80c 	bne.w	4054a8 <_svfprintf_r+0x230>
  406490:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  406494:	ae38      	add	r6, sp, #224	; 0xe0
  406496:	e4cc      	b.n	405e32 <_svfprintf_r+0xbba>
  406498:	980d      	ldr	r0, [sp, #52]	; 0x34
  40649a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40649c:	aa2b      	add	r2, sp, #172	; 0xac
  40649e:	f002 fb6f 	bl	408b80 <__ssprint_r>
  4064a2:	2800      	cmp	r0, #0
  4064a4:	f47f a800 	bne.w	4054a8 <_svfprintf_r+0x230>
  4064a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4064aa:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4064ae:	ae38      	add	r6, sp, #224	; 0xe0
  4064b0:	e5aa      	b.n	406008 <_svfprintf_r+0xd90>
  4064b2:	bf00      	nop
  4064b4:	00409c18 	.word	0x00409c18
  4064b8:	00409bc8 	.word	0x00409bc8
  4064bc:	4621      	mov	r1, r4
  4064be:	465c      	mov	r4, fp
  4064c0:	3301      	adds	r3, #1
  4064c2:	4421      	add	r1, r4
  4064c4:	2b07      	cmp	r3, #7
  4064c6:	912d      	str	r1, [sp, #180]	; 0xb4
  4064c8:	932c      	str	r3, [sp, #176]	; 0xb0
  4064ca:	6015      	str	r5, [r2, #0]
  4064cc:	6054      	str	r4, [r2, #4]
  4064ce:	dcab      	bgt.n	406428 <_svfprintf_r+0x11b0>
  4064d0:	3208      	adds	r2, #8
  4064d2:	e7b4      	b.n	40643e <_svfprintf_r+0x11c6>
  4064d4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4064d6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4064d8:	aa2b      	add	r2, sp, #172	; 0xac
  4064da:	f002 fb51 	bl	408b80 <__ssprint_r>
  4064de:	2800      	cmp	r0, #0
  4064e0:	f47e afe2 	bne.w	4054a8 <_svfprintf_r+0x230>
  4064e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4064e6:	9911      	ldr	r1, [sp, #68]	; 0x44
  4064e8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4064ec:	1b0c      	subs	r4, r1, r4
  4064ee:	ae38      	add	r6, sp, #224	; 0xe0
  4064f0:	e59f      	b.n	406032 <_svfprintf_r+0xdba>
  4064f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4064f4:	9714      	str	r7, [sp, #80]	; 0x50
  4064f6:	2c06      	cmp	r4, #6
  4064f8:	bf28      	it	cs
  4064fa:	2406      	movcs	r4, #6
  4064fc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  406500:	46ba      	mov	sl, r7
  406502:	970a      	str	r7, [sp, #40]	; 0x28
  406504:	9510      	str	r5, [sp, #64]	; 0x40
  406506:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40650a:	4f97      	ldr	r7, [pc, #604]	; (406768 <_svfprintf_r+0x14f0>)
  40650c:	f7ff b84b 	b.w	4055a6 <_svfprintf_r+0x32e>
  406510:	9d12      	ldr	r5, [sp, #72]	; 0x48
  406512:	9509      	str	r5, [sp, #36]	; 0x24
  406514:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  406518:	2500      	movs	r5, #0
  40651a:	930b      	str	r3, [sp, #44]	; 0x2c
  40651c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  406520:	950a      	str	r5, [sp, #40]	; 0x28
  406522:	f7ff b843 	b.w	4055ac <_svfprintf_r+0x334>
  406526:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40652a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40652c:	f8dc 3000 	ldr.w	r3, [ip]
  406530:	f10c 0c04 	add.w	ip, ip, #4
  406534:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  406538:	601c      	str	r4, [r3, #0]
  40653a:	f7fe bec3 	b.w	4052c4 <_svfprintf_r+0x4c>
  40653e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  406542:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  406546:	f7ff ba8f 	b.w	405a68 <_svfprintf_r+0x7f0>
  40654a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40654c:	1cdc      	adds	r4, r3, #3
  40654e:	db19      	blt.n	406584 <_svfprintf_r+0x130c>
  406550:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406552:	429c      	cmp	r4, r3
  406554:	db16      	blt.n	406584 <_svfprintf_r+0x130c>
  406556:	9314      	str	r3, [sp, #80]	; 0x50
  406558:	e714      	b.n	406384 <_svfprintf_r+0x110c>
  40655a:	4623      	mov	r3, r4
  40655c:	e702      	b.n	406364 <_svfprintf_r+0x10ec>
  40655e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  406562:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  406566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406568:	9510      	str	r5, [sp, #64]	; 0x40
  40656a:	900a      	str	r0, [sp, #40]	; 0x28
  40656c:	9014      	str	r0, [sp, #80]	; 0x50
  40656e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  406572:	f7ff b818 	b.w	4055a6 <_svfprintf_r+0x32e>
  406576:	783b      	ldrb	r3, [r7, #0]
  406578:	2b30      	cmp	r3, #48	; 0x30
  40657a:	f000 80ad 	beq.w	4066d8 <_svfprintf_r+0x1460>
  40657e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  406580:	442c      	add	r4, r5
  406582:	e6dc      	b.n	40633e <_svfprintf_r+0x10c6>
  406584:	f1a8 0802 	sub.w	r8, r8, #2
  406588:	3b01      	subs	r3, #1
  40658a:	2b00      	cmp	r3, #0
  40658c:	9325      	str	r3, [sp, #148]	; 0x94
  40658e:	bfba      	itte	lt
  406590:	425b      	neglt	r3, r3
  406592:	222d      	movlt	r2, #45	; 0x2d
  406594:	222b      	movge	r2, #43	; 0x2b
  406596:	2b09      	cmp	r3, #9
  406598:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  40659c:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  4065a0:	dc65      	bgt.n	40666e <_svfprintf_r+0x13f6>
  4065a2:	3330      	adds	r3, #48	; 0x30
  4065a4:	2230      	movs	r2, #48	; 0x30
  4065a6:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  4065aa:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  4065ae:	ab28      	add	r3, sp, #160	; 0xa0
  4065b0:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4065b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4065b4:	aa27      	add	r2, sp, #156	; 0x9c
  4065b6:	1a9a      	subs	r2, r3, r2
  4065b8:	2d01      	cmp	r5, #1
  4065ba:	9219      	str	r2, [sp, #100]	; 0x64
  4065bc:	4414      	add	r4, r2
  4065be:	f340 80b7 	ble.w	406730 <_svfprintf_r+0x14b8>
  4065c2:	3401      	adds	r4, #1
  4065c4:	2500      	movs	r5, #0
  4065c6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4065ca:	9514      	str	r5, [sp, #80]	; 0x50
  4065cc:	e6ea      	b.n	4063a4 <_svfprintf_r+0x112c>
  4065ce:	2400      	movs	r4, #0
  4065d0:	4681      	mov	r9, r0
  4065d2:	940a      	str	r4, [sp, #40]	; 0x28
  4065d4:	f7fe beae 	b.w	405334 <_svfprintf_r+0xbc>
  4065d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4065da:	990c      	ldr	r1, [sp, #48]	; 0x30
  4065dc:	aa2b      	add	r2, sp, #172	; 0xac
  4065de:	f002 facf 	bl	408b80 <__ssprint_r>
  4065e2:	2800      	cmp	r0, #0
  4065e4:	f47e af60 	bne.w	4054a8 <_svfprintf_r+0x230>
  4065e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4065ea:	992d      	ldr	r1, [sp, #180]	; 0xb4
  4065ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4065ee:	aa38      	add	r2, sp, #224	; 0xe0
  4065f0:	e616      	b.n	406220 <_svfprintf_r+0xfa8>
  4065f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4065f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4065f6:	2c00      	cmp	r4, #0
  4065f8:	bfd4      	ite	le
  4065fa:	f1c4 0402 	rsble	r4, r4, #2
  4065fe:	2401      	movgt	r4, #1
  406600:	442c      	add	r4, r5
  406602:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  406606:	f04f 0867 	mov.w	r8, #103	; 0x67
  40660a:	e6cb      	b.n	4063a4 <_svfprintf_r+0x112c>
  40660c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40660e:	9816      	ldr	r0, [sp, #88]	; 0x58
  406610:	9020      	str	r0, [sp, #128]	; 0x80
  406612:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  406616:	9121      	str	r1, [sp, #132]	; 0x84
  406618:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40661c:	e660      	b.n	4062e0 <_svfprintf_r+0x1068>
  40661e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406620:	9501      	str	r5, [sp, #4]
  406622:	2003      	movs	r0, #3
  406624:	a925      	add	r1, sp, #148	; 0x94
  406626:	aa26      	add	r2, sp, #152	; 0x98
  406628:	ab29      	add	r3, sp, #164	; 0xa4
  40662a:	9000      	str	r0, [sp, #0]
  40662c:	9203      	str	r2, [sp, #12]
  40662e:	9304      	str	r3, [sp, #16]
  406630:	9102      	str	r1, [sp, #8]
  406632:	980d      	ldr	r0, [sp, #52]	; 0x34
  406634:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  406638:	f000 f942 	bl	4068c0 <_dtoa_r>
  40663c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40663e:	4607      	mov	r7, r0
  406640:	e677      	b.n	406332 <_svfprintf_r+0x10ba>
  406642:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406644:	9401      	str	r4, [sp, #4]
  406646:	2003      	movs	r0, #3
  406648:	a925      	add	r1, sp, #148	; 0x94
  40664a:	aa26      	add	r2, sp, #152	; 0x98
  40664c:	ab29      	add	r3, sp, #164	; 0xa4
  40664e:	e7ec      	b.n	40662a <_svfprintf_r+0x13b2>
  406650:	9d25      	ldr	r5, [sp, #148]	; 0x94
  406652:	9514      	str	r5, [sp, #80]	; 0x50
  406654:	2d00      	cmp	r5, #0
  406656:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406658:	dd63      	ble.n	406722 <_svfprintf_r+0x14aa>
  40665a:	bbb4      	cbnz	r4, 4066ca <_svfprintf_r+0x1452>
  40665c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40665e:	07e8      	lsls	r0, r5, #31
  406660:	d433      	bmi.n	4066ca <_svfprintf_r+0x1452>
  406662:	9c14      	ldr	r4, [sp, #80]	; 0x50
  406664:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  406668:	e69c      	b.n	4063a4 <_svfprintf_r+0x112c>
  40666a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40666c:	e67a      	b.n	406364 <_svfprintf_r+0x10ec>
  40666e:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  406672:	4d3e      	ldr	r5, [pc, #248]	; (40676c <_svfprintf_r+0x14f4>)
  406674:	17da      	asrs	r2, r3, #31
  406676:	fb85 5103 	smull	r5, r1, r5, r3
  40667a:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  40667e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  406682:	4602      	mov	r2, r0
  406684:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  406688:	f103 0030 	add.w	r0, r3, #48	; 0x30
  40668c:	2909      	cmp	r1, #9
  40668e:	7010      	strb	r0, [r2, #0]
  406690:	460b      	mov	r3, r1
  406692:	f102 30ff 	add.w	r0, r2, #4294967295
  406696:	dcec      	bgt.n	406672 <_svfprintf_r+0x13fa>
  406698:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40669c:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  4066a0:	b2d9      	uxtb	r1, r3
  4066a2:	4284      	cmp	r4, r0
  4066a4:	f802 1c01 	strb.w	r1, [r2, #-1]
  4066a8:	d95a      	bls.n	406760 <_svfprintf_r+0x14e8>
  4066aa:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  4066ae:	4613      	mov	r3, r2
  4066b0:	e001      	b.n	4066b6 <_svfprintf_r+0x143e>
  4066b2:	f813 1b01 	ldrb.w	r1, [r3], #1
  4066b6:	42a3      	cmp	r3, r4
  4066b8:	f800 1f01 	strb.w	r1, [r0, #1]!
  4066bc:	d1f9      	bne.n	4066b2 <_svfprintf_r+0x143a>
  4066be:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  4066c2:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  4066c6:	3bf6      	subs	r3, #246	; 0xf6
  4066c8:	e772      	b.n	4065b0 <_svfprintf_r+0x1338>
  4066ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4066cc:	1c6c      	adds	r4, r5, #1
  4066ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4066d0:	442c      	add	r4, r5
  4066d2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4066d6:	e665      	b.n	4063a4 <_svfprintf_r+0x112c>
  4066d8:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4066dc:	2200      	movs	r2, #0
  4066de:	2300      	movs	r3, #0
  4066e0:	f7fe fcb0 	bl	405044 <__aeabi_dcmpeq>
  4066e4:	2800      	cmp	r0, #0
  4066e6:	f47f af4a 	bne.w	40657e <_svfprintf_r+0x1306>
  4066ea:	f1c5 0501 	rsb	r5, r5, #1
  4066ee:	9525      	str	r5, [sp, #148]	; 0x94
  4066f0:	442c      	add	r4, r5
  4066f2:	e624      	b.n	40633e <_svfprintf_r+0x10c6>
  4066f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4066f6:	1c6c      	adds	r4, r5, #1
  4066f8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4066fc:	f04f 0867 	mov.w	r8, #103	; 0x67
  406700:	e650      	b.n	4063a4 <_svfprintf_r+0x112c>
  406702:	9d10      	ldr	r5, [sp, #64]	; 0x40
  406704:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  406708:	682d      	ldr	r5, [r5, #0]
  40670a:	f899 8001 	ldrb.w	r8, [r9, #1]
  40670e:	950a      	str	r5, [sp, #40]	; 0x28
  406710:	f10c 0304 	add.w	r3, ip, #4
  406714:	2d00      	cmp	r5, #0
  406716:	9310      	str	r3, [sp, #64]	; 0x40
  406718:	4681      	mov	r9, r0
  40671a:	f6be ae09 	bge.w	405330 <_svfprintf_r+0xb8>
  40671e:	f7fe be04 	b.w	40532a <_svfprintf_r+0xb2>
  406722:	b97c      	cbnz	r4, 406744 <_svfprintf_r+0x14cc>
  406724:	9d09      	ldr	r5, [sp, #36]	; 0x24
  406726:	07e9      	lsls	r1, r5, #31
  406728:	d40c      	bmi.n	406744 <_svfprintf_r+0x14cc>
  40672a:	2301      	movs	r3, #1
  40672c:	461c      	mov	r4, r3
  40672e:	e639      	b.n	4063a4 <_svfprintf_r+0x112c>
  406730:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  406734:	f01c 0301 	ands.w	r3, ip, #1
  406738:	f47f af43 	bne.w	4065c2 <_svfprintf_r+0x134a>
  40673c:	9314      	str	r3, [sp, #80]	; 0x50
  40673e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  406742:	e62f      	b.n	4063a4 <_svfprintf_r+0x112c>
  406744:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406746:	1cac      	adds	r4, r5, #2
  406748:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40674c:	e62a      	b.n	4063a4 <_svfprintf_r+0x112c>
  40674e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  406750:	230c      	movs	r3, #12
  406752:	602b      	str	r3, [r5, #0]
  406754:	f04f 30ff 	mov.w	r0, #4294967295
  406758:	f7fe beae 	b.w	4054b8 <_svfprintf_r+0x240>
  40675c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40675e:	e713      	b.n	406588 <_svfprintf_r+0x1310>
  406760:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  406764:	e724      	b.n	4065b0 <_svfprintf_r+0x1338>
  406766:	bf00      	nop
  406768:	00409c10 	.word	0x00409c10
  40676c:	66666667 	.word	0x66666667

00406770 <register_fini>:
  406770:	4b02      	ldr	r3, [pc, #8]	; (40677c <register_fini+0xc>)
  406772:	b113      	cbz	r3, 40677a <register_fini+0xa>
  406774:	4802      	ldr	r0, [pc, #8]	; (406780 <register_fini+0x10>)
  406776:	f000 b805 	b.w	406784 <atexit>
  40677a:	4770      	bx	lr
  40677c:	00000000 	.word	0x00000000
  406780:	004076f9 	.word	0x004076f9

00406784 <atexit>:
  406784:	4601      	mov	r1, r0
  406786:	2000      	movs	r0, #0
  406788:	4602      	mov	r2, r0
  40678a:	4603      	mov	r3, r0
  40678c:	f002 ba78 	b.w	408c80 <__register_exitproc>

00406790 <quorem>:
  406790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406794:	6903      	ldr	r3, [r0, #16]
  406796:	690d      	ldr	r5, [r1, #16]
  406798:	429d      	cmp	r5, r3
  40679a:	b083      	sub	sp, #12
  40679c:	4683      	mov	fp, r0
  40679e:	f300 808b 	bgt.w	4068b8 <quorem+0x128>
  4067a2:	3d01      	subs	r5, #1
  4067a4:	f101 0414 	add.w	r4, r1, #20
  4067a8:	f100 0a14 	add.w	sl, r0, #20
  4067ac:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  4067b0:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  4067b4:	3201      	adds	r2, #1
  4067b6:	fbb3 f8f2 	udiv	r8, r3, r2
  4067ba:	00aa      	lsls	r2, r5, #2
  4067bc:	4691      	mov	r9, r2
  4067be:	9200      	str	r2, [sp, #0]
  4067c0:	4452      	add	r2, sl
  4067c2:	44a1      	add	r9, r4
  4067c4:	9201      	str	r2, [sp, #4]
  4067c6:	f1b8 0f00 	cmp.w	r8, #0
  4067ca:	d03d      	beq.n	406848 <quorem+0xb8>
  4067cc:	f04f 0e00 	mov.w	lr, #0
  4067d0:	4670      	mov	r0, lr
  4067d2:	4622      	mov	r2, r4
  4067d4:	4653      	mov	r3, sl
  4067d6:	468c      	mov	ip, r1
  4067d8:	f852 6b04 	ldr.w	r6, [r2], #4
  4067dc:	6819      	ldr	r1, [r3, #0]
  4067de:	b2b7      	uxth	r7, r6
  4067e0:	0c36      	lsrs	r6, r6, #16
  4067e2:	fb07 ee08 	mla	lr, r7, r8, lr
  4067e6:	fb06 f608 	mul.w	r6, r6, r8
  4067ea:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  4067ee:	fa1f f78e 	uxth.w	r7, lr
  4067f2:	1bc7      	subs	r7, r0, r7
  4067f4:	b2b0      	uxth	r0, r6
  4067f6:	fa17 f781 	uxtah	r7, r7, r1
  4067fa:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  4067fe:	eb00 4027 	add.w	r0, r0, r7, asr #16
  406802:	b2bf      	uxth	r7, r7
  406804:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  406808:	4591      	cmp	r9, r2
  40680a:	f843 7b04 	str.w	r7, [r3], #4
  40680e:	ea4f 4020 	mov.w	r0, r0, asr #16
  406812:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  406816:	d2df      	bcs.n	4067d8 <quorem+0x48>
  406818:	9a00      	ldr	r2, [sp, #0]
  40681a:	f85a 3002 	ldr.w	r3, [sl, r2]
  40681e:	4661      	mov	r1, ip
  406820:	b993      	cbnz	r3, 406848 <quorem+0xb8>
  406822:	9a01      	ldr	r2, [sp, #4]
  406824:	1f13      	subs	r3, r2, #4
  406826:	459a      	cmp	sl, r3
  406828:	d20c      	bcs.n	406844 <quorem+0xb4>
  40682a:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40682e:	b94b      	cbnz	r3, 406844 <quorem+0xb4>
  406830:	f1a2 0308 	sub.w	r3, r2, #8
  406834:	e002      	b.n	40683c <quorem+0xac>
  406836:	681a      	ldr	r2, [r3, #0]
  406838:	3b04      	subs	r3, #4
  40683a:	b91a      	cbnz	r2, 406844 <quorem+0xb4>
  40683c:	459a      	cmp	sl, r3
  40683e:	f105 35ff 	add.w	r5, r5, #4294967295
  406842:	d3f8      	bcc.n	406836 <quorem+0xa6>
  406844:	f8cb 5010 	str.w	r5, [fp, #16]
  406848:	4658      	mov	r0, fp
  40684a:	f001 fe8d 	bl	408568 <__mcmp>
  40684e:	2800      	cmp	r0, #0
  406850:	db2e      	blt.n	4068b0 <quorem+0x120>
  406852:	f108 0801 	add.w	r8, r8, #1
  406856:	4653      	mov	r3, sl
  406858:	2200      	movs	r2, #0
  40685a:	f854 6b04 	ldr.w	r6, [r4], #4
  40685e:	6818      	ldr	r0, [r3, #0]
  406860:	b2b1      	uxth	r1, r6
  406862:	1a52      	subs	r2, r2, r1
  406864:	0c36      	lsrs	r6, r6, #16
  406866:	fa12 f180 	uxtah	r1, r2, r0
  40686a:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  40686e:	eb02 4221 	add.w	r2, r2, r1, asr #16
  406872:	b289      	uxth	r1, r1
  406874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  406878:	45a1      	cmp	r9, r4
  40687a:	f843 1b04 	str.w	r1, [r3], #4
  40687e:	ea4f 4222 	mov.w	r2, r2, asr #16
  406882:	d2ea      	bcs.n	40685a <quorem+0xca>
  406884:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  406888:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  40688c:	b982      	cbnz	r2, 4068b0 <quorem+0x120>
  40688e:	1f1a      	subs	r2, r3, #4
  406890:	4592      	cmp	sl, r2
  406892:	d20b      	bcs.n	4068ac <quorem+0x11c>
  406894:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406898:	b942      	cbnz	r2, 4068ac <quorem+0x11c>
  40689a:	3b08      	subs	r3, #8
  40689c:	e002      	b.n	4068a4 <quorem+0x114>
  40689e:	681a      	ldr	r2, [r3, #0]
  4068a0:	3b04      	subs	r3, #4
  4068a2:	b91a      	cbnz	r2, 4068ac <quorem+0x11c>
  4068a4:	459a      	cmp	sl, r3
  4068a6:	f105 35ff 	add.w	r5, r5, #4294967295
  4068aa:	d3f8      	bcc.n	40689e <quorem+0x10e>
  4068ac:	f8cb 5010 	str.w	r5, [fp, #16]
  4068b0:	4640      	mov	r0, r8
  4068b2:	b003      	add	sp, #12
  4068b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068b8:	2000      	movs	r0, #0
  4068ba:	b003      	add	sp, #12
  4068bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004068c0 <_dtoa_r>:
  4068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4068c6:	b09b      	sub	sp, #108	; 0x6c
  4068c8:	4604      	mov	r4, r0
  4068ca:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  4068cc:	4692      	mov	sl, r2
  4068ce:	469b      	mov	fp, r3
  4068d0:	b149      	cbz	r1, 4068e6 <_dtoa_r+0x26>
  4068d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  4068d4:	604b      	str	r3, [r1, #4]
  4068d6:	2201      	movs	r2, #1
  4068d8:	fa02 f303 	lsl.w	r3, r2, r3
  4068dc:	608b      	str	r3, [r1, #8]
  4068de:	f001 fc4b 	bl	408178 <_Bfree>
  4068e2:	2300      	movs	r3, #0
  4068e4:	6423      	str	r3, [r4, #64]	; 0x40
  4068e6:	f1bb 0f00 	cmp.w	fp, #0
  4068ea:	46d9      	mov	r9, fp
  4068ec:	db33      	blt.n	406956 <_dtoa_r+0x96>
  4068ee:	2300      	movs	r3, #0
  4068f0:	602b      	str	r3, [r5, #0]
  4068f2:	4ba5      	ldr	r3, [pc, #660]	; (406b88 <_dtoa_r+0x2c8>)
  4068f4:	461a      	mov	r2, r3
  4068f6:	ea09 0303 	and.w	r3, r9, r3
  4068fa:	4293      	cmp	r3, r2
  4068fc:	d014      	beq.n	406928 <_dtoa_r+0x68>
  4068fe:	4650      	mov	r0, sl
  406900:	4659      	mov	r1, fp
  406902:	2200      	movs	r2, #0
  406904:	2300      	movs	r3, #0
  406906:	f7fe fb9d 	bl	405044 <__aeabi_dcmpeq>
  40690a:	4680      	mov	r8, r0
  40690c:	b348      	cbz	r0, 406962 <_dtoa_r+0xa2>
  40690e:	9e26      	ldr	r6, [sp, #152]	; 0x98
  406910:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  406912:	2301      	movs	r3, #1
  406914:	6033      	str	r3, [r6, #0]
  406916:	2d00      	cmp	r5, #0
  406918:	f000 80c9 	beq.w	406aae <_dtoa_r+0x1ee>
  40691c:	489b      	ldr	r0, [pc, #620]	; (406b8c <_dtoa_r+0x2cc>)
  40691e:	6028      	str	r0, [r5, #0]
  406920:	3801      	subs	r0, #1
  406922:	b01b      	add	sp, #108	; 0x6c
  406924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406928:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40692a:	f242 730f 	movw	r3, #9999	; 0x270f
  40692e:	602b      	str	r3, [r5, #0]
  406930:	f1ba 0f00 	cmp.w	sl, #0
  406934:	f000 80a4 	beq.w	406a80 <_dtoa_r+0x1c0>
  406938:	4895      	ldr	r0, [pc, #596]	; (406b90 <_dtoa_r+0x2d0>)
  40693a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  40693c:	2e00      	cmp	r6, #0
  40693e:	d0f0      	beq.n	406922 <_dtoa_r+0x62>
  406940:	78c3      	ldrb	r3, [r0, #3]
  406942:	2b00      	cmp	r3, #0
  406944:	f000 80b5 	beq.w	406ab2 <_dtoa_r+0x1f2>
  406948:	f100 0308 	add.w	r3, r0, #8
  40694c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  40694e:	602b      	str	r3, [r5, #0]
  406950:	b01b      	add	sp, #108	; 0x6c
  406952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406956:	2301      	movs	r3, #1
  406958:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40695c:	602b      	str	r3, [r5, #0]
  40695e:	46cb      	mov	fp, r9
  406960:	e7c7      	b.n	4068f2 <_dtoa_r+0x32>
  406962:	aa19      	add	r2, sp, #100	; 0x64
  406964:	ab18      	add	r3, sp, #96	; 0x60
  406966:	e88d 000c 	stmia.w	sp, {r2, r3}
  40696a:	4620      	mov	r0, r4
  40696c:	4652      	mov	r2, sl
  40696e:	465b      	mov	r3, fp
  406970:	f001 fe88 	bl	408684 <__d2b>
  406974:	ea5f 5519 	movs.w	r5, r9, lsr #20
  406978:	900a      	str	r0, [sp, #40]	; 0x28
  40697a:	f040 808a 	bne.w	406a92 <_dtoa_r+0x1d2>
  40697e:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406980:	9d19      	ldr	r5, [sp, #100]	; 0x64
  406982:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  406986:	443d      	add	r5, r7
  406988:	429d      	cmp	r5, r3
  40698a:	f2c0 8294 	blt.w	406eb6 <_dtoa_r+0x5f6>
  40698e:	331f      	adds	r3, #31
  406990:	f205 4212 	addw	r2, r5, #1042	; 0x412
  406994:	1b5b      	subs	r3, r3, r5
  406996:	fa09 f303 	lsl.w	r3, r9, r3
  40699a:	fa2a f202 	lsr.w	r2, sl, r2
  40699e:	ea43 0002 	orr.w	r0, r3, r2
  4069a2:	f7fe f871 	bl	404a88 <__aeabi_ui2d>
  4069a6:	2601      	movs	r6, #1
  4069a8:	3d01      	subs	r5, #1
  4069aa:	46b8      	mov	r8, r7
  4069ac:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4069b0:	9616      	str	r6, [sp, #88]	; 0x58
  4069b2:	2200      	movs	r2, #0
  4069b4:	4b77      	ldr	r3, [pc, #476]	; (406b94 <_dtoa_r+0x2d4>)
  4069b6:	f7fd ff29 	bl	40480c <__aeabi_dsub>
  4069ba:	a36d      	add	r3, pc, #436	; (adr r3, 406b70 <_dtoa_r+0x2b0>)
  4069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069c0:	f7fe f8d8 	bl	404b74 <__aeabi_dmul>
  4069c4:	a36c      	add	r3, pc, #432	; (adr r3, 406b78 <_dtoa_r+0x2b8>)
  4069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069ca:	f7fd ff21 	bl	404810 <__adddf3>
  4069ce:	4606      	mov	r6, r0
  4069d0:	4628      	mov	r0, r5
  4069d2:	460f      	mov	r7, r1
  4069d4:	f7fe f868 	bl	404aa8 <__aeabi_i2d>
  4069d8:	a369      	add	r3, pc, #420	; (adr r3, 406b80 <_dtoa_r+0x2c0>)
  4069da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069de:	f7fe f8c9 	bl	404b74 <__aeabi_dmul>
  4069e2:	4602      	mov	r2, r0
  4069e4:	460b      	mov	r3, r1
  4069e6:	4630      	mov	r0, r6
  4069e8:	4639      	mov	r1, r7
  4069ea:	f7fd ff11 	bl	404810 <__adddf3>
  4069ee:	4606      	mov	r6, r0
  4069f0:	460f      	mov	r7, r1
  4069f2:	f002 f9c9 	bl	408d88 <__aeabi_d2iz>
  4069f6:	4639      	mov	r1, r7
  4069f8:	9007      	str	r0, [sp, #28]
  4069fa:	2200      	movs	r2, #0
  4069fc:	4630      	mov	r0, r6
  4069fe:	2300      	movs	r3, #0
  406a00:	f7fe fb2a 	bl	405058 <__aeabi_dcmplt>
  406a04:	2800      	cmp	r0, #0
  406a06:	f040 8228 	bne.w	406e5a <_dtoa_r+0x59a>
  406a0a:	9e07      	ldr	r6, [sp, #28]
  406a0c:	2e16      	cmp	r6, #22
  406a0e:	f200 8221 	bhi.w	406e54 <_dtoa_r+0x594>
  406a12:	4b61      	ldr	r3, [pc, #388]	; (406b98 <_dtoa_r+0x2d8>)
  406a14:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  406a18:	e9d3 0100 	ldrd	r0, r1, [r3]
  406a1c:	4652      	mov	r2, sl
  406a1e:	465b      	mov	r3, fp
  406a20:	f7fe fb38 	bl	405094 <__aeabi_dcmpgt>
  406a24:	2800      	cmp	r0, #0
  406a26:	f000 824b 	beq.w	406ec0 <_dtoa_r+0x600>
  406a2a:	3e01      	subs	r6, #1
  406a2c:	9607      	str	r6, [sp, #28]
  406a2e:	2600      	movs	r6, #0
  406a30:	960e      	str	r6, [sp, #56]	; 0x38
  406a32:	ebc5 0508 	rsb	r5, r5, r8
  406a36:	3d01      	subs	r5, #1
  406a38:	9506      	str	r5, [sp, #24]
  406a3a:	f100 8225 	bmi.w	406e88 <_dtoa_r+0x5c8>
  406a3e:	2500      	movs	r5, #0
  406a40:	9508      	str	r5, [sp, #32]
  406a42:	9e07      	ldr	r6, [sp, #28]
  406a44:	2e00      	cmp	r6, #0
  406a46:	f2c0 8216 	blt.w	406e76 <_dtoa_r+0x5b6>
  406a4a:	9d06      	ldr	r5, [sp, #24]
  406a4c:	960d      	str	r6, [sp, #52]	; 0x34
  406a4e:	4435      	add	r5, r6
  406a50:	2600      	movs	r6, #0
  406a52:	9506      	str	r5, [sp, #24]
  406a54:	960c      	str	r6, [sp, #48]	; 0x30
  406a56:	9d24      	ldr	r5, [sp, #144]	; 0x90
  406a58:	2d09      	cmp	r5, #9
  406a5a:	d82c      	bhi.n	406ab6 <_dtoa_r+0x1f6>
  406a5c:	2d05      	cmp	r5, #5
  406a5e:	bfc4      	itt	gt
  406a60:	3d04      	subgt	r5, #4
  406a62:	9524      	strgt	r5, [sp, #144]	; 0x90
  406a64:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406a66:	f1a6 0302 	sub.w	r3, r6, #2
  406a6a:	bfcc      	ite	gt
  406a6c:	2500      	movgt	r5, #0
  406a6e:	2501      	movle	r5, #1
  406a70:	2b03      	cmp	r3, #3
  406a72:	d822      	bhi.n	406aba <_dtoa_r+0x1fa>
  406a74:	e8df f013 	tbh	[pc, r3, lsl #1]
  406a78:	029e03b7 	.word	0x029e03b7
  406a7c:	049a03c0 	.word	0x049a03c0
  406a80:	4a46      	ldr	r2, [pc, #280]	; (406b9c <_dtoa_r+0x2dc>)
  406a82:	4b43      	ldr	r3, [pc, #268]	; (406b90 <_dtoa_r+0x2d0>)
  406a84:	f3c9 0013 	ubfx	r0, r9, #0, #20
  406a88:	2800      	cmp	r0, #0
  406a8a:	bf0c      	ite	eq
  406a8c:	4610      	moveq	r0, r2
  406a8e:	4618      	movne	r0, r3
  406a90:	e753      	b.n	40693a <_dtoa_r+0x7a>
  406a92:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406a96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  406a9a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  406a9e:	4650      	mov	r0, sl
  406aa0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  406aa4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  406aac:	e781      	b.n	4069b2 <_dtoa_r+0xf2>
  406aae:	483c      	ldr	r0, [pc, #240]	; (406ba0 <_dtoa_r+0x2e0>)
  406ab0:	e737      	b.n	406922 <_dtoa_r+0x62>
  406ab2:	1cc3      	adds	r3, r0, #3
  406ab4:	e74a      	b.n	40694c <_dtoa_r+0x8c>
  406ab6:	2500      	movs	r5, #0
  406ab8:	9524      	str	r5, [sp, #144]	; 0x90
  406aba:	2500      	movs	r5, #0
  406abc:	6465      	str	r5, [r4, #68]	; 0x44
  406abe:	4629      	mov	r1, r5
  406ac0:	4620      	mov	r0, r4
  406ac2:	f001 fb33 	bl	40812c <_Balloc>
  406ac6:	f04f 39ff 	mov.w	r9, #4294967295
  406aca:	2601      	movs	r6, #1
  406acc:	9009      	str	r0, [sp, #36]	; 0x24
  406ace:	9525      	str	r5, [sp, #148]	; 0x94
  406ad0:	6420      	str	r0, [r4, #64]	; 0x40
  406ad2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406ad6:	960b      	str	r6, [sp, #44]	; 0x2c
  406ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406ada:	2b00      	cmp	r3, #0
  406adc:	f2c0 80d2 	blt.w	406c84 <_dtoa_r+0x3c4>
  406ae0:	9e07      	ldr	r6, [sp, #28]
  406ae2:	2e0e      	cmp	r6, #14
  406ae4:	f300 80ce 	bgt.w	406c84 <_dtoa_r+0x3c4>
  406ae8:	4b2b      	ldr	r3, [pc, #172]	; (406b98 <_dtoa_r+0x2d8>)
  406aea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  406aee:	e9d3 0100 	ldrd	r0, r1, [r3]
  406af2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406af6:	9925      	ldr	r1, [sp, #148]	; 0x94
  406af8:	2900      	cmp	r1, #0
  406afa:	f2c0 8380 	blt.w	4071fe <_dtoa_r+0x93e>
  406afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406b02:	4659      	mov	r1, fp
  406b04:	4650      	mov	r0, sl
  406b06:	f7fe f95f 	bl	404dc8 <__aeabi_ddiv>
  406b0a:	f002 f93d 	bl	408d88 <__aeabi_d2iz>
  406b0e:	4605      	mov	r5, r0
  406b10:	f7fd ffca 	bl	404aa8 <__aeabi_i2d>
  406b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406b18:	f7fe f82c 	bl	404b74 <__aeabi_dmul>
  406b1c:	4602      	mov	r2, r0
  406b1e:	460b      	mov	r3, r1
  406b20:	4650      	mov	r0, sl
  406b22:	4659      	mov	r1, fp
  406b24:	f7fd fe72 	bl	40480c <__aeabi_dsub>
  406b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406b2a:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406b2e:	f1b9 0f01 	cmp.w	r9, #1
  406b32:	4606      	mov	r6, r0
  406b34:	460f      	mov	r7, r1
  406b36:	7013      	strb	r3, [r2, #0]
  406b38:	f102 0b01 	add.w	fp, r2, #1
  406b3c:	d064      	beq.n	406c08 <_dtoa_r+0x348>
  406b3e:	2200      	movs	r2, #0
  406b40:	4b18      	ldr	r3, [pc, #96]	; (406ba4 <_dtoa_r+0x2e4>)
  406b42:	f7fe f817 	bl	404b74 <__aeabi_dmul>
  406b46:	2200      	movs	r2, #0
  406b48:	2300      	movs	r3, #0
  406b4a:	4606      	mov	r6, r0
  406b4c:	460f      	mov	r7, r1
  406b4e:	f7fe fa79 	bl	405044 <__aeabi_dcmpeq>
  406b52:	2800      	cmp	r0, #0
  406b54:	f040 8081 	bne.w	406c5a <_dtoa_r+0x39a>
  406b58:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  406b5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  406b5e:	9403      	str	r4, [sp, #12]
  406b60:	44c8      	add	r8, r9
  406b62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  406b66:	f105 0902 	add.w	r9, r5, #2
  406b6a:	e028      	b.n	406bbe <_dtoa_r+0x2fe>
  406b6c:	f3af 8000 	nop.w
  406b70:	636f4361 	.word	0x636f4361
  406b74:	3fd287a7 	.word	0x3fd287a7
  406b78:	8b60c8b3 	.word	0x8b60c8b3
  406b7c:	3fc68a28 	.word	0x3fc68a28
  406b80:	509f79fb 	.word	0x509f79fb
  406b84:	3fd34413 	.word	0x3fd34413
  406b88:	7ff00000 	.word	0x7ff00000
  406b8c:	00409c19 	.word	0x00409c19
  406b90:	00409c38 	.word	0x00409c38
  406b94:	3ff80000 	.word	0x3ff80000
  406b98:	00409c48 	.word	0x00409c48
  406b9c:	00409c2c 	.word	0x00409c2c
  406ba0:	00409c18 	.word	0x00409c18
  406ba4:	40240000 	.word	0x40240000
  406ba8:	f7fd ffe4 	bl	404b74 <__aeabi_dmul>
  406bac:	2200      	movs	r2, #0
  406bae:	2300      	movs	r3, #0
  406bb0:	4606      	mov	r6, r0
  406bb2:	460f      	mov	r7, r1
  406bb4:	f7fe fa46 	bl	405044 <__aeabi_dcmpeq>
  406bb8:	2800      	cmp	r0, #0
  406bba:	f040 83c1 	bne.w	407340 <_dtoa_r+0xa80>
  406bbe:	4652      	mov	r2, sl
  406bc0:	465b      	mov	r3, fp
  406bc2:	4630      	mov	r0, r6
  406bc4:	4639      	mov	r1, r7
  406bc6:	f7fe f8ff 	bl	404dc8 <__aeabi_ddiv>
  406bca:	f002 f8dd 	bl	408d88 <__aeabi_d2iz>
  406bce:	4605      	mov	r5, r0
  406bd0:	f7fd ff6a 	bl	404aa8 <__aeabi_i2d>
  406bd4:	4652      	mov	r2, sl
  406bd6:	465b      	mov	r3, fp
  406bd8:	f7fd ffcc 	bl	404b74 <__aeabi_dmul>
  406bdc:	4602      	mov	r2, r0
  406bde:	460b      	mov	r3, r1
  406be0:	4630      	mov	r0, r6
  406be2:	4639      	mov	r1, r7
  406be4:	f7fd fe12 	bl	40480c <__aeabi_dsub>
  406be8:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  406bec:	45c1      	cmp	r9, r8
  406bee:	f809 ec01 	strb.w	lr, [r9, #-1]
  406bf2:	464c      	mov	r4, r9
  406bf4:	4606      	mov	r6, r0
  406bf6:	460f      	mov	r7, r1
  406bf8:	f04f 0200 	mov.w	r2, #0
  406bfc:	4ba7      	ldr	r3, [pc, #668]	; (406e9c <_dtoa_r+0x5dc>)
  406bfe:	f109 0901 	add.w	r9, r9, #1
  406c02:	d1d1      	bne.n	406ba8 <_dtoa_r+0x2e8>
  406c04:	46a3      	mov	fp, r4
  406c06:	9c03      	ldr	r4, [sp, #12]
  406c08:	4632      	mov	r2, r6
  406c0a:	463b      	mov	r3, r7
  406c0c:	4630      	mov	r0, r6
  406c0e:	4639      	mov	r1, r7
  406c10:	f7fd fdfe 	bl	404810 <__adddf3>
  406c14:	4606      	mov	r6, r0
  406c16:	460f      	mov	r7, r1
  406c18:	4632      	mov	r2, r6
  406c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406c1e:	463b      	mov	r3, r7
  406c20:	f7fe fa1a 	bl	405058 <__aeabi_dcmplt>
  406c24:	b940      	cbnz	r0, 406c38 <_dtoa_r+0x378>
  406c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406c2a:	4632      	mov	r2, r6
  406c2c:	463b      	mov	r3, r7
  406c2e:	f7fe fa09 	bl	405044 <__aeabi_dcmpeq>
  406c32:	b190      	cbz	r0, 406c5a <_dtoa_r+0x39a>
  406c34:	07eb      	lsls	r3, r5, #31
  406c36:	d510      	bpl.n	406c5a <_dtoa_r+0x39a>
  406c38:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  406c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406c3e:	e005      	b.n	406c4c <_dtoa_r+0x38c>
  406c40:	429a      	cmp	r2, r3
  406c42:	f000 8428 	beq.w	407496 <_dtoa_r+0xbd6>
  406c46:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  406c4a:	469b      	mov	fp, r3
  406c4c:	2d39      	cmp	r5, #57	; 0x39
  406c4e:	f10b 33ff 	add.w	r3, fp, #4294967295
  406c52:	d0f5      	beq.n	406c40 <_dtoa_r+0x380>
  406c54:	1c6a      	adds	r2, r5, #1
  406c56:	b2d2      	uxtb	r2, r2
  406c58:	701a      	strb	r2, [r3, #0]
  406c5a:	4620      	mov	r0, r4
  406c5c:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c5e:	f001 fa8b 	bl	408178 <_Bfree>
  406c62:	9e07      	ldr	r6, [sp, #28]
  406c64:	9d26      	ldr	r5, [sp, #152]	; 0x98
  406c66:	1c73      	adds	r3, r6, #1
  406c68:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  406c6a:	2200      	movs	r2, #0
  406c6c:	f88b 2000 	strb.w	r2, [fp]
  406c70:	602b      	str	r3, [r5, #0]
  406c72:	2e00      	cmp	r6, #0
  406c74:	f000 8325 	beq.w	4072c2 <_dtoa_r+0xa02>
  406c78:	9809      	ldr	r0, [sp, #36]	; 0x24
  406c7a:	f8c6 b000 	str.w	fp, [r6]
  406c7e:	b01b      	add	sp, #108	; 0x6c
  406c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406c86:	2d00      	cmp	r5, #0
  406c88:	f000 8103 	beq.w	406e92 <_dtoa_r+0x5d2>
  406c8c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406c8e:	2e01      	cmp	r6, #1
  406c90:	f340 82dc 	ble.w	40724c <_dtoa_r+0x98c>
  406c94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  406c96:	f109 37ff 	add.w	r7, r9, #4294967295
  406c9a:	42be      	cmp	r6, r7
  406c9c:	f2c0 8389 	blt.w	4073b2 <_dtoa_r+0xaf2>
  406ca0:	1bf7      	subs	r7, r6, r7
  406ca2:	f1b9 0f00 	cmp.w	r9, #0
  406ca6:	f2c0 8486 	blt.w	4075b6 <_dtoa_r+0xcf6>
  406caa:	9d08      	ldr	r5, [sp, #32]
  406cac:	464b      	mov	r3, r9
  406cae:	9e08      	ldr	r6, [sp, #32]
  406cb0:	441e      	add	r6, r3
  406cb2:	9608      	str	r6, [sp, #32]
  406cb4:	9e06      	ldr	r6, [sp, #24]
  406cb6:	4620      	mov	r0, r4
  406cb8:	441e      	add	r6, r3
  406cba:	2101      	movs	r1, #1
  406cbc:	9606      	str	r6, [sp, #24]
  406cbe:	f001 faff 	bl	4082c0 <__i2b>
  406cc2:	4606      	mov	r6, r0
  406cc4:	b165      	cbz	r5, 406ce0 <_dtoa_r+0x420>
  406cc6:	9806      	ldr	r0, [sp, #24]
  406cc8:	2800      	cmp	r0, #0
  406cca:	dd09      	ble.n	406ce0 <_dtoa_r+0x420>
  406ccc:	4603      	mov	r3, r0
  406cce:	9908      	ldr	r1, [sp, #32]
  406cd0:	42ab      	cmp	r3, r5
  406cd2:	bfa8      	it	ge
  406cd4:	462b      	movge	r3, r5
  406cd6:	1ac9      	subs	r1, r1, r3
  406cd8:	1ac0      	subs	r0, r0, r3
  406cda:	9108      	str	r1, [sp, #32]
  406cdc:	1aed      	subs	r5, r5, r3
  406cde:	9006      	str	r0, [sp, #24]
  406ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ce2:	2a00      	cmp	r2, #0
  406ce4:	dd1d      	ble.n	406d22 <_dtoa_r+0x462>
  406ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406ce8:	2b00      	cmp	r3, #0
  406cea:	f000 8358 	beq.w	40739e <_dtoa_r+0xade>
  406cee:	2f00      	cmp	r7, #0
  406cf0:	dd11      	ble.n	406d16 <_dtoa_r+0x456>
  406cf2:	4631      	mov	r1, r6
  406cf4:	463a      	mov	r2, r7
  406cf6:	4620      	mov	r0, r4
  406cf8:	f001 fb8a 	bl	408410 <__pow5mult>
  406cfc:	4606      	mov	r6, r0
  406cfe:	4631      	mov	r1, r6
  406d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406d02:	4620      	mov	r0, r4
  406d04:	f001 fae6 	bl	4082d4 <__multiply>
  406d08:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d0a:	4680      	mov	r8, r0
  406d0c:	4620      	mov	r0, r4
  406d0e:	f001 fa33 	bl	408178 <_Bfree>
  406d12:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  406d16:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  406d1a:	ebbe 0207 	subs.w	r2, lr, r7
  406d1e:	f040 828f 	bne.w	407240 <_dtoa_r+0x980>
  406d22:	4620      	mov	r0, r4
  406d24:	2101      	movs	r1, #1
  406d26:	f001 facb 	bl	4082c0 <__i2b>
  406d2a:	4680      	mov	r8, r0
  406d2c:	980d      	ldr	r0, [sp, #52]	; 0x34
  406d2e:	2800      	cmp	r0, #0
  406d30:	dd05      	ble.n	406d3e <_dtoa_r+0x47e>
  406d32:	4641      	mov	r1, r8
  406d34:	4620      	mov	r0, r4
  406d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406d38:	f001 fb6a 	bl	408410 <__pow5mult>
  406d3c:	4680      	mov	r8, r0
  406d3e:	9924      	ldr	r1, [sp, #144]	; 0x90
  406d40:	2901      	cmp	r1, #1
  406d42:	f340 82c1 	ble.w	4072c8 <_dtoa_r+0xa08>
  406d46:	2700      	movs	r7, #0
  406d48:	980d      	ldr	r0, [sp, #52]	; 0x34
  406d4a:	2800      	cmp	r0, #0
  406d4c:	f040 82af 	bne.w	4072ae <_dtoa_r+0x9ee>
  406d50:	2001      	movs	r0, #1
  406d52:	9b06      	ldr	r3, [sp, #24]
  406d54:	4403      	add	r3, r0
  406d56:	f013 031f 	ands.w	r3, r3, #31
  406d5a:	f000 80a1 	beq.w	406ea0 <_dtoa_r+0x5e0>
  406d5e:	f1c3 0220 	rsb	r2, r3, #32
  406d62:	2a04      	cmp	r2, #4
  406d64:	f340 84b5 	ble.w	4076d2 <_dtoa_r+0xe12>
  406d68:	9908      	ldr	r1, [sp, #32]
  406d6a:	9a06      	ldr	r2, [sp, #24]
  406d6c:	f1c3 031c 	rsb	r3, r3, #28
  406d70:	4419      	add	r1, r3
  406d72:	441a      	add	r2, r3
  406d74:	9108      	str	r1, [sp, #32]
  406d76:	441d      	add	r5, r3
  406d78:	9206      	str	r2, [sp, #24]
  406d7a:	9908      	ldr	r1, [sp, #32]
  406d7c:	2900      	cmp	r1, #0
  406d7e:	dd05      	ble.n	406d8c <_dtoa_r+0x4cc>
  406d80:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d82:	9a08      	ldr	r2, [sp, #32]
  406d84:	4620      	mov	r0, r4
  406d86:	f001 fb91 	bl	4084ac <__lshift>
  406d8a:	900a      	str	r0, [sp, #40]	; 0x28
  406d8c:	9a06      	ldr	r2, [sp, #24]
  406d8e:	2a00      	cmp	r2, #0
  406d90:	dd04      	ble.n	406d9c <_dtoa_r+0x4dc>
  406d92:	4641      	mov	r1, r8
  406d94:	4620      	mov	r0, r4
  406d96:	f001 fb89 	bl	4084ac <__lshift>
  406d9a:	4680      	mov	r8, r0
  406d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406d9e:	2b00      	cmp	r3, #0
  406da0:	f040 826a 	bne.w	407278 <_dtoa_r+0x9b8>
  406da4:	f1b9 0f00 	cmp.w	r9, #0
  406da8:	f340 82a6 	ble.w	4072f8 <_dtoa_r+0xa38>
  406dac:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406dae:	2800      	cmp	r0, #0
  406db0:	f040 8088 	bne.w	406ec4 <_dtoa_r+0x604>
  406db4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406db6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406db8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  406dbc:	e006      	b.n	406dcc <_dtoa_r+0x50c>
  406dbe:	4639      	mov	r1, r7
  406dc0:	4620      	mov	r0, r4
  406dc2:	220a      	movs	r2, #10
  406dc4:	2300      	movs	r3, #0
  406dc6:	f001 f9e1 	bl	40818c <__multadd>
  406dca:	4607      	mov	r7, r0
  406dcc:	4638      	mov	r0, r7
  406dce:	4641      	mov	r1, r8
  406dd0:	f7ff fcde 	bl	406790 <quorem>
  406dd4:	3030      	adds	r0, #48	; 0x30
  406dd6:	f80b 0005 	strb.w	r0, [fp, r5]
  406dda:	3501      	adds	r5, #1
  406ddc:	45a9      	cmp	r9, r5
  406dde:	dcee      	bgt.n	406dbe <_dtoa_r+0x4fe>
  406de0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  406de4:	970a      	str	r7, [sp, #40]	; 0x28
  406de6:	4682      	mov	sl, r0
  406de8:	f1b9 0f01 	cmp.w	r9, #1
  406dec:	bfac      	ite	ge
  406dee:	44cb      	addge	fp, r9
  406df0:	f10b 0b01 	addlt.w	fp, fp, #1
  406df4:	2500      	movs	r5, #0
  406df6:	990a      	ldr	r1, [sp, #40]	; 0x28
  406df8:	2201      	movs	r2, #1
  406dfa:	4620      	mov	r0, r4
  406dfc:	f001 fb56 	bl	4084ac <__lshift>
  406e00:	4641      	mov	r1, r8
  406e02:	900a      	str	r0, [sp, #40]	; 0x28
  406e04:	f001 fbb0 	bl	408568 <__mcmp>
  406e08:	2800      	cmp	r0, #0
  406e0a:	f340 8309 	ble.w	407420 <_dtoa_r+0xb60>
  406e0e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  406e12:	9909      	ldr	r1, [sp, #36]	; 0x24
  406e14:	e005      	b.n	406e22 <_dtoa_r+0x562>
  406e16:	4299      	cmp	r1, r3
  406e18:	f000 828b 	beq.w	407332 <_dtoa_r+0xa72>
  406e1c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  406e20:	469b      	mov	fp, r3
  406e22:	2a39      	cmp	r2, #57	; 0x39
  406e24:	f10b 33ff 	add.w	r3, fp, #4294967295
  406e28:	d0f5      	beq.n	406e16 <_dtoa_r+0x556>
  406e2a:	3201      	adds	r2, #1
  406e2c:	701a      	strb	r2, [r3, #0]
  406e2e:	4641      	mov	r1, r8
  406e30:	4620      	mov	r0, r4
  406e32:	f001 f9a1 	bl	408178 <_Bfree>
  406e36:	2e00      	cmp	r6, #0
  406e38:	f43f af0f 	beq.w	406c5a <_dtoa_r+0x39a>
  406e3c:	b12d      	cbz	r5, 406e4a <_dtoa_r+0x58a>
  406e3e:	42b5      	cmp	r5, r6
  406e40:	d003      	beq.n	406e4a <_dtoa_r+0x58a>
  406e42:	4629      	mov	r1, r5
  406e44:	4620      	mov	r0, r4
  406e46:	f001 f997 	bl	408178 <_Bfree>
  406e4a:	4631      	mov	r1, r6
  406e4c:	4620      	mov	r0, r4
  406e4e:	f001 f993 	bl	408178 <_Bfree>
  406e52:	e702      	b.n	406c5a <_dtoa_r+0x39a>
  406e54:	2601      	movs	r6, #1
  406e56:	960e      	str	r6, [sp, #56]	; 0x38
  406e58:	e5eb      	b.n	406a32 <_dtoa_r+0x172>
  406e5a:	9807      	ldr	r0, [sp, #28]
  406e5c:	f7fd fe24 	bl	404aa8 <__aeabi_i2d>
  406e60:	4632      	mov	r2, r6
  406e62:	463b      	mov	r3, r7
  406e64:	f7fe f8ee 	bl	405044 <__aeabi_dcmpeq>
  406e68:	2800      	cmp	r0, #0
  406e6a:	f47f adce 	bne.w	406a0a <_dtoa_r+0x14a>
  406e6e:	9e07      	ldr	r6, [sp, #28]
  406e70:	3e01      	subs	r6, #1
  406e72:	9607      	str	r6, [sp, #28]
  406e74:	e5c9      	b.n	406a0a <_dtoa_r+0x14a>
  406e76:	9e07      	ldr	r6, [sp, #28]
  406e78:	9d08      	ldr	r5, [sp, #32]
  406e7a:	1bad      	subs	r5, r5, r6
  406e7c:	9508      	str	r5, [sp, #32]
  406e7e:	4275      	negs	r5, r6
  406e80:	2600      	movs	r6, #0
  406e82:	950c      	str	r5, [sp, #48]	; 0x30
  406e84:	960d      	str	r6, [sp, #52]	; 0x34
  406e86:	e5e6      	b.n	406a56 <_dtoa_r+0x196>
  406e88:	426d      	negs	r5, r5
  406e8a:	2600      	movs	r6, #0
  406e8c:	9508      	str	r5, [sp, #32]
  406e8e:	9606      	str	r6, [sp, #24]
  406e90:	e5d7      	b.n	406a42 <_dtoa_r+0x182>
  406e92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406e94:	9d08      	ldr	r5, [sp, #32]
  406e96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406e98:	e714      	b.n	406cc4 <_dtoa_r+0x404>
  406e9a:	bf00      	nop
  406e9c:	40240000 	.word	0x40240000
  406ea0:	231c      	movs	r3, #28
  406ea2:	f8dd e020 	ldr.w	lr, [sp, #32]
  406ea6:	9806      	ldr	r0, [sp, #24]
  406ea8:	449e      	add	lr, r3
  406eaa:	4418      	add	r0, r3
  406eac:	f8cd e020 	str.w	lr, [sp, #32]
  406eb0:	441d      	add	r5, r3
  406eb2:	9006      	str	r0, [sp, #24]
  406eb4:	e761      	b.n	406d7a <_dtoa_r+0x4ba>
  406eb6:	48a7      	ldr	r0, [pc, #668]	; (407154 <_dtoa_r+0x894>)
  406eb8:	1b40      	subs	r0, r0, r5
  406eba:	fa0a f000 	lsl.w	r0, sl, r0
  406ebe:	e570      	b.n	4069a2 <_dtoa_r+0xe2>
  406ec0:	900e      	str	r0, [sp, #56]	; 0x38
  406ec2:	e5b6      	b.n	406a32 <_dtoa_r+0x172>
  406ec4:	2d00      	cmp	r5, #0
  406ec6:	dd05      	ble.n	406ed4 <_dtoa_r+0x614>
  406ec8:	4631      	mov	r1, r6
  406eca:	462a      	mov	r2, r5
  406ecc:	4620      	mov	r0, r4
  406ece:	f001 faed 	bl	4084ac <__lshift>
  406ed2:	4606      	mov	r6, r0
  406ed4:	2f00      	cmp	r7, #0
  406ed6:	f040 82e8 	bne.w	4074aa <_dtoa_r+0xbea>
  406eda:	4637      	mov	r7, r6
  406edc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  406ede:	9809      	ldr	r0, [sp, #36]	; 0x24
  406ee0:	444d      	add	r5, r9
  406ee2:	9508      	str	r5, [sp, #32]
  406ee4:	f00a 0501 	and.w	r5, sl, #1
  406ee8:	950b      	str	r5, [sp, #44]	; 0x2c
  406eea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  406eee:	1c45      	adds	r5, r0, #1
  406ef0:	e00a      	b.n	406f08 <_dtoa_r+0x648>
  406ef2:	f001 f94b 	bl	40818c <__multadd>
  406ef6:	4639      	mov	r1, r7
  406ef8:	4606      	mov	r6, r0
  406efa:	220a      	movs	r2, #10
  406efc:	4620      	mov	r0, r4
  406efe:	2300      	movs	r3, #0
  406f00:	f001 f944 	bl	40818c <__multadd>
  406f04:	4607      	mov	r7, r0
  406f06:	3501      	adds	r5, #1
  406f08:	4641      	mov	r1, r8
  406f0a:	4648      	mov	r0, r9
  406f0c:	f7ff fc40 	bl	406790 <quorem>
  406f10:	4631      	mov	r1, r6
  406f12:	4683      	mov	fp, r0
  406f14:	4648      	mov	r0, r9
  406f16:	f001 fb27 	bl	408568 <__mcmp>
  406f1a:	4641      	mov	r1, r8
  406f1c:	9003      	str	r0, [sp, #12]
  406f1e:	463a      	mov	r2, r7
  406f20:	4620      	mov	r0, r4
  406f22:	f001 fb45 	bl	4085b0 <__mdiff>
  406f26:	68c2      	ldr	r2, [r0, #12]
  406f28:	1e69      	subs	r1, r5, #1
  406f2a:	4603      	mov	r3, r0
  406f2c:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  406f30:	9106      	str	r1, [sp, #24]
  406f32:	2a00      	cmp	r2, #0
  406f34:	f040 8193 	bne.w	40725e <_dtoa_r+0x99e>
  406f38:	4619      	mov	r1, r3
  406f3a:	4648      	mov	r0, r9
  406f3c:	9302      	str	r3, [sp, #8]
  406f3e:	f001 fb13 	bl	408568 <__mcmp>
  406f42:	9b02      	ldr	r3, [sp, #8]
  406f44:	4602      	mov	r2, r0
  406f46:	4619      	mov	r1, r3
  406f48:	4620      	mov	r0, r4
  406f4a:	9202      	str	r2, [sp, #8]
  406f4c:	f001 f914 	bl	408178 <_Bfree>
  406f50:	9a02      	ldr	r2, [sp, #8]
  406f52:	b92a      	cbnz	r2, 406f60 <_dtoa_r+0x6a0>
  406f54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406f56:	b91b      	cbnz	r3, 406f60 <_dtoa_r+0x6a0>
  406f58:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406f5a:	2800      	cmp	r0, #0
  406f5c:	f000 8391 	beq.w	407682 <_dtoa_r+0xdc2>
  406f60:	9b03      	ldr	r3, [sp, #12]
  406f62:	2b00      	cmp	r3, #0
  406f64:	f2c0 8234 	blt.w	4073d0 <_dtoa_r+0xb10>
  406f68:	d105      	bne.n	406f76 <_dtoa_r+0x6b6>
  406f6a:	9824      	ldr	r0, [sp, #144]	; 0x90
  406f6c:	b918      	cbnz	r0, 406f76 <_dtoa_r+0x6b6>
  406f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406f70:	2900      	cmp	r1, #0
  406f72:	f000 822d 	beq.w	4073d0 <_dtoa_r+0xb10>
  406f76:	2a00      	cmp	r2, #0
  406f78:	f300 82ab 	bgt.w	4074d2 <_dtoa_r+0xc12>
  406f7c:	f8dd e020 	ldr.w	lr, [sp, #32]
  406f80:	f805 ac01 	strb.w	sl, [r5, #-1]
  406f84:	4575      	cmp	r5, lr
  406f86:	46ab      	mov	fp, r5
  406f88:	f000 82b3 	beq.w	4074f2 <_dtoa_r+0xc32>
  406f8c:	4649      	mov	r1, r9
  406f8e:	220a      	movs	r2, #10
  406f90:	2300      	movs	r3, #0
  406f92:	4620      	mov	r0, r4
  406f94:	f001 f8fa 	bl	40818c <__multadd>
  406f98:	42be      	cmp	r6, r7
  406f9a:	4681      	mov	r9, r0
  406f9c:	4631      	mov	r1, r6
  406f9e:	4620      	mov	r0, r4
  406fa0:	f04f 020a 	mov.w	r2, #10
  406fa4:	f04f 0300 	mov.w	r3, #0
  406fa8:	d1a3      	bne.n	406ef2 <_dtoa_r+0x632>
  406faa:	f001 f8ef 	bl	40818c <__multadd>
  406fae:	4606      	mov	r6, r0
  406fb0:	4607      	mov	r7, r0
  406fb2:	e7a8      	b.n	406f06 <_dtoa_r+0x646>
  406fb4:	2600      	movs	r6, #0
  406fb6:	960b      	str	r6, [sp, #44]	; 0x2c
  406fb8:	9e07      	ldr	r6, [sp, #28]
  406fba:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  406fbe:	44b6      	add	lr, r6
  406fc0:	f10e 0901 	add.w	r9, lr, #1
  406fc4:	f1b9 0f00 	cmp.w	r9, #0
  406fc8:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  406fcc:	464e      	mov	r6, r9
  406fce:	f340 8150 	ble.w	407272 <_dtoa_r+0x9b2>
  406fd2:	2100      	movs	r1, #0
  406fd4:	2e17      	cmp	r6, #23
  406fd6:	6461      	str	r1, [r4, #68]	; 0x44
  406fd8:	d90a      	bls.n	406ff0 <_dtoa_r+0x730>
  406fda:	2201      	movs	r2, #1
  406fdc:	2304      	movs	r3, #4
  406fde:	005b      	lsls	r3, r3, #1
  406fe0:	f103 0014 	add.w	r0, r3, #20
  406fe4:	42b0      	cmp	r0, r6
  406fe6:	4611      	mov	r1, r2
  406fe8:	f102 0201 	add.w	r2, r2, #1
  406fec:	d9f7      	bls.n	406fde <_dtoa_r+0x71e>
  406fee:	6461      	str	r1, [r4, #68]	; 0x44
  406ff0:	4620      	mov	r0, r4
  406ff2:	f001 f89b 	bl	40812c <_Balloc>
  406ff6:	2e0e      	cmp	r6, #14
  406ff8:	9009      	str	r0, [sp, #36]	; 0x24
  406ffa:	6420      	str	r0, [r4, #64]	; 0x40
  406ffc:	f63f ad6c 	bhi.w	406ad8 <_dtoa_r+0x218>
  407000:	2d00      	cmp	r5, #0
  407002:	f43f ad69 	beq.w	406ad8 <_dtoa_r+0x218>
  407006:	9d07      	ldr	r5, [sp, #28]
  407008:	2d00      	cmp	r5, #0
  40700a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  40700e:	f340 821b 	ble.w	407448 <_dtoa_r+0xb88>
  407012:	4b51      	ldr	r3, [pc, #324]	; (407158 <_dtoa_r+0x898>)
  407014:	f005 020f 	and.w	r2, r5, #15
  407018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40701c:	112d      	asrs	r5, r5, #4
  40701e:	e9d3 6700 	ldrd	r6, r7, [r3]
  407022:	06eb      	lsls	r3, r5, #27
  407024:	f140 81cd 	bpl.w	4073c2 <_dtoa_r+0xb02>
  407028:	4b4c      	ldr	r3, [pc, #304]	; (40715c <_dtoa_r+0x89c>)
  40702a:	4650      	mov	r0, sl
  40702c:	4659      	mov	r1, fp
  40702e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407032:	f7fd fec9 	bl	404dc8 <__aeabi_ddiv>
  407036:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40703a:	f005 050f 	and.w	r5, r5, #15
  40703e:	f04f 0803 	mov.w	r8, #3
  407042:	b18d      	cbz	r5, 407068 <_dtoa_r+0x7a8>
  407044:	f8df a114 	ldr.w	sl, [pc, #276]	; 40715c <_dtoa_r+0x89c>
  407048:	4630      	mov	r0, r6
  40704a:	4639      	mov	r1, r7
  40704c:	07ee      	lsls	r6, r5, #31
  40704e:	d505      	bpl.n	40705c <_dtoa_r+0x79c>
  407050:	e9da 2300 	ldrd	r2, r3, [sl]
  407054:	f108 0801 	add.w	r8, r8, #1
  407058:	f7fd fd8c 	bl	404b74 <__aeabi_dmul>
  40705c:	106d      	asrs	r5, r5, #1
  40705e:	f10a 0a08 	add.w	sl, sl, #8
  407062:	d1f3      	bne.n	40704c <_dtoa_r+0x78c>
  407064:	4606      	mov	r6, r0
  407066:	460f      	mov	r7, r1
  407068:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40706c:	4632      	mov	r2, r6
  40706e:	463b      	mov	r3, r7
  407070:	f7fd feaa 	bl	404dc8 <__aeabi_ddiv>
  407074:	4682      	mov	sl, r0
  407076:	468b      	mov	fp, r1
  407078:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40707a:	b145      	cbz	r5, 40708e <_dtoa_r+0x7ce>
  40707c:	4650      	mov	r0, sl
  40707e:	4659      	mov	r1, fp
  407080:	2200      	movs	r2, #0
  407082:	4b37      	ldr	r3, [pc, #220]	; (407160 <_dtoa_r+0x8a0>)
  407084:	f7fd ffe8 	bl	405058 <__aeabi_dcmplt>
  407088:	2800      	cmp	r0, #0
  40708a:	f040 82a9 	bne.w	4075e0 <_dtoa_r+0xd20>
  40708e:	4640      	mov	r0, r8
  407090:	f7fd fd0a 	bl	404aa8 <__aeabi_i2d>
  407094:	4652      	mov	r2, sl
  407096:	465b      	mov	r3, fp
  407098:	f7fd fd6c 	bl	404b74 <__aeabi_dmul>
  40709c:	2200      	movs	r2, #0
  40709e:	4b31      	ldr	r3, [pc, #196]	; (407164 <_dtoa_r+0x8a4>)
  4070a0:	f7fd fbb6 	bl	404810 <__adddf3>
  4070a4:	4606      	mov	r6, r0
  4070a6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4070aa:	f1b9 0f00 	cmp.w	r9, #0
  4070ae:	f000 815a 	beq.w	407366 <_dtoa_r+0xaa6>
  4070b2:	9d07      	ldr	r5, [sp, #28]
  4070b4:	9517      	str	r5, [sp, #92]	; 0x5c
  4070b6:	46c8      	mov	r8, r9
  4070b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4070ba:	2d00      	cmp	r5, #0
  4070bc:	f000 8222 	beq.w	407504 <_dtoa_r+0xc44>
  4070c0:	4b25      	ldr	r3, [pc, #148]	; (407158 <_dtoa_r+0x898>)
  4070c2:	4929      	ldr	r1, [pc, #164]	; (407168 <_dtoa_r+0x8a8>)
  4070c4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4070c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4070cc:	2000      	movs	r0, #0
  4070ce:	f7fd fe7b 	bl	404dc8 <__aeabi_ddiv>
  4070d2:	4632      	mov	r2, r6
  4070d4:	463b      	mov	r3, r7
  4070d6:	f7fd fb99 	bl	40480c <__aeabi_dsub>
  4070da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4070de:	4659      	mov	r1, fp
  4070e0:	4650      	mov	r0, sl
  4070e2:	f001 fe51 	bl	408d88 <__aeabi_d2iz>
  4070e6:	4605      	mov	r5, r0
  4070e8:	f7fd fcde 	bl	404aa8 <__aeabi_i2d>
  4070ec:	4602      	mov	r2, r0
  4070ee:	460b      	mov	r3, r1
  4070f0:	4650      	mov	r0, sl
  4070f2:	4659      	mov	r1, fp
  4070f4:	f7fd fb8a 	bl	40480c <__aeabi_dsub>
  4070f8:	3530      	adds	r5, #48	; 0x30
  4070fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4070fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407100:	b2ed      	uxtb	r5, r5
  407102:	7035      	strb	r5, [r6, #0]
  407104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40710c:	f106 0b01 	add.w	fp, r6, #1
  407110:	f7fd ffc0 	bl	405094 <__aeabi_dcmpgt>
  407114:	2800      	cmp	r0, #0
  407116:	f040 82a9 	bne.w	40766c <_dtoa_r+0xdac>
  40711a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40711e:	2000      	movs	r0, #0
  407120:	490f      	ldr	r1, [pc, #60]	; (407160 <_dtoa_r+0x8a0>)
  407122:	f7fd fb73 	bl	40480c <__aeabi_dsub>
  407126:	4602      	mov	r2, r0
  407128:	460b      	mov	r3, r1
  40712a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40712e:	f7fd ffb1 	bl	405094 <__aeabi_dcmpgt>
  407132:	2800      	cmp	r0, #0
  407134:	f040 82a0 	bne.w	407678 <_dtoa_r+0xdb8>
  407138:	f1b8 0f01 	cmp.w	r8, #1
  40713c:	f340 8180 	ble.w	407440 <_dtoa_r+0xb80>
  407140:	44b0      	add	r8, r6
  407142:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  407146:	46a2      	mov	sl, r4
  407148:	46c1      	mov	r9, r8
  40714a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40714e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  407152:	e019      	b.n	407188 <_dtoa_r+0x8c8>
  407154:	fffffbee 	.word	0xfffffbee
  407158:	00409c48 	.word	0x00409c48
  40715c:	00409d10 	.word	0x00409d10
  407160:	3ff00000 	.word	0x3ff00000
  407164:	401c0000 	.word	0x401c0000
  407168:	3fe00000 	.word	0x3fe00000
  40716c:	2000      	movs	r0, #0
  40716e:	49a8      	ldr	r1, [pc, #672]	; (407410 <_dtoa_r+0xb50>)
  407170:	f7fd fb4c 	bl	40480c <__aeabi_dsub>
  407174:	4622      	mov	r2, r4
  407176:	462b      	mov	r3, r5
  407178:	f7fd ff6e 	bl	405058 <__aeabi_dcmplt>
  40717c:	2800      	cmp	r0, #0
  40717e:	f040 8279 	bne.w	407674 <_dtoa_r+0xdb4>
  407182:	45cb      	cmp	fp, r9
  407184:	f000 8159 	beq.w	40743a <_dtoa_r+0xb7a>
  407188:	4620      	mov	r0, r4
  40718a:	4629      	mov	r1, r5
  40718c:	2200      	movs	r2, #0
  40718e:	4ba1      	ldr	r3, [pc, #644]	; (407414 <_dtoa_r+0xb54>)
  407190:	f7fd fcf0 	bl	404b74 <__aeabi_dmul>
  407194:	2200      	movs	r2, #0
  407196:	4b9f      	ldr	r3, [pc, #636]	; (407414 <_dtoa_r+0xb54>)
  407198:	4604      	mov	r4, r0
  40719a:	460d      	mov	r5, r1
  40719c:	4630      	mov	r0, r6
  40719e:	4639      	mov	r1, r7
  4071a0:	f7fd fce8 	bl	404b74 <__aeabi_dmul>
  4071a4:	460f      	mov	r7, r1
  4071a6:	4606      	mov	r6, r0
  4071a8:	f001 fdee 	bl	408d88 <__aeabi_d2iz>
  4071ac:	4680      	mov	r8, r0
  4071ae:	f7fd fc7b 	bl	404aa8 <__aeabi_i2d>
  4071b2:	4602      	mov	r2, r0
  4071b4:	460b      	mov	r3, r1
  4071b6:	4630      	mov	r0, r6
  4071b8:	4639      	mov	r1, r7
  4071ba:	f7fd fb27 	bl	40480c <__aeabi_dsub>
  4071be:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4071c2:	fa5f f888 	uxtb.w	r8, r8
  4071c6:	4622      	mov	r2, r4
  4071c8:	462b      	mov	r3, r5
  4071ca:	f80b 8b01 	strb.w	r8, [fp], #1
  4071ce:	4606      	mov	r6, r0
  4071d0:	460f      	mov	r7, r1
  4071d2:	f7fd ff41 	bl	405058 <__aeabi_dcmplt>
  4071d6:	4632      	mov	r2, r6
  4071d8:	463b      	mov	r3, r7
  4071da:	2800      	cmp	r0, #0
  4071dc:	d0c6      	beq.n	40716c <_dtoa_r+0x8ac>
  4071de:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4071e0:	9607      	str	r6, [sp, #28]
  4071e2:	4654      	mov	r4, sl
  4071e4:	e539      	b.n	406c5a <_dtoa_r+0x39a>
  4071e6:	2600      	movs	r6, #0
  4071e8:	960b      	str	r6, [sp, #44]	; 0x2c
  4071ea:	9825      	ldr	r0, [sp, #148]	; 0x94
  4071ec:	2800      	cmp	r0, #0
  4071ee:	dd3c      	ble.n	40726a <_dtoa_r+0x9aa>
  4071f0:	4606      	mov	r6, r0
  4071f2:	900f      	str	r0, [sp, #60]	; 0x3c
  4071f4:	4681      	mov	r9, r0
  4071f6:	e6ec      	b.n	406fd2 <_dtoa_r+0x712>
  4071f8:	2601      	movs	r6, #1
  4071fa:	960b      	str	r6, [sp, #44]	; 0x2c
  4071fc:	e7f5      	b.n	4071ea <_dtoa_r+0x92a>
  4071fe:	f1b9 0f00 	cmp.w	r9, #0
  407202:	f73f ac7c 	bgt.w	406afe <_dtoa_r+0x23e>
  407206:	f040 80c6 	bne.w	407396 <_dtoa_r+0xad6>
  40720a:	2200      	movs	r2, #0
  40720c:	4b82      	ldr	r3, [pc, #520]	; (407418 <_dtoa_r+0xb58>)
  40720e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407212:	f7fd fcaf 	bl	404b74 <__aeabi_dmul>
  407216:	4652      	mov	r2, sl
  407218:	465b      	mov	r3, fp
  40721a:	f7fd ff31 	bl	405080 <__aeabi_dcmpge>
  40721e:	46c8      	mov	r8, r9
  407220:	464e      	mov	r6, r9
  407222:	2800      	cmp	r0, #0
  407224:	d07c      	beq.n	407320 <_dtoa_r+0xa60>
  407226:	9d25      	ldr	r5, [sp, #148]	; 0x94
  407228:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40722c:	43ed      	mvns	r5, r5
  40722e:	9507      	str	r5, [sp, #28]
  407230:	4641      	mov	r1, r8
  407232:	4620      	mov	r0, r4
  407234:	f000 ffa0 	bl	408178 <_Bfree>
  407238:	2e00      	cmp	r6, #0
  40723a:	f47f ae06 	bne.w	406e4a <_dtoa_r+0x58a>
  40723e:	e50c      	b.n	406c5a <_dtoa_r+0x39a>
  407240:	990a      	ldr	r1, [sp, #40]	; 0x28
  407242:	4620      	mov	r0, r4
  407244:	f001 f8e4 	bl	408410 <__pow5mult>
  407248:	900a      	str	r0, [sp, #40]	; 0x28
  40724a:	e56a      	b.n	406d22 <_dtoa_r+0x462>
  40724c:	9d16      	ldr	r5, [sp, #88]	; 0x58
  40724e:	2d00      	cmp	r5, #0
  407250:	f000 81b7 	beq.w	4075c2 <_dtoa_r+0xd02>
  407254:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407258:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40725a:	9d08      	ldr	r5, [sp, #32]
  40725c:	e527      	b.n	406cae <_dtoa_r+0x3ee>
  40725e:	4601      	mov	r1, r0
  407260:	4620      	mov	r0, r4
  407262:	f000 ff89 	bl	408178 <_Bfree>
  407266:	2201      	movs	r2, #1
  407268:	e67a      	b.n	406f60 <_dtoa_r+0x6a0>
  40726a:	2601      	movs	r6, #1
  40726c:	9625      	str	r6, [sp, #148]	; 0x94
  40726e:	960f      	str	r6, [sp, #60]	; 0x3c
  407270:	46b1      	mov	r9, r6
  407272:	2100      	movs	r1, #0
  407274:	6461      	str	r1, [r4, #68]	; 0x44
  407276:	e6bb      	b.n	406ff0 <_dtoa_r+0x730>
  407278:	980a      	ldr	r0, [sp, #40]	; 0x28
  40727a:	4641      	mov	r1, r8
  40727c:	f001 f974 	bl	408568 <__mcmp>
  407280:	2800      	cmp	r0, #0
  407282:	f6bf ad8f 	bge.w	406da4 <_dtoa_r+0x4e4>
  407286:	f8dd e01c 	ldr.w	lr, [sp, #28]
  40728a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40728c:	f10e 3eff 	add.w	lr, lr, #4294967295
  407290:	4620      	mov	r0, r4
  407292:	220a      	movs	r2, #10
  407294:	2300      	movs	r3, #0
  407296:	f8cd e01c 	str.w	lr, [sp, #28]
  40729a:	f000 ff77 	bl	40818c <__multadd>
  40729e:	900a      	str	r0, [sp, #40]	; 0x28
  4072a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4072a2:	2800      	cmp	r0, #0
  4072a4:	f040 8207 	bne.w	4076b6 <_dtoa_r+0xdf6>
  4072a8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4072ac:	e57a      	b.n	406da4 <_dtoa_r+0x4e4>
  4072ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4072b2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4072b6:	6918      	ldr	r0, [r3, #16]
  4072b8:	f000 ffb4 	bl	408224 <__hi0bits>
  4072bc:	f1c0 0020 	rsb	r0, r0, #32
  4072c0:	e547      	b.n	406d52 <_dtoa_r+0x492>
  4072c2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4072c4:	f7ff bb2d 	b.w	406922 <_dtoa_r+0x62>
  4072c8:	f1ba 0f00 	cmp.w	sl, #0
  4072cc:	f47f ad3b 	bne.w	406d46 <_dtoa_r+0x486>
  4072d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4072d4:	2b00      	cmp	r3, #0
  4072d6:	f040 817b 	bne.w	4075d0 <_dtoa_r+0xd10>
  4072da:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4072de:	0d3f      	lsrs	r7, r7, #20
  4072e0:	053f      	lsls	r7, r7, #20
  4072e2:	2f00      	cmp	r7, #0
  4072e4:	f43f ad30 	beq.w	406d48 <_dtoa_r+0x488>
  4072e8:	9a08      	ldr	r2, [sp, #32]
  4072ea:	9b06      	ldr	r3, [sp, #24]
  4072ec:	3201      	adds	r2, #1
  4072ee:	3301      	adds	r3, #1
  4072f0:	9208      	str	r2, [sp, #32]
  4072f2:	9306      	str	r3, [sp, #24]
  4072f4:	2701      	movs	r7, #1
  4072f6:	e527      	b.n	406d48 <_dtoa_r+0x488>
  4072f8:	9924      	ldr	r1, [sp, #144]	; 0x90
  4072fa:	2902      	cmp	r1, #2
  4072fc:	f77f ad56 	ble.w	406dac <_dtoa_r+0x4ec>
  407300:	f1b9 0f00 	cmp.w	r9, #0
  407304:	d18f      	bne.n	407226 <_dtoa_r+0x966>
  407306:	4641      	mov	r1, r8
  407308:	464b      	mov	r3, r9
  40730a:	2205      	movs	r2, #5
  40730c:	4620      	mov	r0, r4
  40730e:	f000 ff3d 	bl	40818c <__multadd>
  407312:	4680      	mov	r8, r0
  407314:	4641      	mov	r1, r8
  407316:	980a      	ldr	r0, [sp, #40]	; 0x28
  407318:	f001 f926 	bl	408568 <__mcmp>
  40731c:	2800      	cmp	r0, #0
  40731e:	dd82      	ble.n	407226 <_dtoa_r+0x966>
  407320:	9d07      	ldr	r5, [sp, #28]
  407322:	3501      	adds	r5, #1
  407324:	9507      	str	r5, [sp, #28]
  407326:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407328:	2331      	movs	r3, #49	; 0x31
  40732a:	702b      	strb	r3, [r5, #0]
  40732c:	f105 0b01 	add.w	fp, r5, #1
  407330:	e77e      	b.n	407230 <_dtoa_r+0x970>
  407332:	9807      	ldr	r0, [sp, #28]
  407334:	9909      	ldr	r1, [sp, #36]	; 0x24
  407336:	2331      	movs	r3, #49	; 0x31
  407338:	3001      	adds	r0, #1
  40733a:	9007      	str	r0, [sp, #28]
  40733c:	700b      	strb	r3, [r1, #0]
  40733e:	e576      	b.n	406e2e <_dtoa_r+0x56e>
  407340:	46a3      	mov	fp, r4
  407342:	9c03      	ldr	r4, [sp, #12]
  407344:	e489      	b.n	406c5a <_dtoa_r+0x39a>
  407346:	4640      	mov	r0, r8
  407348:	f7fd fbae 	bl	404aa8 <__aeabi_i2d>
  40734c:	4602      	mov	r2, r0
  40734e:	460b      	mov	r3, r1
  407350:	4650      	mov	r0, sl
  407352:	4659      	mov	r1, fp
  407354:	f7fd fc0e 	bl	404b74 <__aeabi_dmul>
  407358:	2200      	movs	r2, #0
  40735a:	4b30      	ldr	r3, [pc, #192]	; (40741c <_dtoa_r+0xb5c>)
  40735c:	f7fd fa58 	bl	404810 <__adddf3>
  407360:	4606      	mov	r6, r0
  407362:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  407366:	4650      	mov	r0, sl
  407368:	4659      	mov	r1, fp
  40736a:	2200      	movs	r2, #0
  40736c:	4b2a      	ldr	r3, [pc, #168]	; (407418 <_dtoa_r+0xb58>)
  40736e:	f7fd fa4d 	bl	40480c <__aeabi_dsub>
  407372:	4632      	mov	r2, r6
  407374:	463b      	mov	r3, r7
  407376:	4682      	mov	sl, r0
  407378:	468b      	mov	fp, r1
  40737a:	f7fd fe8b 	bl	405094 <__aeabi_dcmpgt>
  40737e:	2800      	cmp	r0, #0
  407380:	f040 80bc 	bne.w	4074fc <_dtoa_r+0xc3c>
  407384:	4632      	mov	r2, r6
  407386:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40738a:	4650      	mov	r0, sl
  40738c:	4659      	mov	r1, fp
  40738e:	f7fd fe63 	bl	405058 <__aeabi_dcmplt>
  407392:	2800      	cmp	r0, #0
  407394:	d054      	beq.n	407440 <_dtoa_r+0xb80>
  407396:	f04f 0800 	mov.w	r8, #0
  40739a:	4646      	mov	r6, r8
  40739c:	e743      	b.n	407226 <_dtoa_r+0x966>
  40739e:	990a      	ldr	r1, [sp, #40]	; 0x28
  4073a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4073a2:	4620      	mov	r0, r4
  4073a4:	f001 f834 	bl	408410 <__pow5mult>
  4073a8:	900a      	str	r0, [sp, #40]	; 0x28
  4073aa:	e4ba      	b.n	406d22 <_dtoa_r+0x462>
  4073ac:	2601      	movs	r6, #1
  4073ae:	960b      	str	r6, [sp, #44]	; 0x2c
  4073b0:	e602      	b.n	406fb8 <_dtoa_r+0x6f8>
  4073b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4073b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  4073b6:	970c      	str	r7, [sp, #48]	; 0x30
  4073b8:	1b7b      	subs	r3, r7, r5
  4073ba:	441e      	add	r6, r3
  4073bc:	960d      	str	r6, [sp, #52]	; 0x34
  4073be:	2700      	movs	r7, #0
  4073c0:	e46f      	b.n	406ca2 <_dtoa_r+0x3e2>
  4073c2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4073c6:	f04f 0802 	mov.w	r8, #2
  4073ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4073ce:	e638      	b.n	407042 <_dtoa_r+0x782>
  4073d0:	2a00      	cmp	r2, #0
  4073d2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4073d6:	46d9      	mov	r9, fp
  4073d8:	dd11      	ble.n	4073fe <_dtoa_r+0xb3e>
  4073da:	990a      	ldr	r1, [sp, #40]	; 0x28
  4073dc:	2201      	movs	r2, #1
  4073de:	4620      	mov	r0, r4
  4073e0:	f001 f864 	bl	4084ac <__lshift>
  4073e4:	4641      	mov	r1, r8
  4073e6:	900a      	str	r0, [sp, #40]	; 0x28
  4073e8:	f001 f8be 	bl	408568 <__mcmp>
  4073ec:	2800      	cmp	r0, #0
  4073ee:	f340 815b 	ble.w	4076a8 <_dtoa_r+0xde8>
  4073f2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4073f6:	f000 811a 	beq.w	40762e <_dtoa_r+0xd6e>
  4073fa:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  4073fe:	9b06      	ldr	r3, [sp, #24]
  407400:	4635      	mov	r5, r6
  407402:	f883 a000 	strb.w	sl, [r3]
  407406:	f103 0b01 	add.w	fp, r3, #1
  40740a:	463e      	mov	r6, r7
  40740c:	e50f      	b.n	406e2e <_dtoa_r+0x56e>
  40740e:	bf00      	nop
  407410:	3ff00000 	.word	0x3ff00000
  407414:	40240000 	.word	0x40240000
  407418:	40140000 	.word	0x40140000
  40741c:	401c0000 	.word	0x401c0000
  407420:	d103      	bne.n	40742a <_dtoa_r+0xb6a>
  407422:	f01a 0f01 	tst.w	sl, #1
  407426:	f47f acf2 	bne.w	406e0e <_dtoa_r+0x54e>
  40742a:	465b      	mov	r3, fp
  40742c:	469b      	mov	fp, r3
  40742e:	3b01      	subs	r3, #1
  407430:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  407434:	2a30      	cmp	r2, #48	; 0x30
  407436:	d0f9      	beq.n	40742c <_dtoa_r+0xb6c>
  407438:	e4f9      	b.n	406e2e <_dtoa_r+0x56e>
  40743a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  40743e:	4654      	mov	r4, sl
  407440:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  407444:	f7ff bb48 	b.w	406ad8 <_dtoa_r+0x218>
  407448:	9e07      	ldr	r6, [sp, #28]
  40744a:	4275      	negs	r5, r6
  40744c:	2d00      	cmp	r5, #0
  40744e:	f000 80c2 	beq.w	4075d6 <_dtoa_r+0xd16>
  407452:	4ba3      	ldr	r3, [pc, #652]	; (4076e0 <_dtoa_r+0xe20>)
  407454:	f005 020f 	and.w	r2, r5, #15
  407458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40745c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407460:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407464:	f7fd fb86 	bl	404b74 <__aeabi_dmul>
  407468:	112d      	asrs	r5, r5, #4
  40746a:	4682      	mov	sl, r0
  40746c:	468b      	mov	fp, r1
  40746e:	f000 812d 	beq.w	4076cc <_dtoa_r+0xe0c>
  407472:	4e9c      	ldr	r6, [pc, #624]	; (4076e4 <_dtoa_r+0xe24>)
  407474:	f04f 0802 	mov.w	r8, #2
  407478:	07ea      	lsls	r2, r5, #31
  40747a:	d505      	bpl.n	407488 <_dtoa_r+0xbc8>
  40747c:	e9d6 2300 	ldrd	r2, r3, [r6]
  407480:	f108 0801 	add.w	r8, r8, #1
  407484:	f7fd fb76 	bl	404b74 <__aeabi_dmul>
  407488:	106d      	asrs	r5, r5, #1
  40748a:	f106 0608 	add.w	r6, r6, #8
  40748e:	d1f3      	bne.n	407478 <_dtoa_r+0xbb8>
  407490:	4682      	mov	sl, r0
  407492:	468b      	mov	fp, r1
  407494:	e5f0      	b.n	407078 <_dtoa_r+0x7b8>
  407496:	9e07      	ldr	r6, [sp, #28]
  407498:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40749a:	2230      	movs	r2, #48	; 0x30
  40749c:	702a      	strb	r2, [r5, #0]
  40749e:	3601      	adds	r6, #1
  4074a0:	2231      	movs	r2, #49	; 0x31
  4074a2:	9607      	str	r6, [sp, #28]
  4074a4:	701a      	strb	r2, [r3, #0]
  4074a6:	f7ff bbd8 	b.w	406c5a <_dtoa_r+0x39a>
  4074aa:	6871      	ldr	r1, [r6, #4]
  4074ac:	4620      	mov	r0, r4
  4074ae:	f000 fe3d 	bl	40812c <_Balloc>
  4074b2:	6933      	ldr	r3, [r6, #16]
  4074b4:	1c9a      	adds	r2, r3, #2
  4074b6:	4605      	mov	r5, r0
  4074b8:	0092      	lsls	r2, r2, #2
  4074ba:	f106 010c 	add.w	r1, r6, #12
  4074be:	300c      	adds	r0, #12
  4074c0:	f000 fd36 	bl	407f30 <memcpy>
  4074c4:	4620      	mov	r0, r4
  4074c6:	4629      	mov	r1, r5
  4074c8:	2201      	movs	r2, #1
  4074ca:	f000 ffef 	bl	4084ac <__lshift>
  4074ce:	4607      	mov	r7, r0
  4074d0:	e504      	b.n	406edc <_dtoa_r+0x61c>
  4074d2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4074d6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4074da:	f000 80a8 	beq.w	40762e <_dtoa_r+0xd6e>
  4074de:	9d06      	ldr	r5, [sp, #24]
  4074e0:	f10a 0301 	add.w	r3, sl, #1
  4074e4:	702b      	strb	r3, [r5, #0]
  4074e6:	4635      	mov	r5, r6
  4074e8:	9e06      	ldr	r6, [sp, #24]
  4074ea:	f106 0b01 	add.w	fp, r6, #1
  4074ee:	463e      	mov	r6, r7
  4074f0:	e49d      	b.n	406e2e <_dtoa_r+0x56e>
  4074f2:	4635      	mov	r5, r6
  4074f4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4074f8:	463e      	mov	r6, r7
  4074fa:	e47c      	b.n	406df6 <_dtoa_r+0x536>
  4074fc:	f04f 0800 	mov.w	r8, #0
  407500:	4646      	mov	r6, r8
  407502:	e70d      	b.n	407320 <_dtoa_r+0xa60>
  407504:	4976      	ldr	r1, [pc, #472]	; (4076e0 <_dtoa_r+0xe20>)
  407506:	f108 35ff 	add.w	r5, r8, #4294967295
  40750a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  40750e:	4632      	mov	r2, r6
  407510:	463b      	mov	r3, r7
  407512:	e9d1 0100 	ldrd	r0, r1, [r1]
  407516:	9510      	str	r5, [sp, #64]	; 0x40
  407518:	f7fd fb2c 	bl	404b74 <__aeabi_dmul>
  40751c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  407520:	4659      	mov	r1, fp
  407522:	4650      	mov	r0, sl
  407524:	f001 fc30 	bl	408d88 <__aeabi_d2iz>
  407528:	4605      	mov	r5, r0
  40752a:	f7fd fabd 	bl	404aa8 <__aeabi_i2d>
  40752e:	4602      	mov	r2, r0
  407530:	460b      	mov	r3, r1
  407532:	4650      	mov	r0, sl
  407534:	4659      	mov	r1, fp
  407536:	f7fd f969 	bl	40480c <__aeabi_dsub>
  40753a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  40753e:	3530      	adds	r5, #48	; 0x30
  407540:	f1b8 0f01 	cmp.w	r8, #1
  407544:	4606      	mov	r6, r0
  407546:	460f      	mov	r7, r1
  407548:	f88e 5000 	strb.w	r5, [lr]
  40754c:	f10e 0b01 	add.w	fp, lr, #1
  407550:	d01e      	beq.n	407590 <_dtoa_r+0xcd0>
  407552:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407554:	1e6b      	subs	r3, r5, #1
  407556:	eb03 0a08 	add.w	sl, r3, r8
  40755a:	2200      	movs	r2, #0
  40755c:	4b62      	ldr	r3, [pc, #392]	; (4076e8 <_dtoa_r+0xe28>)
  40755e:	f7fd fb09 	bl	404b74 <__aeabi_dmul>
  407562:	460f      	mov	r7, r1
  407564:	4606      	mov	r6, r0
  407566:	f001 fc0f 	bl	408d88 <__aeabi_d2iz>
  40756a:	4680      	mov	r8, r0
  40756c:	f7fd fa9c 	bl	404aa8 <__aeabi_i2d>
  407570:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407574:	4602      	mov	r2, r0
  407576:	460b      	mov	r3, r1
  407578:	4630      	mov	r0, r6
  40757a:	4639      	mov	r1, r7
  40757c:	f7fd f946 	bl	40480c <__aeabi_dsub>
  407580:	f805 8f01 	strb.w	r8, [r5, #1]!
  407584:	4555      	cmp	r5, sl
  407586:	d1e8      	bne.n	40755a <_dtoa_r+0xc9a>
  407588:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40758a:	4606      	mov	r6, r0
  40758c:	460f      	mov	r7, r1
  40758e:	44ab      	add	fp, r5
  407590:	2200      	movs	r2, #0
  407592:	4b56      	ldr	r3, [pc, #344]	; (4076ec <_dtoa_r+0xe2c>)
  407594:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  407598:	f7fd f93a 	bl	404810 <__adddf3>
  40759c:	4632      	mov	r2, r6
  40759e:	463b      	mov	r3, r7
  4075a0:	f7fd fd5a 	bl	405058 <__aeabi_dcmplt>
  4075a4:	2800      	cmp	r0, #0
  4075a6:	d04d      	beq.n	407644 <_dtoa_r+0xd84>
  4075a8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4075aa:	9607      	str	r6, [sp, #28]
  4075ac:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  4075b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4075b2:	f7ff bb4b 	b.w	406c4c <_dtoa_r+0x38c>
  4075b6:	9e08      	ldr	r6, [sp, #32]
  4075b8:	2300      	movs	r3, #0
  4075ba:	ebc9 0506 	rsb	r5, r9, r6
  4075be:	f7ff bb76 	b.w	406cae <_dtoa_r+0x3ee>
  4075c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4075c4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4075c6:	9d08      	ldr	r5, [sp, #32]
  4075c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4075cc:	f7ff bb6f 	b.w	406cae <_dtoa_r+0x3ee>
  4075d0:	4657      	mov	r7, sl
  4075d2:	f7ff bbb9 	b.w	406d48 <_dtoa_r+0x488>
  4075d6:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  4075da:	f04f 0802 	mov.w	r8, #2
  4075de:	e54b      	b.n	407078 <_dtoa_r+0x7b8>
  4075e0:	f1b9 0f00 	cmp.w	r9, #0
  4075e4:	f43f aeaf 	beq.w	407346 <_dtoa_r+0xa86>
  4075e8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  4075ea:	2e00      	cmp	r6, #0
  4075ec:	f77f af28 	ble.w	407440 <_dtoa_r+0xb80>
  4075f0:	2200      	movs	r2, #0
  4075f2:	4b3d      	ldr	r3, [pc, #244]	; (4076e8 <_dtoa_r+0xe28>)
  4075f4:	4650      	mov	r0, sl
  4075f6:	4659      	mov	r1, fp
  4075f8:	f7fd fabc 	bl	404b74 <__aeabi_dmul>
  4075fc:	4682      	mov	sl, r0
  4075fe:	f108 0001 	add.w	r0, r8, #1
  407602:	468b      	mov	fp, r1
  407604:	f7fd fa50 	bl	404aa8 <__aeabi_i2d>
  407608:	4602      	mov	r2, r0
  40760a:	460b      	mov	r3, r1
  40760c:	4650      	mov	r0, sl
  40760e:	4659      	mov	r1, fp
  407610:	f7fd fab0 	bl	404b74 <__aeabi_dmul>
  407614:	2200      	movs	r2, #0
  407616:	4b36      	ldr	r3, [pc, #216]	; (4076f0 <_dtoa_r+0xe30>)
  407618:	f7fd f8fa 	bl	404810 <__adddf3>
  40761c:	9d07      	ldr	r5, [sp, #28]
  40761e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  407622:	3d01      	subs	r5, #1
  407624:	4606      	mov	r6, r0
  407626:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40762a:	9517      	str	r5, [sp, #92]	; 0x5c
  40762c:	e544      	b.n	4070b8 <_dtoa_r+0x7f8>
  40762e:	4635      	mov	r5, r6
  407630:	9b06      	ldr	r3, [sp, #24]
  407632:	9e06      	ldr	r6, [sp, #24]
  407634:	9909      	ldr	r1, [sp, #36]	; 0x24
  407636:	2239      	movs	r2, #57	; 0x39
  407638:	7032      	strb	r2, [r6, #0]
  40763a:	f103 0b01 	add.w	fp, r3, #1
  40763e:	463e      	mov	r6, r7
  407640:	f7ff bbef 	b.w	406e22 <_dtoa_r+0x562>
  407644:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  407648:	2000      	movs	r0, #0
  40764a:	4928      	ldr	r1, [pc, #160]	; (4076ec <_dtoa_r+0xe2c>)
  40764c:	f7fd f8de 	bl	40480c <__aeabi_dsub>
  407650:	4632      	mov	r2, r6
  407652:	463b      	mov	r3, r7
  407654:	f7fd fd1e 	bl	405094 <__aeabi_dcmpgt>
  407658:	2800      	cmp	r0, #0
  40765a:	f43f aef1 	beq.w	407440 <_dtoa_r+0xb80>
  40765e:	465b      	mov	r3, fp
  407660:	469b      	mov	fp, r3
  407662:	3b01      	subs	r3, #1
  407664:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  407668:	2a30      	cmp	r2, #48	; 0x30
  40766a:	d0f9      	beq.n	407660 <_dtoa_r+0xda0>
  40766c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40766e:	9507      	str	r5, [sp, #28]
  407670:	f7ff baf3 	b.w	406c5a <_dtoa_r+0x39a>
  407674:	4645      	mov	r5, r8
  407676:	4654      	mov	r4, sl
  407678:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40767a:	9607      	str	r6, [sp, #28]
  40767c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40767e:	f7ff bae5 	b.w	406c4c <_dtoa_r+0x38c>
  407682:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407686:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40768a:	d0d0      	beq.n	40762e <_dtoa_r+0xd6e>
  40768c:	9b03      	ldr	r3, [sp, #12]
  40768e:	4635      	mov	r5, r6
  407690:	2b00      	cmp	r3, #0
  407692:	9e06      	ldr	r6, [sp, #24]
  407694:	bfc8      	it	gt
  407696:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  40769a:	f886 a000 	strb.w	sl, [r6]
  40769e:	f106 0b01 	add.w	fp, r6, #1
  4076a2:	463e      	mov	r6, r7
  4076a4:	f7ff bbc3 	b.w	406e2e <_dtoa_r+0x56e>
  4076a8:	f47f aea9 	bne.w	4073fe <_dtoa_r+0xb3e>
  4076ac:	f01a 0f01 	tst.w	sl, #1
  4076b0:	f43f aea5 	beq.w	4073fe <_dtoa_r+0xb3e>
  4076b4:	e69d      	b.n	4073f2 <_dtoa_r+0xb32>
  4076b6:	4631      	mov	r1, r6
  4076b8:	4620      	mov	r0, r4
  4076ba:	220a      	movs	r2, #10
  4076bc:	2300      	movs	r3, #0
  4076be:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4076c2:	f000 fd63 	bl	40818c <__multadd>
  4076c6:	4606      	mov	r6, r0
  4076c8:	f7ff bb6c 	b.w	406da4 <_dtoa_r+0x4e4>
  4076cc:	f04f 0802 	mov.w	r8, #2
  4076d0:	e4d2      	b.n	407078 <_dtoa_r+0x7b8>
  4076d2:	f43f ab52 	beq.w	406d7a <_dtoa_r+0x4ba>
  4076d6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  4076da:	f7ff bbe2 	b.w	406ea2 <_dtoa_r+0x5e2>
  4076de:	bf00      	nop
  4076e0:	00409c48 	.word	0x00409c48
  4076e4:	00409d10 	.word	0x00409d10
  4076e8:	40240000 	.word	0x40240000
  4076ec:	3fe00000 	.word	0x3fe00000
  4076f0:	401c0000 	.word	0x401c0000
  4076f4:	f3af 8000 	nop.w

004076f8 <__libc_fini_array>:
  4076f8:	b538      	push	{r3, r4, r5, lr}
  4076fa:	4d09      	ldr	r5, [pc, #36]	; (407720 <__libc_fini_array+0x28>)
  4076fc:	4c09      	ldr	r4, [pc, #36]	; (407724 <__libc_fini_array+0x2c>)
  4076fe:	1b64      	subs	r4, r4, r5
  407700:	10a4      	asrs	r4, r4, #2
  407702:	bf18      	it	ne
  407704:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  407708:	d005      	beq.n	407716 <__libc_fini_array+0x1e>
  40770a:	3c01      	subs	r4, #1
  40770c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407710:	4798      	blx	r3
  407712:	2c00      	cmp	r4, #0
  407714:	d1f9      	bne.n	40770a <__libc_fini_array+0x12>
  407716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40771a:	f002 bb1d 	b.w	409d58 <_fini>
  40771e:	bf00      	nop
  407720:	00409d64 	.word	0x00409d64
  407724:	00409d68 	.word	0x00409d68

00407728 <_malloc_trim_r>:
  407728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40772a:	4d23      	ldr	r5, [pc, #140]	; (4077b8 <_malloc_trim_r+0x90>)
  40772c:	460f      	mov	r7, r1
  40772e:	4604      	mov	r4, r0
  407730:	f000 fcf8 	bl	408124 <__malloc_lock>
  407734:	68ab      	ldr	r3, [r5, #8]
  407736:	685e      	ldr	r6, [r3, #4]
  407738:	f026 0603 	bic.w	r6, r6, #3
  40773c:	1bf1      	subs	r1, r6, r7
  40773e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  407742:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407746:	f021 010f 	bic.w	r1, r1, #15
  40774a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  40774e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  407752:	db07      	blt.n	407764 <_malloc_trim_r+0x3c>
  407754:	4620      	mov	r0, r4
  407756:	2100      	movs	r1, #0
  407758:	f001 fa00 	bl	408b5c <_sbrk_r>
  40775c:	68ab      	ldr	r3, [r5, #8]
  40775e:	4433      	add	r3, r6
  407760:	4298      	cmp	r0, r3
  407762:	d004      	beq.n	40776e <_malloc_trim_r+0x46>
  407764:	4620      	mov	r0, r4
  407766:	f000 fcdf 	bl	408128 <__malloc_unlock>
  40776a:	2000      	movs	r0, #0
  40776c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40776e:	4620      	mov	r0, r4
  407770:	4279      	negs	r1, r7
  407772:	f001 f9f3 	bl	408b5c <_sbrk_r>
  407776:	3001      	adds	r0, #1
  407778:	d00d      	beq.n	407796 <_malloc_trim_r+0x6e>
  40777a:	4b10      	ldr	r3, [pc, #64]	; (4077bc <_malloc_trim_r+0x94>)
  40777c:	68aa      	ldr	r2, [r5, #8]
  40777e:	6819      	ldr	r1, [r3, #0]
  407780:	1bf6      	subs	r6, r6, r7
  407782:	f046 0601 	orr.w	r6, r6, #1
  407786:	4620      	mov	r0, r4
  407788:	1bc9      	subs	r1, r1, r7
  40778a:	6056      	str	r6, [r2, #4]
  40778c:	6019      	str	r1, [r3, #0]
  40778e:	f000 fccb 	bl	408128 <__malloc_unlock>
  407792:	2001      	movs	r0, #1
  407794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407796:	4620      	mov	r0, r4
  407798:	2100      	movs	r1, #0
  40779a:	f001 f9df 	bl	408b5c <_sbrk_r>
  40779e:	68ab      	ldr	r3, [r5, #8]
  4077a0:	1ac2      	subs	r2, r0, r3
  4077a2:	2a0f      	cmp	r2, #15
  4077a4:	ddde      	ble.n	407764 <_malloc_trim_r+0x3c>
  4077a6:	4d06      	ldr	r5, [pc, #24]	; (4077c0 <_malloc_trim_r+0x98>)
  4077a8:	4904      	ldr	r1, [pc, #16]	; (4077bc <_malloc_trim_r+0x94>)
  4077aa:	682d      	ldr	r5, [r5, #0]
  4077ac:	f042 0201 	orr.w	r2, r2, #1
  4077b0:	1b40      	subs	r0, r0, r5
  4077b2:	605a      	str	r2, [r3, #4]
  4077b4:	6008      	str	r0, [r1, #0]
  4077b6:	e7d5      	b.n	407764 <_malloc_trim_r+0x3c>
  4077b8:	200008a4 	.word	0x200008a4
  4077bc:	20000db0 	.word	0x20000db0
  4077c0:	20000cb0 	.word	0x20000cb0

004077c4 <_free_r>:
  4077c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4077c8:	460d      	mov	r5, r1
  4077ca:	4606      	mov	r6, r0
  4077cc:	2900      	cmp	r1, #0
  4077ce:	d055      	beq.n	40787c <_free_r+0xb8>
  4077d0:	f000 fca8 	bl	408124 <__malloc_lock>
  4077d4:	f855 1c04 	ldr.w	r1, [r5, #-4]
  4077d8:	f8df c174 	ldr.w	ip, [pc, #372]	; 407950 <_free_r+0x18c>
  4077dc:	f021 0301 	bic.w	r3, r1, #1
  4077e0:	f1a5 0408 	sub.w	r4, r5, #8
  4077e4:	18e2      	adds	r2, r4, r3
  4077e6:	f8dc 0008 	ldr.w	r0, [ip, #8]
  4077ea:	6857      	ldr	r7, [r2, #4]
  4077ec:	4290      	cmp	r0, r2
  4077ee:	f027 0703 	bic.w	r7, r7, #3
  4077f2:	d069      	beq.n	4078c8 <_free_r+0x104>
  4077f4:	f011 0101 	ands.w	r1, r1, #1
  4077f8:	6057      	str	r7, [r2, #4]
  4077fa:	d032      	beq.n	407862 <_free_r+0x9e>
  4077fc:	2100      	movs	r1, #0
  4077fe:	19d0      	adds	r0, r2, r7
  407800:	6840      	ldr	r0, [r0, #4]
  407802:	07c0      	lsls	r0, r0, #31
  407804:	d406      	bmi.n	407814 <_free_r+0x50>
  407806:	443b      	add	r3, r7
  407808:	6890      	ldr	r0, [r2, #8]
  40780a:	2900      	cmp	r1, #0
  40780c:	d04e      	beq.n	4078ac <_free_r+0xe8>
  40780e:	68d2      	ldr	r2, [r2, #12]
  407810:	60c2      	str	r2, [r0, #12]
  407812:	6090      	str	r0, [r2, #8]
  407814:	f043 0201 	orr.w	r2, r3, #1
  407818:	6062      	str	r2, [r4, #4]
  40781a:	50e3      	str	r3, [r4, r3]
  40781c:	b9e1      	cbnz	r1, 407858 <_free_r+0x94>
  40781e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407822:	d32d      	bcc.n	407880 <_free_r+0xbc>
  407824:	0a5a      	lsrs	r2, r3, #9
  407826:	2a04      	cmp	r2, #4
  407828:	d86a      	bhi.n	407900 <_free_r+0x13c>
  40782a:	0998      	lsrs	r0, r3, #6
  40782c:	3038      	adds	r0, #56	; 0x38
  40782e:	0041      	lsls	r1, r0, #1
  407830:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  407834:	4946      	ldr	r1, [pc, #280]	; (407950 <_free_r+0x18c>)
  407836:	f8dc 2008 	ldr.w	r2, [ip, #8]
  40783a:	4562      	cmp	r2, ip
  40783c:	d066      	beq.n	40790c <_free_r+0x148>
  40783e:	6851      	ldr	r1, [r2, #4]
  407840:	f021 0103 	bic.w	r1, r1, #3
  407844:	428b      	cmp	r3, r1
  407846:	d202      	bcs.n	40784e <_free_r+0x8a>
  407848:	6892      	ldr	r2, [r2, #8]
  40784a:	4594      	cmp	ip, r2
  40784c:	d1f7      	bne.n	40783e <_free_r+0x7a>
  40784e:	68d3      	ldr	r3, [r2, #12]
  407850:	60e3      	str	r3, [r4, #12]
  407852:	60a2      	str	r2, [r4, #8]
  407854:	609c      	str	r4, [r3, #8]
  407856:	60d4      	str	r4, [r2, #12]
  407858:	4630      	mov	r0, r6
  40785a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40785e:	f000 bc63 	b.w	408128 <__malloc_unlock>
  407862:	f855 5c08 	ldr.w	r5, [r5, #-8]
  407866:	1b64      	subs	r4, r4, r5
  407868:	f10c 0808 	add.w	r8, ip, #8
  40786c:	68a0      	ldr	r0, [r4, #8]
  40786e:	4540      	cmp	r0, r8
  407870:	442b      	add	r3, r5
  407872:	d043      	beq.n	4078fc <_free_r+0x138>
  407874:	68e5      	ldr	r5, [r4, #12]
  407876:	60c5      	str	r5, [r0, #12]
  407878:	60a8      	str	r0, [r5, #8]
  40787a:	e7c0      	b.n	4077fe <_free_r+0x3a>
  40787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407880:	08db      	lsrs	r3, r3, #3
  407882:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  407886:	2501      	movs	r5, #1
  407888:	f8dc 0004 	ldr.w	r0, [ip, #4]
  40788c:	6891      	ldr	r1, [r2, #8]
  40788e:	60a1      	str	r1, [r4, #8]
  407890:	109b      	asrs	r3, r3, #2
  407892:	fa05 f303 	lsl.w	r3, r5, r3
  407896:	4318      	orrs	r0, r3
  407898:	60e2      	str	r2, [r4, #12]
  40789a:	f8cc 0004 	str.w	r0, [ip, #4]
  40789e:	6094      	str	r4, [r2, #8]
  4078a0:	4630      	mov	r0, r6
  4078a2:	60cc      	str	r4, [r1, #12]
  4078a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4078a8:	f000 bc3e 	b.w	408128 <__malloc_unlock>
  4078ac:	4d29      	ldr	r5, [pc, #164]	; (407954 <_free_r+0x190>)
  4078ae:	42a8      	cmp	r0, r5
  4078b0:	d1ad      	bne.n	40780e <_free_r+0x4a>
  4078b2:	f043 0201 	orr.w	r2, r3, #1
  4078b6:	f8cc 4014 	str.w	r4, [ip, #20]
  4078ba:	f8cc 4010 	str.w	r4, [ip, #16]
  4078be:	60e0      	str	r0, [r4, #12]
  4078c0:	60a0      	str	r0, [r4, #8]
  4078c2:	6062      	str	r2, [r4, #4]
  4078c4:	50e3      	str	r3, [r4, r3]
  4078c6:	e7c7      	b.n	407858 <_free_r+0x94>
  4078c8:	441f      	add	r7, r3
  4078ca:	07cb      	lsls	r3, r1, #31
  4078cc:	d407      	bmi.n	4078de <_free_r+0x11a>
  4078ce:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4078d2:	1ae4      	subs	r4, r4, r3
  4078d4:	441f      	add	r7, r3
  4078d6:	68a2      	ldr	r2, [r4, #8]
  4078d8:	68e3      	ldr	r3, [r4, #12]
  4078da:	60d3      	str	r3, [r2, #12]
  4078dc:	609a      	str	r2, [r3, #8]
  4078de:	4b1e      	ldr	r3, [pc, #120]	; (407958 <_free_r+0x194>)
  4078e0:	681b      	ldr	r3, [r3, #0]
  4078e2:	f047 0201 	orr.w	r2, r7, #1
  4078e6:	429f      	cmp	r7, r3
  4078e8:	6062      	str	r2, [r4, #4]
  4078ea:	f8cc 4008 	str.w	r4, [ip, #8]
  4078ee:	d3b3      	bcc.n	407858 <_free_r+0x94>
  4078f0:	4b1a      	ldr	r3, [pc, #104]	; (40795c <_free_r+0x198>)
  4078f2:	4630      	mov	r0, r6
  4078f4:	6819      	ldr	r1, [r3, #0]
  4078f6:	f7ff ff17 	bl	407728 <_malloc_trim_r>
  4078fa:	e7ad      	b.n	407858 <_free_r+0x94>
  4078fc:	2101      	movs	r1, #1
  4078fe:	e77e      	b.n	4077fe <_free_r+0x3a>
  407900:	2a14      	cmp	r2, #20
  407902:	d80c      	bhi.n	40791e <_free_r+0x15a>
  407904:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  407908:	0041      	lsls	r1, r0, #1
  40790a:	e791      	b.n	407830 <_free_r+0x6c>
  40790c:	684b      	ldr	r3, [r1, #4]
  40790e:	1080      	asrs	r0, r0, #2
  407910:	2501      	movs	r5, #1
  407912:	fa05 f000 	lsl.w	r0, r5, r0
  407916:	4303      	orrs	r3, r0
  407918:	604b      	str	r3, [r1, #4]
  40791a:	4613      	mov	r3, r2
  40791c:	e798      	b.n	407850 <_free_r+0x8c>
  40791e:	2a54      	cmp	r2, #84	; 0x54
  407920:	d803      	bhi.n	40792a <_free_r+0x166>
  407922:	0b18      	lsrs	r0, r3, #12
  407924:	306e      	adds	r0, #110	; 0x6e
  407926:	0041      	lsls	r1, r0, #1
  407928:	e782      	b.n	407830 <_free_r+0x6c>
  40792a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40792e:	d803      	bhi.n	407938 <_free_r+0x174>
  407930:	0bd8      	lsrs	r0, r3, #15
  407932:	3077      	adds	r0, #119	; 0x77
  407934:	0041      	lsls	r1, r0, #1
  407936:	e77b      	b.n	407830 <_free_r+0x6c>
  407938:	f240 5154 	movw	r1, #1364	; 0x554
  40793c:	428a      	cmp	r2, r1
  40793e:	d803      	bhi.n	407948 <_free_r+0x184>
  407940:	0c98      	lsrs	r0, r3, #18
  407942:	307c      	adds	r0, #124	; 0x7c
  407944:	0041      	lsls	r1, r0, #1
  407946:	e773      	b.n	407830 <_free_r+0x6c>
  407948:	21fc      	movs	r1, #252	; 0xfc
  40794a:	207e      	movs	r0, #126	; 0x7e
  40794c:	e770      	b.n	407830 <_free_r+0x6c>
  40794e:	bf00      	nop
  407950:	200008a4 	.word	0x200008a4
  407954:	200008ac 	.word	0x200008ac
  407958:	20000cac 	.word	0x20000cac
  40795c:	20000dac 	.word	0x20000dac

00407960 <_localeconv_r>:
  407960:	4800      	ldr	r0, [pc, #0]	; (407964 <_localeconv_r+0x4>)
  407962:	4770      	bx	lr
  407964:	2000086c 	.word	0x2000086c

00407968 <_malloc_r>:
  407968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40796c:	f101 050b 	add.w	r5, r1, #11
  407970:	2d16      	cmp	r5, #22
  407972:	b083      	sub	sp, #12
  407974:	4606      	mov	r6, r0
  407976:	d927      	bls.n	4079c8 <_malloc_r+0x60>
  407978:	f035 0507 	bics.w	r5, r5, #7
  40797c:	d427      	bmi.n	4079ce <_malloc_r+0x66>
  40797e:	42a9      	cmp	r1, r5
  407980:	d825      	bhi.n	4079ce <_malloc_r+0x66>
  407982:	4630      	mov	r0, r6
  407984:	f000 fbce 	bl	408124 <__malloc_lock>
  407988:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40798c:	d226      	bcs.n	4079dc <_malloc_r+0x74>
  40798e:	4fc1      	ldr	r7, [pc, #772]	; (407c94 <_malloc_r+0x32c>)
  407990:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  407994:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  407998:	68dc      	ldr	r4, [r3, #12]
  40799a:	429c      	cmp	r4, r3
  40799c:	f000 81d2 	beq.w	407d44 <_malloc_r+0x3dc>
  4079a0:	6863      	ldr	r3, [r4, #4]
  4079a2:	68e2      	ldr	r2, [r4, #12]
  4079a4:	68a1      	ldr	r1, [r4, #8]
  4079a6:	f023 0303 	bic.w	r3, r3, #3
  4079aa:	4423      	add	r3, r4
  4079ac:	4630      	mov	r0, r6
  4079ae:	685d      	ldr	r5, [r3, #4]
  4079b0:	60ca      	str	r2, [r1, #12]
  4079b2:	f045 0501 	orr.w	r5, r5, #1
  4079b6:	6091      	str	r1, [r2, #8]
  4079b8:	605d      	str	r5, [r3, #4]
  4079ba:	f000 fbb5 	bl	408128 <__malloc_unlock>
  4079be:	3408      	adds	r4, #8
  4079c0:	4620      	mov	r0, r4
  4079c2:	b003      	add	sp, #12
  4079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079c8:	2510      	movs	r5, #16
  4079ca:	42a9      	cmp	r1, r5
  4079cc:	d9d9      	bls.n	407982 <_malloc_r+0x1a>
  4079ce:	2400      	movs	r4, #0
  4079d0:	230c      	movs	r3, #12
  4079d2:	4620      	mov	r0, r4
  4079d4:	6033      	str	r3, [r6, #0]
  4079d6:	b003      	add	sp, #12
  4079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079dc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  4079e0:	f000 808a 	beq.w	407af8 <_malloc_r+0x190>
  4079e4:	f1bc 0f04 	cmp.w	ip, #4
  4079e8:	f200 8160 	bhi.w	407cac <_malloc_r+0x344>
  4079ec:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  4079f0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  4079f4:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4079f8:	4fa6      	ldr	r7, [pc, #664]	; (407c94 <_malloc_r+0x32c>)
  4079fa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  4079fe:	68cc      	ldr	r4, [r1, #12]
  407a00:	42a1      	cmp	r1, r4
  407a02:	d105      	bne.n	407a10 <_malloc_r+0xa8>
  407a04:	e00c      	b.n	407a20 <_malloc_r+0xb8>
  407a06:	2b00      	cmp	r3, #0
  407a08:	da7a      	bge.n	407b00 <_malloc_r+0x198>
  407a0a:	68e4      	ldr	r4, [r4, #12]
  407a0c:	42a1      	cmp	r1, r4
  407a0e:	d007      	beq.n	407a20 <_malloc_r+0xb8>
  407a10:	6862      	ldr	r2, [r4, #4]
  407a12:	f022 0203 	bic.w	r2, r2, #3
  407a16:	1b53      	subs	r3, r2, r5
  407a18:	2b0f      	cmp	r3, #15
  407a1a:	ddf4      	ble.n	407a06 <_malloc_r+0x9e>
  407a1c:	f10c 3cff 	add.w	ip, ip, #4294967295
  407a20:	f10c 0c01 	add.w	ip, ip, #1
  407a24:	4b9b      	ldr	r3, [pc, #620]	; (407c94 <_malloc_r+0x32c>)
  407a26:	693c      	ldr	r4, [r7, #16]
  407a28:	f103 0e08 	add.w	lr, r3, #8
  407a2c:	4574      	cmp	r4, lr
  407a2e:	f000 817e 	beq.w	407d2e <_malloc_r+0x3c6>
  407a32:	6861      	ldr	r1, [r4, #4]
  407a34:	f021 0103 	bic.w	r1, r1, #3
  407a38:	1b4a      	subs	r2, r1, r5
  407a3a:	2a0f      	cmp	r2, #15
  407a3c:	f300 8164 	bgt.w	407d08 <_malloc_r+0x3a0>
  407a40:	2a00      	cmp	r2, #0
  407a42:	f8c3 e014 	str.w	lr, [r3, #20]
  407a46:	f8c3 e010 	str.w	lr, [r3, #16]
  407a4a:	da6a      	bge.n	407b22 <_malloc_r+0x1ba>
  407a4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  407a50:	f080 813a 	bcs.w	407cc8 <_malloc_r+0x360>
  407a54:	08c9      	lsrs	r1, r1, #3
  407a56:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  407a5a:	ea4f 08a1 	mov.w	r8, r1, asr #2
  407a5e:	685a      	ldr	r2, [r3, #4]
  407a60:	6881      	ldr	r1, [r0, #8]
  407a62:	60a1      	str	r1, [r4, #8]
  407a64:	f04f 0901 	mov.w	r9, #1
  407a68:	fa09 f808 	lsl.w	r8, r9, r8
  407a6c:	ea48 0202 	orr.w	r2, r8, r2
  407a70:	60e0      	str	r0, [r4, #12]
  407a72:	605a      	str	r2, [r3, #4]
  407a74:	6084      	str	r4, [r0, #8]
  407a76:	60cc      	str	r4, [r1, #12]
  407a78:	ea4f 03ac 	mov.w	r3, ip, asr #2
  407a7c:	2001      	movs	r0, #1
  407a7e:	4098      	lsls	r0, r3
  407a80:	4290      	cmp	r0, r2
  407a82:	d85b      	bhi.n	407b3c <_malloc_r+0x1d4>
  407a84:	4202      	tst	r2, r0
  407a86:	d106      	bne.n	407a96 <_malloc_r+0x12e>
  407a88:	f02c 0c03 	bic.w	ip, ip, #3
  407a8c:	0040      	lsls	r0, r0, #1
  407a8e:	4202      	tst	r2, r0
  407a90:	f10c 0c04 	add.w	ip, ip, #4
  407a94:	d0fa      	beq.n	407a8c <_malloc_r+0x124>
  407a96:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  407a9a:	4644      	mov	r4, r8
  407a9c:	46e1      	mov	r9, ip
  407a9e:	68e3      	ldr	r3, [r4, #12]
  407aa0:	429c      	cmp	r4, r3
  407aa2:	d107      	bne.n	407ab4 <_malloc_r+0x14c>
  407aa4:	e145      	b.n	407d32 <_malloc_r+0x3ca>
  407aa6:	2a00      	cmp	r2, #0
  407aa8:	f280 8156 	bge.w	407d58 <_malloc_r+0x3f0>
  407aac:	68db      	ldr	r3, [r3, #12]
  407aae:	429c      	cmp	r4, r3
  407ab0:	f000 813f 	beq.w	407d32 <_malloc_r+0x3ca>
  407ab4:	6859      	ldr	r1, [r3, #4]
  407ab6:	f021 0103 	bic.w	r1, r1, #3
  407aba:	1b4a      	subs	r2, r1, r5
  407abc:	2a0f      	cmp	r2, #15
  407abe:	ddf2      	ble.n	407aa6 <_malloc_r+0x13e>
  407ac0:	461c      	mov	r4, r3
  407ac2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  407ac6:	f854 8f08 	ldr.w	r8, [r4, #8]!
  407aca:	1959      	adds	r1, r3, r5
  407acc:	f045 0901 	orr.w	r9, r5, #1
  407ad0:	f042 0501 	orr.w	r5, r2, #1
  407ad4:	f8c3 9004 	str.w	r9, [r3, #4]
  407ad8:	4630      	mov	r0, r6
  407ada:	f8c8 c00c 	str.w	ip, [r8, #12]
  407ade:	f8cc 8008 	str.w	r8, [ip, #8]
  407ae2:	6179      	str	r1, [r7, #20]
  407ae4:	6139      	str	r1, [r7, #16]
  407ae6:	f8c1 e00c 	str.w	lr, [r1, #12]
  407aea:	f8c1 e008 	str.w	lr, [r1, #8]
  407aee:	604d      	str	r5, [r1, #4]
  407af0:	508a      	str	r2, [r1, r2]
  407af2:	f000 fb19 	bl	408128 <__malloc_unlock>
  407af6:	e763      	b.n	4079c0 <_malloc_r+0x58>
  407af8:	217e      	movs	r1, #126	; 0x7e
  407afa:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  407afe:	e77b      	b.n	4079f8 <_malloc_r+0x90>
  407b00:	4422      	add	r2, r4
  407b02:	68e3      	ldr	r3, [r4, #12]
  407b04:	6850      	ldr	r0, [r2, #4]
  407b06:	68a1      	ldr	r1, [r4, #8]
  407b08:	f040 0501 	orr.w	r5, r0, #1
  407b0c:	60cb      	str	r3, [r1, #12]
  407b0e:	4630      	mov	r0, r6
  407b10:	6099      	str	r1, [r3, #8]
  407b12:	6055      	str	r5, [r2, #4]
  407b14:	f000 fb08 	bl	408128 <__malloc_unlock>
  407b18:	3408      	adds	r4, #8
  407b1a:	4620      	mov	r0, r4
  407b1c:	b003      	add	sp, #12
  407b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b22:	4421      	add	r1, r4
  407b24:	4630      	mov	r0, r6
  407b26:	684b      	ldr	r3, [r1, #4]
  407b28:	f043 0301 	orr.w	r3, r3, #1
  407b2c:	604b      	str	r3, [r1, #4]
  407b2e:	f000 fafb 	bl	408128 <__malloc_unlock>
  407b32:	3408      	adds	r4, #8
  407b34:	4620      	mov	r0, r4
  407b36:	b003      	add	sp, #12
  407b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b3c:	68bc      	ldr	r4, [r7, #8]
  407b3e:	6863      	ldr	r3, [r4, #4]
  407b40:	f023 0903 	bic.w	r9, r3, #3
  407b44:	45a9      	cmp	r9, r5
  407b46:	d304      	bcc.n	407b52 <_malloc_r+0x1ea>
  407b48:	ebc5 0309 	rsb	r3, r5, r9
  407b4c:	2b0f      	cmp	r3, #15
  407b4e:	f300 8091 	bgt.w	407c74 <_malloc_r+0x30c>
  407b52:	4b51      	ldr	r3, [pc, #324]	; (407c98 <_malloc_r+0x330>)
  407b54:	4a51      	ldr	r2, [pc, #324]	; (407c9c <_malloc_r+0x334>)
  407b56:	6819      	ldr	r1, [r3, #0]
  407b58:	6813      	ldr	r3, [r2, #0]
  407b5a:	3301      	adds	r3, #1
  407b5c:	eb05 0a01 	add.w	sl, r5, r1
  407b60:	eb04 0b09 	add.w	fp, r4, r9
  407b64:	f000 8161 	beq.w	407e2a <_malloc_r+0x4c2>
  407b68:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  407b6c:	f10a 0a0f 	add.w	sl, sl, #15
  407b70:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  407b74:	f02a 0a0f 	bic.w	sl, sl, #15
  407b78:	4630      	mov	r0, r6
  407b7a:	4651      	mov	r1, sl
  407b7c:	9201      	str	r2, [sp, #4]
  407b7e:	f000 ffed 	bl	408b5c <_sbrk_r>
  407b82:	f1b0 3fff 	cmp.w	r0, #4294967295
  407b86:	4680      	mov	r8, r0
  407b88:	9a01      	ldr	r2, [sp, #4]
  407b8a:	f000 8100 	beq.w	407d8e <_malloc_r+0x426>
  407b8e:	4583      	cmp	fp, r0
  407b90:	f200 80fa 	bhi.w	407d88 <_malloc_r+0x420>
  407b94:	f8df c110 	ldr.w	ip, [pc, #272]	; 407ca8 <_malloc_r+0x340>
  407b98:	f8dc 3000 	ldr.w	r3, [ip]
  407b9c:	45c3      	cmp	fp, r8
  407b9e:	4453      	add	r3, sl
  407ba0:	f8cc 3000 	str.w	r3, [ip]
  407ba4:	f000 814a 	beq.w	407e3c <_malloc_r+0x4d4>
  407ba8:	6812      	ldr	r2, [r2, #0]
  407baa:	493c      	ldr	r1, [pc, #240]	; (407c9c <_malloc_r+0x334>)
  407bac:	3201      	adds	r2, #1
  407bae:	bf1b      	ittet	ne
  407bb0:	ebcb 0b08 	rsbne	fp, fp, r8
  407bb4:	445b      	addne	r3, fp
  407bb6:	f8c1 8000 	streq.w	r8, [r1]
  407bba:	f8cc 3000 	strne.w	r3, [ip]
  407bbe:	f018 0307 	ands.w	r3, r8, #7
  407bc2:	f000 8113 	beq.w	407dec <_malloc_r+0x484>
  407bc6:	f1c3 0208 	rsb	r2, r3, #8
  407bca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  407bce:	4490      	add	r8, r2
  407bd0:	3308      	adds	r3, #8
  407bd2:	44c2      	add	sl, r8
  407bd4:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  407bd8:	ebca 0a03 	rsb	sl, sl, r3
  407bdc:	4651      	mov	r1, sl
  407bde:	4630      	mov	r0, r6
  407be0:	f8cd c004 	str.w	ip, [sp, #4]
  407be4:	f000 ffba 	bl	408b5c <_sbrk_r>
  407be8:	1c43      	adds	r3, r0, #1
  407bea:	f8dd c004 	ldr.w	ip, [sp, #4]
  407bee:	f000 8135 	beq.w	407e5c <_malloc_r+0x4f4>
  407bf2:	ebc8 0200 	rsb	r2, r8, r0
  407bf6:	4452      	add	r2, sl
  407bf8:	f042 0201 	orr.w	r2, r2, #1
  407bfc:	f8dc 3000 	ldr.w	r3, [ip]
  407c00:	f8c7 8008 	str.w	r8, [r7, #8]
  407c04:	4453      	add	r3, sl
  407c06:	42bc      	cmp	r4, r7
  407c08:	f8c8 2004 	str.w	r2, [r8, #4]
  407c0c:	f8cc 3000 	str.w	r3, [ip]
  407c10:	f8df a094 	ldr.w	sl, [pc, #148]	; 407ca8 <_malloc_r+0x340>
  407c14:	d015      	beq.n	407c42 <_malloc_r+0x2da>
  407c16:	f1b9 0f0f 	cmp.w	r9, #15
  407c1a:	f240 80ea 	bls.w	407df2 <_malloc_r+0x48a>
  407c1e:	6861      	ldr	r1, [r4, #4]
  407c20:	f1a9 020c 	sub.w	r2, r9, #12
  407c24:	f022 0207 	bic.w	r2, r2, #7
  407c28:	f001 0e01 	and.w	lr, r1, #1
  407c2c:	18a1      	adds	r1, r4, r2
  407c2e:	2005      	movs	r0, #5
  407c30:	ea42 0e0e 	orr.w	lr, r2, lr
  407c34:	2a0f      	cmp	r2, #15
  407c36:	f8c4 e004 	str.w	lr, [r4, #4]
  407c3a:	6048      	str	r0, [r1, #4]
  407c3c:	6088      	str	r0, [r1, #8]
  407c3e:	f200 8111 	bhi.w	407e64 <_malloc_r+0x4fc>
  407c42:	4a17      	ldr	r2, [pc, #92]	; (407ca0 <_malloc_r+0x338>)
  407c44:	68bc      	ldr	r4, [r7, #8]
  407c46:	6811      	ldr	r1, [r2, #0]
  407c48:	428b      	cmp	r3, r1
  407c4a:	bf88      	it	hi
  407c4c:	6013      	strhi	r3, [r2, #0]
  407c4e:	4a15      	ldr	r2, [pc, #84]	; (407ca4 <_malloc_r+0x33c>)
  407c50:	6811      	ldr	r1, [r2, #0]
  407c52:	428b      	cmp	r3, r1
  407c54:	bf88      	it	hi
  407c56:	6013      	strhi	r3, [r2, #0]
  407c58:	6862      	ldr	r2, [r4, #4]
  407c5a:	f022 0203 	bic.w	r2, r2, #3
  407c5e:	4295      	cmp	r5, r2
  407c60:	ebc5 0302 	rsb	r3, r5, r2
  407c64:	d801      	bhi.n	407c6a <_malloc_r+0x302>
  407c66:	2b0f      	cmp	r3, #15
  407c68:	dc04      	bgt.n	407c74 <_malloc_r+0x30c>
  407c6a:	4630      	mov	r0, r6
  407c6c:	f000 fa5c 	bl	408128 <__malloc_unlock>
  407c70:	2400      	movs	r4, #0
  407c72:	e6a5      	b.n	4079c0 <_malloc_r+0x58>
  407c74:	1962      	adds	r2, r4, r5
  407c76:	f043 0301 	orr.w	r3, r3, #1
  407c7a:	f045 0501 	orr.w	r5, r5, #1
  407c7e:	6065      	str	r5, [r4, #4]
  407c80:	4630      	mov	r0, r6
  407c82:	60ba      	str	r2, [r7, #8]
  407c84:	6053      	str	r3, [r2, #4]
  407c86:	f000 fa4f 	bl	408128 <__malloc_unlock>
  407c8a:	3408      	adds	r4, #8
  407c8c:	4620      	mov	r0, r4
  407c8e:	b003      	add	sp, #12
  407c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c94:	200008a4 	.word	0x200008a4
  407c98:	20000dac 	.word	0x20000dac
  407c9c:	20000cb0 	.word	0x20000cb0
  407ca0:	20000da8 	.word	0x20000da8
  407ca4:	20000da4 	.word	0x20000da4
  407ca8:	20000db0 	.word	0x20000db0
  407cac:	f1bc 0f14 	cmp.w	ip, #20
  407cb0:	d961      	bls.n	407d76 <_malloc_r+0x40e>
  407cb2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  407cb6:	f200 808f 	bhi.w	407dd8 <_malloc_r+0x470>
  407cba:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  407cbe:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  407cc2:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407cc6:	e697      	b.n	4079f8 <_malloc_r+0x90>
  407cc8:	0a4b      	lsrs	r3, r1, #9
  407cca:	2b04      	cmp	r3, #4
  407ccc:	d958      	bls.n	407d80 <_malloc_r+0x418>
  407cce:	2b14      	cmp	r3, #20
  407cd0:	f200 80ae 	bhi.w	407e30 <_malloc_r+0x4c8>
  407cd4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  407cd8:	0050      	lsls	r0, r2, #1
  407cda:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  407cde:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 407e9c <_malloc_r+0x534>
  407ce2:	6883      	ldr	r3, [r0, #8]
  407ce4:	4283      	cmp	r3, r0
  407ce6:	f000 808a 	beq.w	407dfe <_malloc_r+0x496>
  407cea:	685a      	ldr	r2, [r3, #4]
  407cec:	f022 0203 	bic.w	r2, r2, #3
  407cf0:	4291      	cmp	r1, r2
  407cf2:	d202      	bcs.n	407cfa <_malloc_r+0x392>
  407cf4:	689b      	ldr	r3, [r3, #8]
  407cf6:	4298      	cmp	r0, r3
  407cf8:	d1f7      	bne.n	407cea <_malloc_r+0x382>
  407cfa:	68d9      	ldr	r1, [r3, #12]
  407cfc:	687a      	ldr	r2, [r7, #4]
  407cfe:	60e1      	str	r1, [r4, #12]
  407d00:	60a3      	str	r3, [r4, #8]
  407d02:	608c      	str	r4, [r1, #8]
  407d04:	60dc      	str	r4, [r3, #12]
  407d06:	e6b7      	b.n	407a78 <_malloc_r+0x110>
  407d08:	1961      	adds	r1, r4, r5
  407d0a:	f042 0701 	orr.w	r7, r2, #1
  407d0e:	f045 0501 	orr.w	r5, r5, #1
  407d12:	6065      	str	r5, [r4, #4]
  407d14:	4630      	mov	r0, r6
  407d16:	6159      	str	r1, [r3, #20]
  407d18:	6119      	str	r1, [r3, #16]
  407d1a:	f8c1 e00c 	str.w	lr, [r1, #12]
  407d1e:	f8c1 e008 	str.w	lr, [r1, #8]
  407d22:	604f      	str	r7, [r1, #4]
  407d24:	508a      	str	r2, [r1, r2]
  407d26:	3408      	adds	r4, #8
  407d28:	f000 f9fe 	bl	408128 <__malloc_unlock>
  407d2c:	e648      	b.n	4079c0 <_malloc_r+0x58>
  407d2e:	685a      	ldr	r2, [r3, #4]
  407d30:	e6a2      	b.n	407a78 <_malloc_r+0x110>
  407d32:	f109 0901 	add.w	r9, r9, #1
  407d36:	f019 0f03 	tst.w	r9, #3
  407d3a:	f104 0408 	add.w	r4, r4, #8
  407d3e:	f47f aeae 	bne.w	407a9e <_malloc_r+0x136>
  407d42:	e02d      	b.n	407da0 <_malloc_r+0x438>
  407d44:	f104 0308 	add.w	r3, r4, #8
  407d48:	6964      	ldr	r4, [r4, #20]
  407d4a:	42a3      	cmp	r3, r4
  407d4c:	bf08      	it	eq
  407d4e:	f10c 0c02 	addeq.w	ip, ip, #2
  407d52:	f43f ae67 	beq.w	407a24 <_malloc_r+0xbc>
  407d56:	e623      	b.n	4079a0 <_malloc_r+0x38>
  407d58:	4419      	add	r1, r3
  407d5a:	461c      	mov	r4, r3
  407d5c:	6848      	ldr	r0, [r1, #4]
  407d5e:	68db      	ldr	r3, [r3, #12]
  407d60:	f854 2f08 	ldr.w	r2, [r4, #8]!
  407d64:	f040 0501 	orr.w	r5, r0, #1
  407d68:	604d      	str	r5, [r1, #4]
  407d6a:	4630      	mov	r0, r6
  407d6c:	60d3      	str	r3, [r2, #12]
  407d6e:	609a      	str	r2, [r3, #8]
  407d70:	f000 f9da 	bl	408128 <__malloc_unlock>
  407d74:	e624      	b.n	4079c0 <_malloc_r+0x58>
  407d76:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  407d7a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407d7e:	e63b      	b.n	4079f8 <_malloc_r+0x90>
  407d80:	098a      	lsrs	r2, r1, #6
  407d82:	3238      	adds	r2, #56	; 0x38
  407d84:	0050      	lsls	r0, r2, #1
  407d86:	e7a8      	b.n	407cda <_malloc_r+0x372>
  407d88:	42bc      	cmp	r4, r7
  407d8a:	f43f af03 	beq.w	407b94 <_malloc_r+0x22c>
  407d8e:	68bc      	ldr	r4, [r7, #8]
  407d90:	6862      	ldr	r2, [r4, #4]
  407d92:	f022 0203 	bic.w	r2, r2, #3
  407d96:	e762      	b.n	407c5e <_malloc_r+0x2f6>
  407d98:	f8d8 8000 	ldr.w	r8, [r8]
  407d9c:	4598      	cmp	r8, r3
  407d9e:	d17b      	bne.n	407e98 <_malloc_r+0x530>
  407da0:	f01c 0f03 	tst.w	ip, #3
  407da4:	f1a8 0308 	sub.w	r3, r8, #8
  407da8:	f10c 3cff 	add.w	ip, ip, #4294967295
  407dac:	d1f4      	bne.n	407d98 <_malloc_r+0x430>
  407dae:	687b      	ldr	r3, [r7, #4]
  407db0:	ea23 0300 	bic.w	r3, r3, r0
  407db4:	607b      	str	r3, [r7, #4]
  407db6:	0040      	lsls	r0, r0, #1
  407db8:	4298      	cmp	r0, r3
  407dba:	f63f aebf 	bhi.w	407b3c <_malloc_r+0x1d4>
  407dbe:	2800      	cmp	r0, #0
  407dc0:	f43f aebc 	beq.w	407b3c <_malloc_r+0x1d4>
  407dc4:	4203      	tst	r3, r0
  407dc6:	46cc      	mov	ip, r9
  407dc8:	f47f ae65 	bne.w	407a96 <_malloc_r+0x12e>
  407dcc:	0040      	lsls	r0, r0, #1
  407dce:	4203      	tst	r3, r0
  407dd0:	f10c 0c04 	add.w	ip, ip, #4
  407dd4:	d0fa      	beq.n	407dcc <_malloc_r+0x464>
  407dd6:	e65e      	b.n	407a96 <_malloc_r+0x12e>
  407dd8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  407ddc:	d81a      	bhi.n	407e14 <_malloc_r+0x4ac>
  407dde:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  407de2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  407de6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407dea:	e605      	b.n	4079f8 <_malloc_r+0x90>
  407dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  407df0:	e6ef      	b.n	407bd2 <_malloc_r+0x26a>
  407df2:	2301      	movs	r3, #1
  407df4:	f8c8 3004 	str.w	r3, [r8, #4]
  407df8:	4644      	mov	r4, r8
  407dfa:	2200      	movs	r2, #0
  407dfc:	e72f      	b.n	407c5e <_malloc_r+0x2f6>
  407dfe:	1091      	asrs	r1, r2, #2
  407e00:	2001      	movs	r0, #1
  407e02:	f8d8 2004 	ldr.w	r2, [r8, #4]
  407e06:	fa00 f101 	lsl.w	r1, r0, r1
  407e0a:	430a      	orrs	r2, r1
  407e0c:	f8c8 2004 	str.w	r2, [r8, #4]
  407e10:	4619      	mov	r1, r3
  407e12:	e774      	b.n	407cfe <_malloc_r+0x396>
  407e14:	f240 5354 	movw	r3, #1364	; 0x554
  407e18:	459c      	cmp	ip, r3
  407e1a:	d81b      	bhi.n	407e54 <_malloc_r+0x4ec>
  407e1c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  407e20:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  407e24:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407e28:	e5e6      	b.n	4079f8 <_malloc_r+0x90>
  407e2a:	f10a 0a10 	add.w	sl, sl, #16
  407e2e:	e6a3      	b.n	407b78 <_malloc_r+0x210>
  407e30:	2b54      	cmp	r3, #84	; 0x54
  407e32:	d81f      	bhi.n	407e74 <_malloc_r+0x50c>
  407e34:	0b0a      	lsrs	r2, r1, #12
  407e36:	326e      	adds	r2, #110	; 0x6e
  407e38:	0050      	lsls	r0, r2, #1
  407e3a:	e74e      	b.n	407cda <_malloc_r+0x372>
  407e3c:	f3cb 010b 	ubfx	r1, fp, #0, #12
  407e40:	2900      	cmp	r1, #0
  407e42:	f47f aeb1 	bne.w	407ba8 <_malloc_r+0x240>
  407e46:	eb0a 0109 	add.w	r1, sl, r9
  407e4a:	68ba      	ldr	r2, [r7, #8]
  407e4c:	f041 0101 	orr.w	r1, r1, #1
  407e50:	6051      	str	r1, [r2, #4]
  407e52:	e6f6      	b.n	407c42 <_malloc_r+0x2da>
  407e54:	21fc      	movs	r1, #252	; 0xfc
  407e56:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  407e5a:	e5cd      	b.n	4079f8 <_malloc_r+0x90>
  407e5c:	2201      	movs	r2, #1
  407e5e:	f04f 0a00 	mov.w	sl, #0
  407e62:	e6cb      	b.n	407bfc <_malloc_r+0x294>
  407e64:	f104 0108 	add.w	r1, r4, #8
  407e68:	4630      	mov	r0, r6
  407e6a:	f7ff fcab 	bl	4077c4 <_free_r>
  407e6e:	f8da 3000 	ldr.w	r3, [sl]
  407e72:	e6e6      	b.n	407c42 <_malloc_r+0x2da>
  407e74:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407e78:	d803      	bhi.n	407e82 <_malloc_r+0x51a>
  407e7a:	0bca      	lsrs	r2, r1, #15
  407e7c:	3277      	adds	r2, #119	; 0x77
  407e7e:	0050      	lsls	r0, r2, #1
  407e80:	e72b      	b.n	407cda <_malloc_r+0x372>
  407e82:	f240 5254 	movw	r2, #1364	; 0x554
  407e86:	4293      	cmp	r3, r2
  407e88:	d803      	bhi.n	407e92 <_malloc_r+0x52a>
  407e8a:	0c8a      	lsrs	r2, r1, #18
  407e8c:	327c      	adds	r2, #124	; 0x7c
  407e8e:	0050      	lsls	r0, r2, #1
  407e90:	e723      	b.n	407cda <_malloc_r+0x372>
  407e92:	20fc      	movs	r0, #252	; 0xfc
  407e94:	227e      	movs	r2, #126	; 0x7e
  407e96:	e720      	b.n	407cda <_malloc_r+0x372>
  407e98:	687b      	ldr	r3, [r7, #4]
  407e9a:	e78c      	b.n	407db6 <_malloc_r+0x44e>
  407e9c:	200008a4 	.word	0x200008a4

00407ea0 <memchr>:
  407ea0:	0783      	lsls	r3, r0, #30
  407ea2:	b470      	push	{r4, r5, r6}
  407ea4:	b2c9      	uxtb	r1, r1
  407ea6:	d03f      	beq.n	407f28 <memchr+0x88>
  407ea8:	1e54      	subs	r4, r2, #1
  407eaa:	b32a      	cbz	r2, 407ef8 <memchr+0x58>
  407eac:	7803      	ldrb	r3, [r0, #0]
  407eae:	428b      	cmp	r3, r1
  407eb0:	d023      	beq.n	407efa <memchr+0x5a>
  407eb2:	1c43      	adds	r3, r0, #1
  407eb4:	e004      	b.n	407ec0 <memchr+0x20>
  407eb6:	b1fc      	cbz	r4, 407ef8 <memchr+0x58>
  407eb8:	7804      	ldrb	r4, [r0, #0]
  407eba:	428c      	cmp	r4, r1
  407ebc:	d01d      	beq.n	407efa <memchr+0x5a>
  407ebe:	4614      	mov	r4, r2
  407ec0:	f013 0f03 	tst.w	r3, #3
  407ec4:	4618      	mov	r0, r3
  407ec6:	f104 32ff 	add.w	r2, r4, #4294967295
  407eca:	f103 0301 	add.w	r3, r3, #1
  407ece:	d1f2      	bne.n	407eb6 <memchr+0x16>
  407ed0:	2c03      	cmp	r4, #3
  407ed2:	d814      	bhi.n	407efe <memchr+0x5e>
  407ed4:	1e65      	subs	r5, r4, #1
  407ed6:	b34c      	cbz	r4, 407f2c <memchr+0x8c>
  407ed8:	7803      	ldrb	r3, [r0, #0]
  407eda:	428b      	cmp	r3, r1
  407edc:	d00d      	beq.n	407efa <memchr+0x5a>
  407ede:	1c42      	adds	r2, r0, #1
  407ee0:	2300      	movs	r3, #0
  407ee2:	e002      	b.n	407eea <memchr+0x4a>
  407ee4:	7804      	ldrb	r4, [r0, #0]
  407ee6:	428c      	cmp	r4, r1
  407ee8:	d007      	beq.n	407efa <memchr+0x5a>
  407eea:	42ab      	cmp	r3, r5
  407eec:	4610      	mov	r0, r2
  407eee:	f103 0301 	add.w	r3, r3, #1
  407ef2:	f102 0201 	add.w	r2, r2, #1
  407ef6:	d1f5      	bne.n	407ee4 <memchr+0x44>
  407ef8:	2000      	movs	r0, #0
  407efa:	bc70      	pop	{r4, r5, r6}
  407efc:	4770      	bx	lr
  407efe:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  407f02:	4603      	mov	r3, r0
  407f04:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  407f08:	4618      	mov	r0, r3
  407f0a:	3304      	adds	r3, #4
  407f0c:	6802      	ldr	r2, [r0, #0]
  407f0e:	4072      	eors	r2, r6
  407f10:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  407f14:	ea25 0202 	bic.w	r2, r5, r2
  407f18:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407f1c:	d1da      	bne.n	407ed4 <memchr+0x34>
  407f1e:	3c04      	subs	r4, #4
  407f20:	2c03      	cmp	r4, #3
  407f22:	4618      	mov	r0, r3
  407f24:	d8f0      	bhi.n	407f08 <memchr+0x68>
  407f26:	e7d5      	b.n	407ed4 <memchr+0x34>
  407f28:	4614      	mov	r4, r2
  407f2a:	e7d1      	b.n	407ed0 <memchr+0x30>
  407f2c:	4620      	mov	r0, r4
  407f2e:	e7e4      	b.n	407efa <memchr+0x5a>

00407f30 <memcpy>:
  407f30:	4684      	mov	ip, r0
  407f32:	ea41 0300 	orr.w	r3, r1, r0
  407f36:	f013 0303 	ands.w	r3, r3, #3
  407f3a:	d16d      	bne.n	408018 <memcpy+0xe8>
  407f3c:	3a40      	subs	r2, #64	; 0x40
  407f3e:	d341      	bcc.n	407fc4 <memcpy+0x94>
  407f40:	f851 3b04 	ldr.w	r3, [r1], #4
  407f44:	f840 3b04 	str.w	r3, [r0], #4
  407f48:	f851 3b04 	ldr.w	r3, [r1], #4
  407f4c:	f840 3b04 	str.w	r3, [r0], #4
  407f50:	f851 3b04 	ldr.w	r3, [r1], #4
  407f54:	f840 3b04 	str.w	r3, [r0], #4
  407f58:	f851 3b04 	ldr.w	r3, [r1], #4
  407f5c:	f840 3b04 	str.w	r3, [r0], #4
  407f60:	f851 3b04 	ldr.w	r3, [r1], #4
  407f64:	f840 3b04 	str.w	r3, [r0], #4
  407f68:	f851 3b04 	ldr.w	r3, [r1], #4
  407f6c:	f840 3b04 	str.w	r3, [r0], #4
  407f70:	f851 3b04 	ldr.w	r3, [r1], #4
  407f74:	f840 3b04 	str.w	r3, [r0], #4
  407f78:	f851 3b04 	ldr.w	r3, [r1], #4
  407f7c:	f840 3b04 	str.w	r3, [r0], #4
  407f80:	f851 3b04 	ldr.w	r3, [r1], #4
  407f84:	f840 3b04 	str.w	r3, [r0], #4
  407f88:	f851 3b04 	ldr.w	r3, [r1], #4
  407f8c:	f840 3b04 	str.w	r3, [r0], #4
  407f90:	f851 3b04 	ldr.w	r3, [r1], #4
  407f94:	f840 3b04 	str.w	r3, [r0], #4
  407f98:	f851 3b04 	ldr.w	r3, [r1], #4
  407f9c:	f840 3b04 	str.w	r3, [r0], #4
  407fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fa4:	f840 3b04 	str.w	r3, [r0], #4
  407fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fac:	f840 3b04 	str.w	r3, [r0], #4
  407fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fb4:	f840 3b04 	str.w	r3, [r0], #4
  407fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fbc:	f840 3b04 	str.w	r3, [r0], #4
  407fc0:	3a40      	subs	r2, #64	; 0x40
  407fc2:	d2bd      	bcs.n	407f40 <memcpy+0x10>
  407fc4:	3230      	adds	r2, #48	; 0x30
  407fc6:	d311      	bcc.n	407fec <memcpy+0xbc>
  407fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fcc:	f840 3b04 	str.w	r3, [r0], #4
  407fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fd4:	f840 3b04 	str.w	r3, [r0], #4
  407fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fdc:	f840 3b04 	str.w	r3, [r0], #4
  407fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fe4:	f840 3b04 	str.w	r3, [r0], #4
  407fe8:	3a10      	subs	r2, #16
  407fea:	d2ed      	bcs.n	407fc8 <memcpy+0x98>
  407fec:	320c      	adds	r2, #12
  407fee:	d305      	bcc.n	407ffc <memcpy+0xcc>
  407ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  407ff4:	f840 3b04 	str.w	r3, [r0], #4
  407ff8:	3a04      	subs	r2, #4
  407ffa:	d2f9      	bcs.n	407ff0 <memcpy+0xc0>
  407ffc:	3204      	adds	r2, #4
  407ffe:	d008      	beq.n	408012 <memcpy+0xe2>
  408000:	07d2      	lsls	r2, r2, #31
  408002:	bf1c      	itt	ne
  408004:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408008:	f800 3b01 	strbne.w	r3, [r0], #1
  40800c:	d301      	bcc.n	408012 <memcpy+0xe2>
  40800e:	880b      	ldrh	r3, [r1, #0]
  408010:	8003      	strh	r3, [r0, #0]
  408012:	4660      	mov	r0, ip
  408014:	4770      	bx	lr
  408016:	bf00      	nop
  408018:	2a08      	cmp	r2, #8
  40801a:	d313      	bcc.n	408044 <memcpy+0x114>
  40801c:	078b      	lsls	r3, r1, #30
  40801e:	d08d      	beq.n	407f3c <memcpy+0xc>
  408020:	f010 0303 	ands.w	r3, r0, #3
  408024:	d08a      	beq.n	407f3c <memcpy+0xc>
  408026:	f1c3 0304 	rsb	r3, r3, #4
  40802a:	1ad2      	subs	r2, r2, r3
  40802c:	07db      	lsls	r3, r3, #31
  40802e:	bf1c      	itt	ne
  408030:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408034:	f800 3b01 	strbne.w	r3, [r0], #1
  408038:	d380      	bcc.n	407f3c <memcpy+0xc>
  40803a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40803e:	f820 3b02 	strh.w	r3, [r0], #2
  408042:	e77b      	b.n	407f3c <memcpy+0xc>
  408044:	3a04      	subs	r2, #4
  408046:	d3d9      	bcc.n	407ffc <memcpy+0xcc>
  408048:	3a01      	subs	r2, #1
  40804a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40804e:	f800 3b01 	strb.w	r3, [r0], #1
  408052:	d2f9      	bcs.n	408048 <memcpy+0x118>
  408054:	780b      	ldrb	r3, [r1, #0]
  408056:	7003      	strb	r3, [r0, #0]
  408058:	784b      	ldrb	r3, [r1, #1]
  40805a:	7043      	strb	r3, [r0, #1]
  40805c:	788b      	ldrb	r3, [r1, #2]
  40805e:	7083      	strb	r3, [r0, #2]
  408060:	4660      	mov	r0, ip
  408062:	4770      	bx	lr

00408064 <memmove>:
  408064:	4288      	cmp	r0, r1
  408066:	b4f0      	push	{r4, r5, r6, r7}
  408068:	d910      	bls.n	40808c <memmove+0x28>
  40806a:	188c      	adds	r4, r1, r2
  40806c:	42a0      	cmp	r0, r4
  40806e:	d20d      	bcs.n	40808c <memmove+0x28>
  408070:	1885      	adds	r5, r0, r2
  408072:	1e53      	subs	r3, r2, #1
  408074:	b142      	cbz	r2, 408088 <memmove+0x24>
  408076:	4621      	mov	r1, r4
  408078:	462a      	mov	r2, r5
  40807a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  40807e:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408082:	3b01      	subs	r3, #1
  408084:	1c5c      	adds	r4, r3, #1
  408086:	d1f8      	bne.n	40807a <memmove+0x16>
  408088:	bcf0      	pop	{r4, r5, r6, r7}
  40808a:	4770      	bx	lr
  40808c:	2a0f      	cmp	r2, #15
  40808e:	d93f      	bls.n	408110 <memmove+0xac>
  408090:	ea40 0301 	orr.w	r3, r0, r1
  408094:	079b      	lsls	r3, r3, #30
  408096:	d13f      	bne.n	408118 <memmove+0xb4>
  408098:	f1a2 0710 	sub.w	r7, r2, #16
  40809c:	093f      	lsrs	r7, r7, #4
  40809e:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  4080a2:	3610      	adds	r6, #16
  4080a4:	460c      	mov	r4, r1
  4080a6:	4603      	mov	r3, r0
  4080a8:	6825      	ldr	r5, [r4, #0]
  4080aa:	601d      	str	r5, [r3, #0]
  4080ac:	6865      	ldr	r5, [r4, #4]
  4080ae:	605d      	str	r5, [r3, #4]
  4080b0:	68a5      	ldr	r5, [r4, #8]
  4080b2:	609d      	str	r5, [r3, #8]
  4080b4:	68e5      	ldr	r5, [r4, #12]
  4080b6:	60dd      	str	r5, [r3, #12]
  4080b8:	3310      	adds	r3, #16
  4080ba:	42b3      	cmp	r3, r6
  4080bc:	f104 0410 	add.w	r4, r4, #16
  4080c0:	d1f2      	bne.n	4080a8 <memmove+0x44>
  4080c2:	1c7b      	adds	r3, r7, #1
  4080c4:	f002 0c0f 	and.w	ip, r2, #15
  4080c8:	011b      	lsls	r3, r3, #4
  4080ca:	f1bc 0f03 	cmp.w	ip, #3
  4080ce:	4419      	add	r1, r3
  4080d0:	4403      	add	r3, r0
  4080d2:	d923      	bls.n	40811c <memmove+0xb8>
  4080d4:	460e      	mov	r6, r1
  4080d6:	461d      	mov	r5, r3
  4080d8:	4664      	mov	r4, ip
  4080da:	3c04      	subs	r4, #4
  4080dc:	f856 7b04 	ldr.w	r7, [r6], #4
  4080e0:	f845 7b04 	str.w	r7, [r5], #4
  4080e4:	2c03      	cmp	r4, #3
  4080e6:	d8f8      	bhi.n	4080da <memmove+0x76>
  4080e8:	f1ac 0404 	sub.w	r4, ip, #4
  4080ec:	f024 0403 	bic.w	r4, r4, #3
  4080f0:	3404      	adds	r4, #4
  4080f2:	f002 0203 	and.w	r2, r2, #3
  4080f6:	4423      	add	r3, r4
  4080f8:	4421      	add	r1, r4
  4080fa:	2a00      	cmp	r2, #0
  4080fc:	d0c4      	beq.n	408088 <memmove+0x24>
  4080fe:	441a      	add	r2, r3
  408100:	f811 4b01 	ldrb.w	r4, [r1], #1
  408104:	f803 4b01 	strb.w	r4, [r3], #1
  408108:	4293      	cmp	r3, r2
  40810a:	d1f9      	bne.n	408100 <memmove+0x9c>
  40810c:	bcf0      	pop	{r4, r5, r6, r7}
  40810e:	4770      	bx	lr
  408110:	4603      	mov	r3, r0
  408112:	2a00      	cmp	r2, #0
  408114:	d1f3      	bne.n	4080fe <memmove+0x9a>
  408116:	e7b7      	b.n	408088 <memmove+0x24>
  408118:	4603      	mov	r3, r0
  40811a:	e7f0      	b.n	4080fe <memmove+0x9a>
  40811c:	4662      	mov	r2, ip
  40811e:	2a00      	cmp	r2, #0
  408120:	d1ed      	bne.n	4080fe <memmove+0x9a>
  408122:	e7b1      	b.n	408088 <memmove+0x24>

00408124 <__malloc_lock>:
  408124:	4770      	bx	lr
  408126:	bf00      	nop

00408128 <__malloc_unlock>:
  408128:	4770      	bx	lr
  40812a:	bf00      	nop

0040812c <_Balloc>:
  40812c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40812e:	b570      	push	{r4, r5, r6, lr}
  408130:	4605      	mov	r5, r0
  408132:	460c      	mov	r4, r1
  408134:	b14a      	cbz	r2, 40814a <_Balloc+0x1e>
  408136:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40813a:	b180      	cbz	r0, 40815e <_Balloc+0x32>
  40813c:	6801      	ldr	r1, [r0, #0]
  40813e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  408142:	2200      	movs	r2, #0
  408144:	6102      	str	r2, [r0, #16]
  408146:	60c2      	str	r2, [r0, #12]
  408148:	bd70      	pop	{r4, r5, r6, pc}
  40814a:	2221      	movs	r2, #33	; 0x21
  40814c:	2104      	movs	r1, #4
  40814e:	f000 fdeb 	bl	408d28 <_calloc_r>
  408152:	64e8      	str	r0, [r5, #76]	; 0x4c
  408154:	4602      	mov	r2, r0
  408156:	2800      	cmp	r0, #0
  408158:	d1ed      	bne.n	408136 <_Balloc+0xa>
  40815a:	2000      	movs	r0, #0
  40815c:	bd70      	pop	{r4, r5, r6, pc}
  40815e:	2101      	movs	r1, #1
  408160:	fa01 f604 	lsl.w	r6, r1, r4
  408164:	1d72      	adds	r2, r6, #5
  408166:	4628      	mov	r0, r5
  408168:	0092      	lsls	r2, r2, #2
  40816a:	f000 fddd 	bl	408d28 <_calloc_r>
  40816e:	2800      	cmp	r0, #0
  408170:	d0f3      	beq.n	40815a <_Balloc+0x2e>
  408172:	6044      	str	r4, [r0, #4]
  408174:	6086      	str	r6, [r0, #8]
  408176:	e7e4      	b.n	408142 <_Balloc+0x16>

00408178 <_Bfree>:
  408178:	b131      	cbz	r1, 408188 <_Bfree+0x10>
  40817a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40817c:	684a      	ldr	r2, [r1, #4]
  40817e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  408182:	6008      	str	r0, [r1, #0]
  408184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408188:	4770      	bx	lr
  40818a:	bf00      	nop

0040818c <__multadd>:
  40818c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408190:	f8d1 8010 	ldr.w	r8, [r1, #16]
  408194:	b082      	sub	sp, #8
  408196:	4689      	mov	r9, r1
  408198:	4682      	mov	sl, r0
  40819a:	f101 0514 	add.w	r5, r1, #20
  40819e:	2400      	movs	r4, #0
  4081a0:	682f      	ldr	r7, [r5, #0]
  4081a2:	b2be      	uxth	r6, r7
  4081a4:	0c3f      	lsrs	r7, r7, #16
  4081a6:	fb02 3606 	mla	r6, r2, r6, r3
  4081aa:	fb02 f307 	mul.w	r3, r2, r7
  4081ae:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  4081b2:	3401      	adds	r4, #1
  4081b4:	b2b6      	uxth	r6, r6
  4081b6:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  4081ba:	45a0      	cmp	r8, r4
  4081bc:	f845 6b04 	str.w	r6, [r5], #4
  4081c0:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4081c4:	dcec      	bgt.n	4081a0 <__multadd+0x14>
  4081c6:	b153      	cbz	r3, 4081de <__multadd+0x52>
  4081c8:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4081cc:	4590      	cmp	r8, r2
  4081ce:	da0a      	bge.n	4081e6 <__multadd+0x5a>
  4081d0:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  4081d4:	f108 0201 	add.w	r2, r8, #1
  4081d8:	614b      	str	r3, [r1, #20]
  4081da:	f8c9 2010 	str.w	r2, [r9, #16]
  4081de:	4648      	mov	r0, r9
  4081e0:	b002      	add	sp, #8
  4081e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4081e6:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4081ea:	9301      	str	r3, [sp, #4]
  4081ec:	3101      	adds	r1, #1
  4081ee:	4650      	mov	r0, sl
  4081f0:	f7ff ff9c 	bl	40812c <_Balloc>
  4081f4:	f8d9 2010 	ldr.w	r2, [r9, #16]
  4081f8:	3202      	adds	r2, #2
  4081fa:	f109 010c 	add.w	r1, r9, #12
  4081fe:	4604      	mov	r4, r0
  408200:	0092      	lsls	r2, r2, #2
  408202:	300c      	adds	r0, #12
  408204:	f7ff fe94 	bl	407f30 <memcpy>
  408208:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  40820c:	f8d9 1004 	ldr.w	r1, [r9, #4]
  408210:	9b01      	ldr	r3, [sp, #4]
  408212:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  408216:	f8c9 0000 	str.w	r0, [r9]
  40821a:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  40821e:	46a1      	mov	r9, r4
  408220:	e7d6      	b.n	4081d0 <__multadd+0x44>
  408222:	bf00      	nop

00408224 <__hi0bits>:
  408224:	0c03      	lsrs	r3, r0, #16
  408226:	041b      	lsls	r3, r3, #16
  408228:	b9b3      	cbnz	r3, 408258 <__hi0bits+0x34>
  40822a:	0400      	lsls	r0, r0, #16
  40822c:	2310      	movs	r3, #16
  40822e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  408232:	bf04      	itt	eq
  408234:	0200      	lsleq	r0, r0, #8
  408236:	3308      	addeq	r3, #8
  408238:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40823c:	bf04      	itt	eq
  40823e:	0100      	lsleq	r0, r0, #4
  408240:	3304      	addeq	r3, #4
  408242:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  408246:	bf04      	itt	eq
  408248:	0080      	lsleq	r0, r0, #2
  40824a:	3302      	addeq	r3, #2
  40824c:	2800      	cmp	r0, #0
  40824e:	db07      	blt.n	408260 <__hi0bits+0x3c>
  408250:	0042      	lsls	r2, r0, #1
  408252:	d403      	bmi.n	40825c <__hi0bits+0x38>
  408254:	2020      	movs	r0, #32
  408256:	4770      	bx	lr
  408258:	2300      	movs	r3, #0
  40825a:	e7e8      	b.n	40822e <__hi0bits+0xa>
  40825c:	1c58      	adds	r0, r3, #1
  40825e:	4770      	bx	lr
  408260:	4618      	mov	r0, r3
  408262:	4770      	bx	lr

00408264 <__lo0bits>:
  408264:	6803      	ldr	r3, [r0, #0]
  408266:	f013 0207 	ands.w	r2, r3, #7
  40826a:	d007      	beq.n	40827c <__lo0bits+0x18>
  40826c:	07d9      	lsls	r1, r3, #31
  40826e:	d420      	bmi.n	4082b2 <__lo0bits+0x4e>
  408270:	079a      	lsls	r2, r3, #30
  408272:	d420      	bmi.n	4082b6 <__lo0bits+0x52>
  408274:	089b      	lsrs	r3, r3, #2
  408276:	6003      	str	r3, [r0, #0]
  408278:	2002      	movs	r0, #2
  40827a:	4770      	bx	lr
  40827c:	b299      	uxth	r1, r3
  40827e:	b909      	cbnz	r1, 408284 <__lo0bits+0x20>
  408280:	0c1b      	lsrs	r3, r3, #16
  408282:	2210      	movs	r2, #16
  408284:	f013 0fff 	tst.w	r3, #255	; 0xff
  408288:	bf04      	itt	eq
  40828a:	0a1b      	lsreq	r3, r3, #8
  40828c:	3208      	addeq	r2, #8
  40828e:	0719      	lsls	r1, r3, #28
  408290:	bf04      	itt	eq
  408292:	091b      	lsreq	r3, r3, #4
  408294:	3204      	addeq	r2, #4
  408296:	0799      	lsls	r1, r3, #30
  408298:	bf04      	itt	eq
  40829a:	089b      	lsreq	r3, r3, #2
  40829c:	3202      	addeq	r2, #2
  40829e:	07d9      	lsls	r1, r3, #31
  4082a0:	d404      	bmi.n	4082ac <__lo0bits+0x48>
  4082a2:	085b      	lsrs	r3, r3, #1
  4082a4:	d101      	bne.n	4082aa <__lo0bits+0x46>
  4082a6:	2020      	movs	r0, #32
  4082a8:	4770      	bx	lr
  4082aa:	3201      	adds	r2, #1
  4082ac:	6003      	str	r3, [r0, #0]
  4082ae:	4610      	mov	r0, r2
  4082b0:	4770      	bx	lr
  4082b2:	2000      	movs	r0, #0
  4082b4:	4770      	bx	lr
  4082b6:	085b      	lsrs	r3, r3, #1
  4082b8:	6003      	str	r3, [r0, #0]
  4082ba:	2001      	movs	r0, #1
  4082bc:	4770      	bx	lr
  4082be:	bf00      	nop

004082c0 <__i2b>:
  4082c0:	b510      	push	{r4, lr}
  4082c2:	460c      	mov	r4, r1
  4082c4:	2101      	movs	r1, #1
  4082c6:	f7ff ff31 	bl	40812c <_Balloc>
  4082ca:	2201      	movs	r2, #1
  4082cc:	6144      	str	r4, [r0, #20]
  4082ce:	6102      	str	r2, [r0, #16]
  4082d0:	bd10      	pop	{r4, pc}
  4082d2:	bf00      	nop

004082d4 <__multiply>:
  4082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4082d8:	690d      	ldr	r5, [r1, #16]
  4082da:	f8d2 9010 	ldr.w	r9, [r2, #16]
  4082de:	454d      	cmp	r5, r9
  4082e0:	b085      	sub	sp, #20
  4082e2:	460c      	mov	r4, r1
  4082e4:	4692      	mov	sl, r2
  4082e6:	da04      	bge.n	4082f2 <__multiply+0x1e>
  4082e8:	462a      	mov	r2, r5
  4082ea:	4654      	mov	r4, sl
  4082ec:	464d      	mov	r5, r9
  4082ee:	468a      	mov	sl, r1
  4082f0:	4691      	mov	r9, r2
  4082f2:	68a3      	ldr	r3, [r4, #8]
  4082f4:	6861      	ldr	r1, [r4, #4]
  4082f6:	eb05 0709 	add.w	r7, r5, r9
  4082fa:	429f      	cmp	r7, r3
  4082fc:	bfc8      	it	gt
  4082fe:	3101      	addgt	r1, #1
  408300:	f7ff ff14 	bl	40812c <_Balloc>
  408304:	f100 0614 	add.w	r6, r0, #20
  408308:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  40830c:	4546      	cmp	r6, r8
  40830e:	9001      	str	r0, [sp, #4]
  408310:	d205      	bcs.n	40831e <__multiply+0x4a>
  408312:	4633      	mov	r3, r6
  408314:	2000      	movs	r0, #0
  408316:	f843 0b04 	str.w	r0, [r3], #4
  40831a:	4598      	cmp	r8, r3
  40831c:	d8fb      	bhi.n	408316 <__multiply+0x42>
  40831e:	f10a 0c14 	add.w	ip, sl, #20
  408322:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  408326:	3414      	adds	r4, #20
  408328:	45cc      	cmp	ip, r9
  40832a:	9400      	str	r4, [sp, #0]
  40832c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  408330:	d25b      	bcs.n	4083ea <__multiply+0x116>
  408332:	f8cd 8008 	str.w	r8, [sp, #8]
  408336:	9703      	str	r7, [sp, #12]
  408338:	46c8      	mov	r8, r9
  40833a:	f85c 3b04 	ldr.w	r3, [ip], #4
  40833e:	b29c      	uxth	r4, r3
  408340:	b324      	cbz	r4, 40838c <__multiply+0xb8>
  408342:	9a00      	ldr	r2, [sp, #0]
  408344:	4633      	mov	r3, r6
  408346:	f04f 0900 	mov.w	r9, #0
  40834a:	e000      	b.n	40834e <__multiply+0x7a>
  40834c:	460b      	mov	r3, r1
  40834e:	f852 7b04 	ldr.w	r7, [r2], #4
  408352:	6819      	ldr	r1, [r3, #0]
  408354:	fa1f fb87 	uxth.w	fp, r7
  408358:	fa1f fa81 	uxth.w	sl, r1
  40835c:	0c38      	lsrs	r0, r7, #16
  40835e:	0c09      	lsrs	r1, r1, #16
  408360:	fb04 a70b 	mla	r7, r4, fp, sl
  408364:	44b9      	add	r9, r7
  408366:	fb04 1000 	mla	r0, r4, r0, r1
  40836a:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  40836e:	4619      	mov	r1, r3
  408370:	fa1f f989 	uxth.w	r9, r9
  408374:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  408378:	4295      	cmp	r5, r2
  40837a:	ea4f 4910 	mov.w	r9, r0, lsr #16
  40837e:	f841 7b04 	str.w	r7, [r1], #4
  408382:	d8e3      	bhi.n	40834c <__multiply+0x78>
  408384:	f8c3 9004 	str.w	r9, [r3, #4]
  408388:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  40838c:	ea5f 4913 	movs.w	r9, r3, lsr #16
  408390:	d024      	beq.n	4083dc <__multiply+0x108>
  408392:	f8d6 a000 	ldr.w	sl, [r6]
  408396:	9b00      	ldr	r3, [sp, #0]
  408398:	4650      	mov	r0, sl
  40839a:	4631      	mov	r1, r6
  40839c:	f04f 0b00 	mov.w	fp, #0
  4083a0:	e000      	b.n	4083a4 <__multiply+0xd0>
  4083a2:	4611      	mov	r1, r2
  4083a4:	881a      	ldrh	r2, [r3, #0]
  4083a6:	0c00      	lsrs	r0, r0, #16
  4083a8:	fb09 0002 	mla	r0, r9, r2, r0
  4083ac:	4483      	add	fp, r0
  4083ae:	fa1f fa8a 	uxth.w	sl, sl
  4083b2:	460a      	mov	r2, r1
  4083b4:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  4083b8:	f842 0b04 	str.w	r0, [r2], #4
  4083bc:	f853 7b04 	ldr.w	r7, [r3], #4
  4083c0:	6848      	ldr	r0, [r1, #4]
  4083c2:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4083c6:	b284      	uxth	r4, r0
  4083c8:	fb09 4a0a 	mla	sl, r9, sl, r4
  4083cc:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  4083d0:	429d      	cmp	r5, r3
  4083d2:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  4083d6:	d8e4      	bhi.n	4083a2 <__multiply+0xce>
  4083d8:	f8c1 a004 	str.w	sl, [r1, #4]
  4083dc:	45e0      	cmp	r8, ip
  4083de:	f106 0604 	add.w	r6, r6, #4
  4083e2:	d8aa      	bhi.n	40833a <__multiply+0x66>
  4083e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4083e8:	9f03      	ldr	r7, [sp, #12]
  4083ea:	2f00      	cmp	r7, #0
  4083ec:	dd0a      	ble.n	408404 <__multiply+0x130>
  4083ee:	f858 3c04 	ldr.w	r3, [r8, #-4]
  4083f2:	f1a8 0804 	sub.w	r8, r8, #4
  4083f6:	b11b      	cbz	r3, 408400 <__multiply+0x12c>
  4083f8:	e004      	b.n	408404 <__multiply+0x130>
  4083fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4083fe:	b90b      	cbnz	r3, 408404 <__multiply+0x130>
  408400:	3f01      	subs	r7, #1
  408402:	d1fa      	bne.n	4083fa <__multiply+0x126>
  408404:	9b01      	ldr	r3, [sp, #4]
  408406:	4618      	mov	r0, r3
  408408:	611f      	str	r7, [r3, #16]
  40840a:	b005      	add	sp, #20
  40840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408410 <__pow5mult>:
  408410:	f012 0303 	ands.w	r3, r2, #3
  408414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408418:	4614      	mov	r4, r2
  40841a:	4607      	mov	r7, r0
  40841c:	460e      	mov	r6, r1
  40841e:	d12c      	bne.n	40847a <__pow5mult+0x6a>
  408420:	10a4      	asrs	r4, r4, #2
  408422:	d01c      	beq.n	40845e <__pow5mult+0x4e>
  408424:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  408426:	2d00      	cmp	r5, #0
  408428:	d030      	beq.n	40848c <__pow5mult+0x7c>
  40842a:	f04f 0800 	mov.w	r8, #0
  40842e:	e004      	b.n	40843a <__pow5mult+0x2a>
  408430:	1064      	asrs	r4, r4, #1
  408432:	d014      	beq.n	40845e <__pow5mult+0x4e>
  408434:	6828      	ldr	r0, [r5, #0]
  408436:	b1a8      	cbz	r0, 408464 <__pow5mult+0x54>
  408438:	4605      	mov	r5, r0
  40843a:	07e3      	lsls	r3, r4, #31
  40843c:	d5f8      	bpl.n	408430 <__pow5mult+0x20>
  40843e:	4638      	mov	r0, r7
  408440:	4631      	mov	r1, r6
  408442:	462a      	mov	r2, r5
  408444:	f7ff ff46 	bl	4082d4 <__multiply>
  408448:	b1ae      	cbz	r6, 408476 <__pow5mult+0x66>
  40844a:	6872      	ldr	r2, [r6, #4]
  40844c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40844e:	1064      	asrs	r4, r4, #1
  408450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408454:	6031      	str	r1, [r6, #0]
  408456:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40845a:	4606      	mov	r6, r0
  40845c:	d1ea      	bne.n	408434 <__pow5mult+0x24>
  40845e:	4630      	mov	r0, r6
  408460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408464:	4638      	mov	r0, r7
  408466:	4629      	mov	r1, r5
  408468:	462a      	mov	r2, r5
  40846a:	f7ff ff33 	bl	4082d4 <__multiply>
  40846e:	6028      	str	r0, [r5, #0]
  408470:	f8c0 8000 	str.w	r8, [r0]
  408474:	e7e0      	b.n	408438 <__pow5mult+0x28>
  408476:	4606      	mov	r6, r0
  408478:	e7da      	b.n	408430 <__pow5mult+0x20>
  40847a:	1e5d      	subs	r5, r3, #1
  40847c:	4a0a      	ldr	r2, [pc, #40]	; (4084a8 <__pow5mult+0x98>)
  40847e:	2300      	movs	r3, #0
  408480:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  408484:	f7ff fe82 	bl	40818c <__multadd>
  408488:	4606      	mov	r6, r0
  40848a:	e7c9      	b.n	408420 <__pow5mult+0x10>
  40848c:	2101      	movs	r1, #1
  40848e:	4638      	mov	r0, r7
  408490:	f7ff fe4c 	bl	40812c <_Balloc>
  408494:	f240 2171 	movw	r1, #625	; 0x271
  408498:	2201      	movs	r2, #1
  40849a:	2300      	movs	r3, #0
  40849c:	6141      	str	r1, [r0, #20]
  40849e:	6102      	str	r2, [r0, #16]
  4084a0:	4605      	mov	r5, r0
  4084a2:	64b8      	str	r0, [r7, #72]	; 0x48
  4084a4:	6003      	str	r3, [r0, #0]
  4084a6:	e7c0      	b.n	40842a <__pow5mult+0x1a>
  4084a8:	00409d38 	.word	0x00409d38

004084ac <__lshift>:
  4084ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4084b0:	4693      	mov	fp, r2
  4084b2:	690a      	ldr	r2, [r1, #16]
  4084b4:	688b      	ldr	r3, [r1, #8]
  4084b6:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  4084ba:	eb0a 0902 	add.w	r9, sl, r2
  4084be:	f109 0601 	add.w	r6, r9, #1
  4084c2:	429e      	cmp	r6, r3
  4084c4:	460f      	mov	r7, r1
  4084c6:	4680      	mov	r8, r0
  4084c8:	6849      	ldr	r1, [r1, #4]
  4084ca:	dd04      	ble.n	4084d6 <__lshift+0x2a>
  4084cc:	005b      	lsls	r3, r3, #1
  4084ce:	429e      	cmp	r6, r3
  4084d0:	f101 0101 	add.w	r1, r1, #1
  4084d4:	dcfa      	bgt.n	4084cc <__lshift+0x20>
  4084d6:	4640      	mov	r0, r8
  4084d8:	f7ff fe28 	bl	40812c <_Balloc>
  4084dc:	f1ba 0f00 	cmp.w	sl, #0
  4084e0:	f100 0414 	add.w	r4, r0, #20
  4084e4:	dd09      	ble.n	4084fa <__lshift+0x4e>
  4084e6:	2300      	movs	r3, #0
  4084e8:	461a      	mov	r2, r3
  4084ea:	4625      	mov	r5, r4
  4084ec:	3301      	adds	r3, #1
  4084ee:	4553      	cmp	r3, sl
  4084f0:	f845 2b04 	str.w	r2, [r5], #4
  4084f4:	d1fa      	bne.n	4084ec <__lshift+0x40>
  4084f6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  4084fa:	693a      	ldr	r2, [r7, #16]
  4084fc:	f107 0314 	add.w	r3, r7, #20
  408500:	f01b 0b1f 	ands.w	fp, fp, #31
  408504:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  408508:	d021      	beq.n	40854e <__lshift+0xa2>
  40850a:	f1cb 0a20 	rsb	sl, fp, #32
  40850e:	2200      	movs	r2, #0
  408510:	e000      	b.n	408514 <__lshift+0x68>
  408512:	462c      	mov	r4, r5
  408514:	6819      	ldr	r1, [r3, #0]
  408516:	4625      	mov	r5, r4
  408518:	fa01 f10b 	lsl.w	r1, r1, fp
  40851c:	430a      	orrs	r2, r1
  40851e:	f845 2b04 	str.w	r2, [r5], #4
  408522:	f853 2b04 	ldr.w	r2, [r3], #4
  408526:	4563      	cmp	r3, ip
  408528:	fa22 f20a 	lsr.w	r2, r2, sl
  40852c:	d3f1      	bcc.n	408512 <__lshift+0x66>
  40852e:	6062      	str	r2, [r4, #4]
  408530:	b10a      	cbz	r2, 408536 <__lshift+0x8a>
  408532:	f109 0602 	add.w	r6, r9, #2
  408536:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40853a:	687a      	ldr	r2, [r7, #4]
  40853c:	3e01      	subs	r6, #1
  40853e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408542:	6106      	str	r6, [r0, #16]
  408544:	6039      	str	r1, [r7, #0]
  408546:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40854a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40854e:	f853 2b04 	ldr.w	r2, [r3], #4
  408552:	f844 2b04 	str.w	r2, [r4], #4
  408556:	459c      	cmp	ip, r3
  408558:	d9ed      	bls.n	408536 <__lshift+0x8a>
  40855a:	f853 2b04 	ldr.w	r2, [r3], #4
  40855e:	f844 2b04 	str.w	r2, [r4], #4
  408562:	459c      	cmp	ip, r3
  408564:	d8f3      	bhi.n	40854e <__lshift+0xa2>
  408566:	e7e6      	b.n	408536 <__lshift+0x8a>

00408568 <__mcmp>:
  408568:	6902      	ldr	r2, [r0, #16]
  40856a:	690b      	ldr	r3, [r1, #16]
  40856c:	1ad2      	subs	r2, r2, r3
  40856e:	b410      	push	{r4}
  408570:	d115      	bne.n	40859e <__mcmp+0x36>
  408572:	009b      	lsls	r3, r3, #2
  408574:	3014      	adds	r0, #20
  408576:	3114      	adds	r1, #20
  408578:	4419      	add	r1, r3
  40857a:	4403      	add	r3, r0
  40857c:	e001      	b.n	408582 <__mcmp+0x1a>
  40857e:	4298      	cmp	r0, r3
  408580:	d211      	bcs.n	4085a6 <__mcmp+0x3e>
  408582:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408586:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40858a:	42a2      	cmp	r2, r4
  40858c:	d0f7      	beq.n	40857e <__mcmp+0x16>
  40858e:	4294      	cmp	r4, r2
  408590:	bf94      	ite	ls
  408592:	2001      	movls	r0, #1
  408594:	f04f 30ff 	movhi.w	r0, #4294967295
  408598:	f85d 4b04 	ldr.w	r4, [sp], #4
  40859c:	4770      	bx	lr
  40859e:	4610      	mov	r0, r2
  4085a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4085a4:	4770      	bx	lr
  4085a6:	2000      	movs	r0, #0
  4085a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4085ac:	4770      	bx	lr
  4085ae:	bf00      	nop

004085b0 <__mdiff>:
  4085b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4085b4:	460d      	mov	r5, r1
  4085b6:	4604      	mov	r4, r0
  4085b8:	4611      	mov	r1, r2
  4085ba:	4628      	mov	r0, r5
  4085bc:	4616      	mov	r6, r2
  4085be:	f7ff ffd3 	bl	408568 <__mcmp>
  4085c2:	1e07      	subs	r7, r0, #0
  4085c4:	d055      	beq.n	408672 <__mdiff+0xc2>
  4085c6:	db4e      	blt.n	408666 <__mdiff+0xb6>
  4085c8:	f04f 0800 	mov.w	r8, #0
  4085cc:	6869      	ldr	r1, [r5, #4]
  4085ce:	4620      	mov	r0, r4
  4085d0:	f7ff fdac 	bl	40812c <_Balloc>
  4085d4:	692f      	ldr	r7, [r5, #16]
  4085d6:	6932      	ldr	r2, [r6, #16]
  4085d8:	f8c0 800c 	str.w	r8, [r0, #12]
  4085dc:	3514      	adds	r5, #20
  4085de:	3614      	adds	r6, #20
  4085e0:	f100 0314 	add.w	r3, r0, #20
  4085e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  4085e8:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  4085ec:	2100      	movs	r1, #0
  4085ee:	f856 2b04 	ldr.w	r2, [r6], #4
  4085f2:	f855 4b04 	ldr.w	r4, [r5], #4
  4085f6:	fa1f f982 	uxth.w	r9, r2
  4085fa:	fa11 fa84 	uxtah	sl, r1, r4
  4085fe:	0c11      	lsrs	r1, r2, #16
  408600:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  408604:	ebc9 020a 	rsb	r2, r9, sl
  408608:	eb01 4122 	add.w	r1, r1, r2, asr #16
  40860c:	b292      	uxth	r2, r2
  40860e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  408612:	45b0      	cmp	r8, r6
  408614:	f843 2b04 	str.w	r2, [r3], #4
  408618:	ea4f 4121 	mov.w	r1, r1, asr #16
  40861c:	462c      	mov	r4, r5
  40861e:	d8e6      	bhi.n	4085ee <__mdiff+0x3e>
  408620:	45ac      	cmp	ip, r5
  408622:	4698      	mov	r8, r3
  408624:	d915      	bls.n	408652 <__mdiff+0xa2>
  408626:	f854 6b04 	ldr.w	r6, [r4], #4
  40862a:	fa11 f186 	uxtah	r1, r1, r6
  40862e:	0c36      	lsrs	r6, r6, #16
  408630:	eb06 4621 	add.w	r6, r6, r1, asr #16
  408634:	b289      	uxth	r1, r1
  408636:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  40863a:	45a4      	cmp	ip, r4
  40863c:	f843 2b04 	str.w	r2, [r3], #4
  408640:	ea4f 4126 	mov.w	r1, r6, asr #16
  408644:	d8ef      	bhi.n	408626 <__mdiff+0x76>
  408646:	43eb      	mvns	r3, r5
  408648:	4463      	add	r3, ip
  40864a:	f023 0303 	bic.w	r3, r3, #3
  40864e:	3304      	adds	r3, #4
  408650:	4443      	add	r3, r8
  408652:	3b04      	subs	r3, #4
  408654:	b922      	cbnz	r2, 408660 <__mdiff+0xb0>
  408656:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40865a:	3f01      	subs	r7, #1
  40865c:	2a00      	cmp	r2, #0
  40865e:	d0fa      	beq.n	408656 <__mdiff+0xa6>
  408660:	6107      	str	r7, [r0, #16]
  408662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408666:	462b      	mov	r3, r5
  408668:	f04f 0801 	mov.w	r8, #1
  40866c:	4635      	mov	r5, r6
  40866e:	461e      	mov	r6, r3
  408670:	e7ac      	b.n	4085cc <__mdiff+0x1c>
  408672:	4620      	mov	r0, r4
  408674:	4639      	mov	r1, r7
  408676:	f7ff fd59 	bl	40812c <_Balloc>
  40867a:	2301      	movs	r3, #1
  40867c:	6147      	str	r7, [r0, #20]
  40867e:	6103      	str	r3, [r0, #16]
  408680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00408684 <__d2b>:
  408684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  408688:	b083      	sub	sp, #12
  40868a:	2101      	movs	r1, #1
  40868c:	461d      	mov	r5, r3
  40868e:	f3c3 560a 	ubfx	r6, r3, #20, #11
  408692:	4614      	mov	r4, r2
  408694:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408696:	f7ff fd49 	bl	40812c <_Balloc>
  40869a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  40869e:	4680      	mov	r8, r0
  4086a0:	b10e      	cbz	r6, 4086a6 <__d2b+0x22>
  4086a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4086a6:	9301      	str	r3, [sp, #4]
  4086a8:	b324      	cbz	r4, 4086f4 <__d2b+0x70>
  4086aa:	a802      	add	r0, sp, #8
  4086ac:	f840 4d08 	str.w	r4, [r0, #-8]!
  4086b0:	4668      	mov	r0, sp
  4086b2:	f7ff fdd7 	bl	408264 <__lo0bits>
  4086b6:	2800      	cmp	r0, #0
  4086b8:	d135      	bne.n	408726 <__d2b+0xa2>
  4086ba:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4086be:	f8c8 2014 	str.w	r2, [r8, #20]
  4086c2:	2b00      	cmp	r3, #0
  4086c4:	bf0c      	ite	eq
  4086c6:	2401      	moveq	r4, #1
  4086c8:	2402      	movne	r4, #2
  4086ca:	f8c8 3018 	str.w	r3, [r8, #24]
  4086ce:	f8c8 4010 	str.w	r4, [r8, #16]
  4086d2:	b9de      	cbnz	r6, 40870c <__d2b+0x88>
  4086d4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  4086d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4086dc:	6038      	str	r0, [r7, #0]
  4086de:	6918      	ldr	r0, [r3, #16]
  4086e0:	f7ff fda0 	bl	408224 <__hi0bits>
  4086e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4086e6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  4086ea:	6018      	str	r0, [r3, #0]
  4086ec:	4640      	mov	r0, r8
  4086ee:	b003      	add	sp, #12
  4086f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4086f4:	a801      	add	r0, sp, #4
  4086f6:	f7ff fdb5 	bl	408264 <__lo0bits>
  4086fa:	2401      	movs	r4, #1
  4086fc:	9b01      	ldr	r3, [sp, #4]
  4086fe:	f8c8 3014 	str.w	r3, [r8, #20]
  408702:	3020      	adds	r0, #32
  408704:	f8c8 4010 	str.w	r4, [r8, #16]
  408708:	2e00      	cmp	r6, #0
  40870a:	d0e3      	beq.n	4086d4 <__d2b+0x50>
  40870c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  408710:	eb09 0300 	add.w	r3, r9, r0
  408714:	603b      	str	r3, [r7, #0]
  408716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408718:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40871c:	6018      	str	r0, [r3, #0]
  40871e:	4640      	mov	r0, r8
  408720:	b003      	add	sp, #12
  408722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408726:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40872a:	f1c0 0120 	rsb	r1, r0, #32
  40872e:	fa03 f101 	lsl.w	r1, r3, r1
  408732:	430a      	orrs	r2, r1
  408734:	40c3      	lsrs	r3, r0
  408736:	9301      	str	r3, [sp, #4]
  408738:	f8c8 2014 	str.w	r2, [r8, #20]
  40873c:	e7c1      	b.n	4086c2 <__d2b+0x3e>
  40873e:	bf00      	nop

00408740 <_realloc_r>:
  408740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408744:	460c      	mov	r4, r1
  408746:	b083      	sub	sp, #12
  408748:	4690      	mov	r8, r2
  40874a:	4681      	mov	r9, r0
  40874c:	2900      	cmp	r1, #0
  40874e:	f000 80e2 	beq.w	408916 <_realloc_r+0x1d6>
  408752:	f7ff fce7 	bl	408124 <__malloc_lock>
  408756:	f108 060b 	add.w	r6, r8, #11
  40875a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40875e:	2e16      	cmp	r6, #22
  408760:	f023 0503 	bic.w	r5, r3, #3
  408764:	f1a4 0708 	sub.w	r7, r4, #8
  408768:	d84b      	bhi.n	408802 <_realloc_r+0xc2>
  40876a:	2110      	movs	r1, #16
  40876c:	460e      	mov	r6, r1
  40876e:	45b0      	cmp	r8, r6
  408770:	d84c      	bhi.n	40880c <_realloc_r+0xcc>
  408772:	428d      	cmp	r5, r1
  408774:	da78      	bge.n	408868 <_realloc_r+0x128>
  408776:	f8df b390 	ldr.w	fp, [pc, #912]	; 408b08 <_realloc_r+0x3c8>
  40877a:	f8db e008 	ldr.w	lr, [fp, #8]
  40877e:	1978      	adds	r0, r7, r5
  408780:	4586      	cmp	lr, r0
  408782:	f000 80ce 	beq.w	408922 <_realloc_r+0x1e2>
  408786:	6842      	ldr	r2, [r0, #4]
  408788:	f022 0c01 	bic.w	ip, r2, #1
  40878c:	4484      	add	ip, r0
  40878e:	f8dc c004 	ldr.w	ip, [ip, #4]
  408792:	f01c 0f01 	tst.w	ip, #1
  408796:	d07a      	beq.n	40888e <_realloc_r+0x14e>
  408798:	2200      	movs	r2, #0
  40879a:	4610      	mov	r0, r2
  40879c:	07db      	lsls	r3, r3, #31
  40879e:	f100 8092 	bmi.w	4088c6 <_realloc_r+0x186>
  4087a2:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4087a6:	ebc3 0a07 	rsb	sl, r3, r7
  4087aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4087ae:	f023 0303 	bic.w	r3, r3, #3
  4087b2:	442b      	add	r3, r5
  4087b4:	b388      	cbz	r0, 40881a <_realloc_r+0xda>
  4087b6:	4570      	cmp	r0, lr
  4087b8:	f000 80ed 	beq.w	408996 <_realloc_r+0x256>
  4087bc:	eb02 0e03 	add.w	lr, r2, r3
  4087c0:	458e      	cmp	lr, r1
  4087c2:	db2a      	blt.n	40881a <_realloc_r+0xda>
  4087c4:	68c3      	ldr	r3, [r0, #12]
  4087c6:	6882      	ldr	r2, [r0, #8]
  4087c8:	4657      	mov	r7, sl
  4087ca:	60d3      	str	r3, [r2, #12]
  4087cc:	609a      	str	r2, [r3, #8]
  4087ce:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4087d2:	f8da 300c 	ldr.w	r3, [sl, #12]
  4087d6:	60cb      	str	r3, [r1, #12]
  4087d8:	1f2a      	subs	r2, r5, #4
  4087da:	2a24      	cmp	r2, #36	; 0x24
  4087dc:	6099      	str	r1, [r3, #8]
  4087de:	f200 8126 	bhi.w	408a2e <_realloc_r+0x2ee>
  4087e2:	2a13      	cmp	r2, #19
  4087e4:	f240 80b3 	bls.w	40894e <_realloc_r+0x20e>
  4087e8:	6823      	ldr	r3, [r4, #0]
  4087ea:	f8ca 3008 	str.w	r3, [sl, #8]
  4087ee:	6863      	ldr	r3, [r4, #4]
  4087f0:	f8ca 300c 	str.w	r3, [sl, #12]
  4087f4:	2a1b      	cmp	r2, #27
  4087f6:	f200 8130 	bhi.w	408a5a <_realloc_r+0x31a>
  4087fa:	3408      	adds	r4, #8
  4087fc:	f10a 0310 	add.w	r3, sl, #16
  408800:	e0a6      	b.n	408950 <_realloc_r+0x210>
  408802:	f026 0607 	bic.w	r6, r6, #7
  408806:	2e00      	cmp	r6, #0
  408808:	4631      	mov	r1, r6
  40880a:	dab0      	bge.n	40876e <_realloc_r+0x2e>
  40880c:	230c      	movs	r3, #12
  40880e:	2000      	movs	r0, #0
  408810:	f8c9 3000 	str.w	r3, [r9]
  408814:	b003      	add	sp, #12
  408816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40881a:	428b      	cmp	r3, r1
  40881c:	db53      	blt.n	4088c6 <_realloc_r+0x186>
  40881e:	4657      	mov	r7, sl
  408820:	f8da 100c 	ldr.w	r1, [sl, #12]
  408824:	f857 0f08 	ldr.w	r0, [r7, #8]!
  408828:	1f2a      	subs	r2, r5, #4
  40882a:	2a24      	cmp	r2, #36	; 0x24
  40882c:	60c1      	str	r1, [r0, #12]
  40882e:	6088      	str	r0, [r1, #8]
  408830:	f200 8109 	bhi.w	408a46 <_realloc_r+0x306>
  408834:	2a13      	cmp	r2, #19
  408836:	f240 8104 	bls.w	408a42 <_realloc_r+0x302>
  40883a:	6821      	ldr	r1, [r4, #0]
  40883c:	f8ca 1008 	str.w	r1, [sl, #8]
  408840:	6861      	ldr	r1, [r4, #4]
  408842:	f8ca 100c 	str.w	r1, [sl, #12]
  408846:	2a1b      	cmp	r2, #27
  408848:	f200 811c 	bhi.w	408a84 <_realloc_r+0x344>
  40884c:	3408      	adds	r4, #8
  40884e:	f10a 0210 	add.w	r2, sl, #16
  408852:	6821      	ldr	r1, [r4, #0]
  408854:	6011      	str	r1, [r2, #0]
  408856:	6861      	ldr	r1, [r4, #4]
  408858:	6051      	str	r1, [r2, #4]
  40885a:	68a1      	ldr	r1, [r4, #8]
  40885c:	6091      	str	r1, [r2, #8]
  40885e:	461d      	mov	r5, r3
  408860:	f8da 3004 	ldr.w	r3, [sl, #4]
  408864:	463c      	mov	r4, r7
  408866:	4657      	mov	r7, sl
  408868:	1baa      	subs	r2, r5, r6
  40886a:	2a0f      	cmp	r2, #15
  40886c:	f003 0301 	and.w	r3, r3, #1
  408870:	d819      	bhi.n	4088a6 <_realloc_r+0x166>
  408872:	432b      	orrs	r3, r5
  408874:	443d      	add	r5, r7
  408876:	607b      	str	r3, [r7, #4]
  408878:	686b      	ldr	r3, [r5, #4]
  40887a:	f043 0301 	orr.w	r3, r3, #1
  40887e:	606b      	str	r3, [r5, #4]
  408880:	4648      	mov	r0, r9
  408882:	f7ff fc51 	bl	408128 <__malloc_unlock>
  408886:	4620      	mov	r0, r4
  408888:	b003      	add	sp, #12
  40888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40888e:	f022 0203 	bic.w	r2, r2, #3
  408892:	eb02 0c05 	add.w	ip, r2, r5
  408896:	458c      	cmp	ip, r1
  408898:	db80      	blt.n	40879c <_realloc_r+0x5c>
  40889a:	68c2      	ldr	r2, [r0, #12]
  40889c:	6881      	ldr	r1, [r0, #8]
  40889e:	4665      	mov	r5, ip
  4088a0:	60ca      	str	r2, [r1, #12]
  4088a2:	6091      	str	r1, [r2, #8]
  4088a4:	e7e0      	b.n	408868 <_realloc_r+0x128>
  4088a6:	19b9      	adds	r1, r7, r6
  4088a8:	f042 0001 	orr.w	r0, r2, #1
  4088ac:	431e      	orrs	r6, r3
  4088ae:	440a      	add	r2, r1
  4088b0:	607e      	str	r6, [r7, #4]
  4088b2:	6048      	str	r0, [r1, #4]
  4088b4:	6853      	ldr	r3, [r2, #4]
  4088b6:	f043 0301 	orr.w	r3, r3, #1
  4088ba:	3108      	adds	r1, #8
  4088bc:	6053      	str	r3, [r2, #4]
  4088be:	4648      	mov	r0, r9
  4088c0:	f7fe ff80 	bl	4077c4 <_free_r>
  4088c4:	e7dc      	b.n	408880 <_realloc_r+0x140>
  4088c6:	4641      	mov	r1, r8
  4088c8:	4648      	mov	r0, r9
  4088ca:	f7ff f84d 	bl	407968 <_malloc_r>
  4088ce:	4680      	mov	r8, r0
  4088d0:	b1d0      	cbz	r0, 408908 <_realloc_r+0x1c8>
  4088d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4088d6:	f023 0201 	bic.w	r2, r3, #1
  4088da:	443a      	add	r2, r7
  4088dc:	f1a0 0108 	sub.w	r1, r0, #8
  4088e0:	4291      	cmp	r1, r2
  4088e2:	f000 809e 	beq.w	408a22 <_realloc_r+0x2e2>
  4088e6:	1f2a      	subs	r2, r5, #4
  4088e8:	2a24      	cmp	r2, #36	; 0x24
  4088ea:	d850      	bhi.n	40898e <_realloc_r+0x24e>
  4088ec:	2a13      	cmp	r2, #19
  4088ee:	d823      	bhi.n	408938 <_realloc_r+0x1f8>
  4088f0:	4603      	mov	r3, r0
  4088f2:	4622      	mov	r2, r4
  4088f4:	6811      	ldr	r1, [r2, #0]
  4088f6:	6019      	str	r1, [r3, #0]
  4088f8:	6851      	ldr	r1, [r2, #4]
  4088fa:	6059      	str	r1, [r3, #4]
  4088fc:	6892      	ldr	r2, [r2, #8]
  4088fe:	609a      	str	r2, [r3, #8]
  408900:	4621      	mov	r1, r4
  408902:	4648      	mov	r0, r9
  408904:	f7fe ff5e 	bl	4077c4 <_free_r>
  408908:	4648      	mov	r0, r9
  40890a:	f7ff fc0d 	bl	408128 <__malloc_unlock>
  40890e:	4640      	mov	r0, r8
  408910:	b003      	add	sp, #12
  408912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408916:	4611      	mov	r1, r2
  408918:	b003      	add	sp, #12
  40891a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40891e:	f7ff b823 	b.w	407968 <_malloc_r>
  408922:	f8de 2004 	ldr.w	r2, [lr, #4]
  408926:	f022 0203 	bic.w	r2, r2, #3
  40892a:	1950      	adds	r0, r2, r5
  40892c:	f106 0c10 	add.w	ip, r6, #16
  408930:	4560      	cmp	r0, ip
  408932:	da19      	bge.n	408968 <_realloc_r+0x228>
  408934:	4670      	mov	r0, lr
  408936:	e731      	b.n	40879c <_realloc_r+0x5c>
  408938:	6823      	ldr	r3, [r4, #0]
  40893a:	6003      	str	r3, [r0, #0]
  40893c:	6863      	ldr	r3, [r4, #4]
  40893e:	6043      	str	r3, [r0, #4]
  408940:	2a1b      	cmp	r2, #27
  408942:	d863      	bhi.n	408a0c <_realloc_r+0x2cc>
  408944:	f100 0308 	add.w	r3, r0, #8
  408948:	f104 0208 	add.w	r2, r4, #8
  40894c:	e7d2      	b.n	4088f4 <_realloc_r+0x1b4>
  40894e:	463b      	mov	r3, r7
  408950:	6822      	ldr	r2, [r4, #0]
  408952:	601a      	str	r2, [r3, #0]
  408954:	6862      	ldr	r2, [r4, #4]
  408956:	605a      	str	r2, [r3, #4]
  408958:	68a2      	ldr	r2, [r4, #8]
  40895a:	609a      	str	r2, [r3, #8]
  40895c:	463c      	mov	r4, r7
  40895e:	4675      	mov	r5, lr
  408960:	f8da 3004 	ldr.w	r3, [sl, #4]
  408964:	4657      	mov	r7, sl
  408966:	e77f      	b.n	408868 <_realloc_r+0x128>
  408968:	4437      	add	r7, r6
  40896a:	1b83      	subs	r3, r0, r6
  40896c:	f043 0301 	orr.w	r3, r3, #1
  408970:	f8cb 7008 	str.w	r7, [fp, #8]
  408974:	607b      	str	r3, [r7, #4]
  408976:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40897a:	f003 0301 	and.w	r3, r3, #1
  40897e:	431e      	orrs	r6, r3
  408980:	4648      	mov	r0, r9
  408982:	f844 6c04 	str.w	r6, [r4, #-4]
  408986:	f7ff fbcf 	bl	408128 <__malloc_unlock>
  40898a:	4620      	mov	r0, r4
  40898c:	e77c      	b.n	408888 <_realloc_r+0x148>
  40898e:	4621      	mov	r1, r4
  408990:	f7ff fb68 	bl	408064 <memmove>
  408994:	e7b4      	b.n	408900 <_realloc_r+0x1c0>
  408996:	eb02 0c03 	add.w	ip, r2, r3
  40899a:	f106 0210 	add.w	r2, r6, #16
  40899e:	4594      	cmp	ip, r2
  4089a0:	f6ff af3b 	blt.w	40881a <_realloc_r+0xda>
  4089a4:	4657      	mov	r7, sl
  4089a6:	f8da 300c 	ldr.w	r3, [sl, #12]
  4089aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4089ae:	1f2a      	subs	r2, r5, #4
  4089b0:	2a24      	cmp	r2, #36	; 0x24
  4089b2:	60cb      	str	r3, [r1, #12]
  4089b4:	6099      	str	r1, [r3, #8]
  4089b6:	f200 8087 	bhi.w	408ac8 <_realloc_r+0x388>
  4089ba:	2a13      	cmp	r2, #19
  4089bc:	d978      	bls.n	408ab0 <_realloc_r+0x370>
  4089be:	6823      	ldr	r3, [r4, #0]
  4089c0:	f8ca 3008 	str.w	r3, [sl, #8]
  4089c4:	6863      	ldr	r3, [r4, #4]
  4089c6:	f8ca 300c 	str.w	r3, [sl, #12]
  4089ca:	2a1b      	cmp	r2, #27
  4089cc:	f200 8085 	bhi.w	408ada <_realloc_r+0x39a>
  4089d0:	3408      	adds	r4, #8
  4089d2:	f10a 0310 	add.w	r3, sl, #16
  4089d6:	6822      	ldr	r2, [r4, #0]
  4089d8:	601a      	str	r2, [r3, #0]
  4089da:	6862      	ldr	r2, [r4, #4]
  4089dc:	605a      	str	r2, [r3, #4]
  4089de:	68a2      	ldr	r2, [r4, #8]
  4089e0:	609a      	str	r2, [r3, #8]
  4089e2:	eb0a 0306 	add.w	r3, sl, r6
  4089e6:	ebc6 020c 	rsb	r2, r6, ip
  4089ea:	f042 0201 	orr.w	r2, r2, #1
  4089ee:	f8cb 3008 	str.w	r3, [fp, #8]
  4089f2:	605a      	str	r2, [r3, #4]
  4089f4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4089f8:	f003 0301 	and.w	r3, r3, #1
  4089fc:	431e      	orrs	r6, r3
  4089fe:	4648      	mov	r0, r9
  408a00:	f8ca 6004 	str.w	r6, [sl, #4]
  408a04:	f7ff fb90 	bl	408128 <__malloc_unlock>
  408a08:	4638      	mov	r0, r7
  408a0a:	e73d      	b.n	408888 <_realloc_r+0x148>
  408a0c:	68a3      	ldr	r3, [r4, #8]
  408a0e:	6083      	str	r3, [r0, #8]
  408a10:	68e3      	ldr	r3, [r4, #12]
  408a12:	60c3      	str	r3, [r0, #12]
  408a14:	2a24      	cmp	r2, #36	; 0x24
  408a16:	d02c      	beq.n	408a72 <_realloc_r+0x332>
  408a18:	f100 0310 	add.w	r3, r0, #16
  408a1c:	f104 0210 	add.w	r2, r4, #16
  408a20:	e768      	b.n	4088f4 <_realloc_r+0x1b4>
  408a22:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408a26:	f022 0203 	bic.w	r2, r2, #3
  408a2a:	4415      	add	r5, r2
  408a2c:	e71c      	b.n	408868 <_realloc_r+0x128>
  408a2e:	4621      	mov	r1, r4
  408a30:	4638      	mov	r0, r7
  408a32:	4675      	mov	r5, lr
  408a34:	463c      	mov	r4, r7
  408a36:	f7ff fb15 	bl	408064 <memmove>
  408a3a:	4657      	mov	r7, sl
  408a3c:	f8da 3004 	ldr.w	r3, [sl, #4]
  408a40:	e712      	b.n	408868 <_realloc_r+0x128>
  408a42:	463a      	mov	r2, r7
  408a44:	e705      	b.n	408852 <_realloc_r+0x112>
  408a46:	4621      	mov	r1, r4
  408a48:	4638      	mov	r0, r7
  408a4a:	461d      	mov	r5, r3
  408a4c:	463c      	mov	r4, r7
  408a4e:	f7ff fb09 	bl	408064 <memmove>
  408a52:	4657      	mov	r7, sl
  408a54:	f8da 3004 	ldr.w	r3, [sl, #4]
  408a58:	e706      	b.n	408868 <_realloc_r+0x128>
  408a5a:	68a3      	ldr	r3, [r4, #8]
  408a5c:	f8ca 3010 	str.w	r3, [sl, #16]
  408a60:	68e3      	ldr	r3, [r4, #12]
  408a62:	f8ca 3014 	str.w	r3, [sl, #20]
  408a66:	2a24      	cmp	r2, #36	; 0x24
  408a68:	d018      	beq.n	408a9c <_realloc_r+0x35c>
  408a6a:	3410      	adds	r4, #16
  408a6c:	f10a 0318 	add.w	r3, sl, #24
  408a70:	e76e      	b.n	408950 <_realloc_r+0x210>
  408a72:	6923      	ldr	r3, [r4, #16]
  408a74:	6103      	str	r3, [r0, #16]
  408a76:	6963      	ldr	r3, [r4, #20]
  408a78:	6143      	str	r3, [r0, #20]
  408a7a:	f104 0218 	add.w	r2, r4, #24
  408a7e:	f100 0318 	add.w	r3, r0, #24
  408a82:	e737      	b.n	4088f4 <_realloc_r+0x1b4>
  408a84:	68a1      	ldr	r1, [r4, #8]
  408a86:	f8ca 1010 	str.w	r1, [sl, #16]
  408a8a:	68e1      	ldr	r1, [r4, #12]
  408a8c:	f8ca 1014 	str.w	r1, [sl, #20]
  408a90:	2a24      	cmp	r2, #36	; 0x24
  408a92:	d00f      	beq.n	408ab4 <_realloc_r+0x374>
  408a94:	3410      	adds	r4, #16
  408a96:	f10a 0218 	add.w	r2, sl, #24
  408a9a:	e6da      	b.n	408852 <_realloc_r+0x112>
  408a9c:	6923      	ldr	r3, [r4, #16]
  408a9e:	f8ca 3018 	str.w	r3, [sl, #24]
  408aa2:	6963      	ldr	r3, [r4, #20]
  408aa4:	f8ca 301c 	str.w	r3, [sl, #28]
  408aa8:	3418      	adds	r4, #24
  408aaa:	f10a 0320 	add.w	r3, sl, #32
  408aae:	e74f      	b.n	408950 <_realloc_r+0x210>
  408ab0:	463b      	mov	r3, r7
  408ab2:	e790      	b.n	4089d6 <_realloc_r+0x296>
  408ab4:	6922      	ldr	r2, [r4, #16]
  408ab6:	f8ca 2018 	str.w	r2, [sl, #24]
  408aba:	6962      	ldr	r2, [r4, #20]
  408abc:	f8ca 201c 	str.w	r2, [sl, #28]
  408ac0:	3418      	adds	r4, #24
  408ac2:	f10a 0220 	add.w	r2, sl, #32
  408ac6:	e6c4      	b.n	408852 <_realloc_r+0x112>
  408ac8:	4621      	mov	r1, r4
  408aca:	4638      	mov	r0, r7
  408acc:	f8cd c004 	str.w	ip, [sp, #4]
  408ad0:	f7ff fac8 	bl	408064 <memmove>
  408ad4:	f8dd c004 	ldr.w	ip, [sp, #4]
  408ad8:	e783      	b.n	4089e2 <_realloc_r+0x2a2>
  408ada:	68a3      	ldr	r3, [r4, #8]
  408adc:	f8ca 3010 	str.w	r3, [sl, #16]
  408ae0:	68e3      	ldr	r3, [r4, #12]
  408ae2:	f8ca 3014 	str.w	r3, [sl, #20]
  408ae6:	2a24      	cmp	r2, #36	; 0x24
  408ae8:	d003      	beq.n	408af2 <_realloc_r+0x3b2>
  408aea:	3410      	adds	r4, #16
  408aec:	f10a 0318 	add.w	r3, sl, #24
  408af0:	e771      	b.n	4089d6 <_realloc_r+0x296>
  408af2:	6923      	ldr	r3, [r4, #16]
  408af4:	f8ca 3018 	str.w	r3, [sl, #24]
  408af8:	6963      	ldr	r3, [r4, #20]
  408afa:	f8ca 301c 	str.w	r3, [sl, #28]
  408afe:	3418      	adds	r4, #24
  408b00:	f10a 0320 	add.w	r3, sl, #32
  408b04:	e767      	b.n	4089d6 <_realloc_r+0x296>
  408b06:	bf00      	nop
  408b08:	200008a4 	.word	0x200008a4

00408b0c <__fpclassifyd>:
  408b0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  408b10:	b410      	push	{r4}
  408b12:	d008      	beq.n	408b26 <__fpclassifyd+0x1a>
  408b14:	4a0f      	ldr	r2, [pc, #60]	; (408b54 <__fpclassifyd+0x48>)
  408b16:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  408b1a:	4294      	cmp	r4, r2
  408b1c:	d80a      	bhi.n	408b34 <__fpclassifyd+0x28>
  408b1e:	2004      	movs	r0, #4
  408b20:	f85d 4b04 	ldr.w	r4, [sp], #4
  408b24:	4770      	bx	lr
  408b26:	2800      	cmp	r0, #0
  408b28:	bf0c      	ite	eq
  408b2a:	2002      	moveq	r0, #2
  408b2c:	2003      	movne	r0, #3
  408b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  408b32:	4770      	bx	lr
  408b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  408b38:	d201      	bcs.n	408b3e <__fpclassifyd+0x32>
  408b3a:	2003      	movs	r0, #3
  408b3c:	e7f7      	b.n	408b2e <__fpclassifyd+0x22>
  408b3e:	4a06      	ldr	r2, [pc, #24]	; (408b58 <__fpclassifyd+0x4c>)
  408b40:	4293      	cmp	r3, r2
  408b42:	d001      	beq.n	408b48 <__fpclassifyd+0x3c>
  408b44:	2000      	movs	r0, #0
  408b46:	e7f2      	b.n	408b2e <__fpclassifyd+0x22>
  408b48:	f1d0 0001 	rsbs	r0, r0, #1
  408b4c:	bf38      	it	cc
  408b4e:	2000      	movcc	r0, #0
  408b50:	e7ed      	b.n	408b2e <__fpclassifyd+0x22>
  408b52:	bf00      	nop
  408b54:	7fdfffff 	.word	0x7fdfffff
  408b58:	7ff00000 	.word	0x7ff00000

00408b5c <_sbrk_r>:
  408b5c:	b538      	push	{r3, r4, r5, lr}
  408b5e:	4c07      	ldr	r4, [pc, #28]	; (408b7c <_sbrk_r+0x20>)
  408b60:	2300      	movs	r3, #0
  408b62:	4605      	mov	r5, r0
  408b64:	4608      	mov	r0, r1
  408b66:	6023      	str	r3, [r4, #0]
  408b68:	f7f9 fc42 	bl	4023f0 <_sbrk>
  408b6c:	1c43      	adds	r3, r0, #1
  408b6e:	d000      	beq.n	408b72 <_sbrk_r+0x16>
  408b70:	bd38      	pop	{r3, r4, r5, pc}
  408b72:	6823      	ldr	r3, [r4, #0]
  408b74:	2b00      	cmp	r3, #0
  408b76:	d0fb      	beq.n	408b70 <_sbrk_r+0x14>
  408b78:	602b      	str	r3, [r5, #0]
  408b7a:	bd38      	pop	{r3, r4, r5, pc}
  408b7c:	2000100c 	.word	0x2000100c

00408b80 <__ssprint_r>:
  408b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b84:	6894      	ldr	r4, [r2, #8]
  408b86:	6816      	ldr	r6, [r2, #0]
  408b88:	b083      	sub	sp, #12
  408b8a:	4692      	mov	sl, r2
  408b8c:	4680      	mov	r8, r0
  408b8e:	460d      	mov	r5, r1
  408b90:	2c00      	cmp	r4, #0
  408b92:	d06f      	beq.n	408c74 <__ssprint_r+0xf4>
  408b94:	f04f 0b00 	mov.w	fp, #0
  408b98:	6808      	ldr	r0, [r1, #0]
  408b9a:	688b      	ldr	r3, [r1, #8]
  408b9c:	465c      	mov	r4, fp
  408b9e:	2c00      	cmp	r4, #0
  408ba0:	d043      	beq.n	408c2a <__ssprint_r+0xaa>
  408ba2:	429c      	cmp	r4, r3
  408ba4:	461f      	mov	r7, r3
  408ba6:	d345      	bcc.n	408c34 <__ssprint_r+0xb4>
  408ba8:	89ab      	ldrh	r3, [r5, #12]
  408baa:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408bae:	d044      	beq.n	408c3a <__ssprint_r+0xba>
  408bb0:	696f      	ldr	r7, [r5, #20]
  408bb2:	6929      	ldr	r1, [r5, #16]
  408bb4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  408bb8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  408bbc:	ebc1 0900 	rsb	r9, r1, r0
  408bc0:	1c62      	adds	r2, r4, #1
  408bc2:	107f      	asrs	r7, r7, #1
  408bc4:	444a      	add	r2, r9
  408bc6:	4297      	cmp	r7, r2
  408bc8:	bf34      	ite	cc
  408bca:	4617      	movcc	r7, r2
  408bcc:	463a      	movcs	r2, r7
  408bce:	055b      	lsls	r3, r3, #21
  408bd0:	d535      	bpl.n	408c3e <__ssprint_r+0xbe>
  408bd2:	4611      	mov	r1, r2
  408bd4:	4640      	mov	r0, r8
  408bd6:	f7fe fec7 	bl	407968 <_malloc_r>
  408bda:	2800      	cmp	r0, #0
  408bdc:	d039      	beq.n	408c52 <__ssprint_r+0xd2>
  408bde:	6929      	ldr	r1, [r5, #16]
  408be0:	9001      	str	r0, [sp, #4]
  408be2:	464a      	mov	r2, r9
  408be4:	f7ff f9a4 	bl	407f30 <memcpy>
  408be8:	89aa      	ldrh	r2, [r5, #12]
  408bea:	9b01      	ldr	r3, [sp, #4]
  408bec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408bf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408bf4:	81aa      	strh	r2, [r5, #12]
  408bf6:	ebc9 0207 	rsb	r2, r9, r7
  408bfa:	eb03 0009 	add.w	r0, r3, r9
  408bfe:	616f      	str	r7, [r5, #20]
  408c00:	612b      	str	r3, [r5, #16]
  408c02:	6028      	str	r0, [r5, #0]
  408c04:	60aa      	str	r2, [r5, #8]
  408c06:	4627      	mov	r7, r4
  408c08:	46a1      	mov	r9, r4
  408c0a:	464a      	mov	r2, r9
  408c0c:	4659      	mov	r1, fp
  408c0e:	f7ff fa29 	bl	408064 <memmove>
  408c12:	f8da 2008 	ldr.w	r2, [sl, #8]
  408c16:	68ab      	ldr	r3, [r5, #8]
  408c18:	6828      	ldr	r0, [r5, #0]
  408c1a:	1bdb      	subs	r3, r3, r7
  408c1c:	4448      	add	r0, r9
  408c1e:	1b14      	subs	r4, r2, r4
  408c20:	60ab      	str	r3, [r5, #8]
  408c22:	6028      	str	r0, [r5, #0]
  408c24:	f8ca 4008 	str.w	r4, [sl, #8]
  408c28:	b324      	cbz	r4, 408c74 <__ssprint_r+0xf4>
  408c2a:	f8d6 b000 	ldr.w	fp, [r6]
  408c2e:	6874      	ldr	r4, [r6, #4]
  408c30:	3608      	adds	r6, #8
  408c32:	e7b4      	b.n	408b9e <__ssprint_r+0x1e>
  408c34:	4627      	mov	r7, r4
  408c36:	46a1      	mov	r9, r4
  408c38:	e7e7      	b.n	408c0a <__ssprint_r+0x8a>
  408c3a:	46b9      	mov	r9, r7
  408c3c:	e7e5      	b.n	408c0a <__ssprint_r+0x8a>
  408c3e:	4640      	mov	r0, r8
  408c40:	f7ff fd7e 	bl	408740 <_realloc_r>
  408c44:	4603      	mov	r3, r0
  408c46:	2800      	cmp	r0, #0
  408c48:	d1d5      	bne.n	408bf6 <__ssprint_r+0x76>
  408c4a:	4640      	mov	r0, r8
  408c4c:	6929      	ldr	r1, [r5, #16]
  408c4e:	f7fe fdb9 	bl	4077c4 <_free_r>
  408c52:	89aa      	ldrh	r2, [r5, #12]
  408c54:	230c      	movs	r3, #12
  408c56:	f8c8 3000 	str.w	r3, [r8]
  408c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408c5e:	2300      	movs	r3, #0
  408c60:	f04f 30ff 	mov.w	r0, #4294967295
  408c64:	81aa      	strh	r2, [r5, #12]
  408c66:	f8ca 3008 	str.w	r3, [sl, #8]
  408c6a:	f8ca 3004 	str.w	r3, [sl, #4]
  408c6e:	b003      	add	sp, #12
  408c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c74:	4620      	mov	r0, r4
  408c76:	f8ca 4004 	str.w	r4, [sl, #4]
  408c7a:	b003      	add	sp, #12
  408c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408c80 <__register_exitproc>:
  408c80:	b5f0      	push	{r4, r5, r6, r7, lr}
  408c82:	4c27      	ldr	r4, [pc, #156]	; (408d20 <__register_exitproc+0xa0>)
  408c84:	6826      	ldr	r6, [r4, #0]
  408c86:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  408c8a:	b085      	sub	sp, #20
  408c8c:	4607      	mov	r7, r0
  408c8e:	2c00      	cmp	r4, #0
  408c90:	d041      	beq.n	408d16 <__register_exitproc+0x96>
  408c92:	6865      	ldr	r5, [r4, #4]
  408c94:	2d1f      	cmp	r5, #31
  408c96:	dd1e      	ble.n	408cd6 <__register_exitproc+0x56>
  408c98:	4822      	ldr	r0, [pc, #136]	; (408d24 <__register_exitproc+0xa4>)
  408c9a:	b918      	cbnz	r0, 408ca4 <__register_exitproc+0x24>
  408c9c:	f04f 30ff 	mov.w	r0, #4294967295
  408ca0:	b005      	add	sp, #20
  408ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408ca4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408ca8:	9103      	str	r1, [sp, #12]
  408caa:	9202      	str	r2, [sp, #8]
  408cac:	9301      	str	r3, [sp, #4]
  408cae:	f3af 8000 	nop.w
  408cb2:	9903      	ldr	r1, [sp, #12]
  408cb4:	9a02      	ldr	r2, [sp, #8]
  408cb6:	9b01      	ldr	r3, [sp, #4]
  408cb8:	4604      	mov	r4, r0
  408cba:	2800      	cmp	r0, #0
  408cbc:	d0ee      	beq.n	408c9c <__register_exitproc+0x1c>
  408cbe:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  408cc2:	6025      	str	r5, [r4, #0]
  408cc4:	2000      	movs	r0, #0
  408cc6:	6060      	str	r0, [r4, #4]
  408cc8:	4605      	mov	r5, r0
  408cca:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  408cce:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  408cd2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  408cd6:	b93f      	cbnz	r7, 408ce8 <__register_exitproc+0x68>
  408cd8:	1cab      	adds	r3, r5, #2
  408cda:	2000      	movs	r0, #0
  408cdc:	3501      	adds	r5, #1
  408cde:	6065      	str	r5, [r4, #4]
  408ce0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  408ce4:	b005      	add	sp, #20
  408ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408ce8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  408cec:	f04f 0c01 	mov.w	ip, #1
  408cf0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  408cf4:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  408cf8:	fa0c f205 	lsl.w	r2, ip, r5
  408cfc:	4316      	orrs	r6, r2
  408cfe:	2f02      	cmp	r7, #2
  408d00:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  408d04:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  408d08:	d1e6      	bne.n	408cd8 <__register_exitproc+0x58>
  408d0a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  408d0e:	431a      	orrs	r2, r3
  408d10:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  408d14:	e7e0      	b.n	408cd8 <__register_exitproc+0x58>
  408d16:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  408d1a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  408d1e:	e7b8      	b.n	408c92 <__register_exitproc+0x12>
  408d20:	00409bc4 	.word	0x00409bc4
  408d24:	00000000 	.word	0x00000000

00408d28 <_calloc_r>:
  408d28:	b510      	push	{r4, lr}
  408d2a:	fb02 f101 	mul.w	r1, r2, r1
  408d2e:	f7fe fe1b 	bl	407968 <_malloc_r>
  408d32:	4604      	mov	r4, r0
  408d34:	b168      	cbz	r0, 408d52 <_calloc_r+0x2a>
  408d36:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408d3a:	f022 0203 	bic.w	r2, r2, #3
  408d3e:	3a04      	subs	r2, #4
  408d40:	2a24      	cmp	r2, #36	; 0x24
  408d42:	d818      	bhi.n	408d76 <_calloc_r+0x4e>
  408d44:	2a13      	cmp	r2, #19
  408d46:	d806      	bhi.n	408d56 <_calloc_r+0x2e>
  408d48:	4603      	mov	r3, r0
  408d4a:	2200      	movs	r2, #0
  408d4c:	601a      	str	r2, [r3, #0]
  408d4e:	605a      	str	r2, [r3, #4]
  408d50:	609a      	str	r2, [r3, #8]
  408d52:	4620      	mov	r0, r4
  408d54:	bd10      	pop	{r4, pc}
  408d56:	2300      	movs	r3, #0
  408d58:	2a1b      	cmp	r2, #27
  408d5a:	6003      	str	r3, [r0, #0]
  408d5c:	6043      	str	r3, [r0, #4]
  408d5e:	d90f      	bls.n	408d80 <_calloc_r+0x58>
  408d60:	2a24      	cmp	r2, #36	; 0x24
  408d62:	6083      	str	r3, [r0, #8]
  408d64:	60c3      	str	r3, [r0, #12]
  408d66:	bf05      	ittet	eq
  408d68:	6103      	streq	r3, [r0, #16]
  408d6a:	6143      	streq	r3, [r0, #20]
  408d6c:	f100 0310 	addne.w	r3, r0, #16
  408d70:	f100 0318 	addeq.w	r3, r0, #24
  408d74:	e7e9      	b.n	408d4a <_calloc_r+0x22>
  408d76:	2100      	movs	r1, #0
  408d78:	f7fc f9de 	bl	405138 <memset>
  408d7c:	4620      	mov	r0, r4
  408d7e:	bd10      	pop	{r4, pc}
  408d80:	f100 0308 	add.w	r3, r0, #8
  408d84:	e7e1      	b.n	408d4a <_calloc_r+0x22>
  408d86:	bf00      	nop

00408d88 <__aeabi_d2iz>:
  408d88:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408d8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408d90:	d215      	bcs.n	408dbe <__aeabi_d2iz+0x36>
  408d92:	d511      	bpl.n	408db8 <__aeabi_d2iz+0x30>
  408d94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408d98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408d9c:	d912      	bls.n	408dc4 <__aeabi_d2iz+0x3c>
  408d9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408da6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408daa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408dae:	fa23 f002 	lsr.w	r0, r3, r2
  408db2:	bf18      	it	ne
  408db4:	4240      	negne	r0, r0
  408db6:	4770      	bx	lr
  408db8:	f04f 0000 	mov.w	r0, #0
  408dbc:	4770      	bx	lr
  408dbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408dc2:	d105      	bne.n	408dd0 <__aeabi_d2iz+0x48>
  408dc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408dc8:	bf08      	it	eq
  408dca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408dce:	4770      	bx	lr
  408dd0:	f04f 0000 	mov.w	r0, #0
  408dd4:	4770      	bx	lr
  408dd6:	bf00      	nop

00408dd8 <__aeabi_uldivmod>:
  408dd8:	b94b      	cbnz	r3, 408dee <__aeabi_uldivmod+0x16>
  408dda:	b942      	cbnz	r2, 408dee <__aeabi_uldivmod+0x16>
  408ddc:	2900      	cmp	r1, #0
  408dde:	bf08      	it	eq
  408de0:	2800      	cmpeq	r0, #0
  408de2:	d002      	beq.n	408dea <__aeabi_uldivmod+0x12>
  408de4:	f04f 31ff 	mov.w	r1, #4294967295
  408de8:	4608      	mov	r0, r1
  408dea:	f000 b83b 	b.w	408e64 <__aeabi_idiv0>
  408dee:	b082      	sub	sp, #8
  408df0:	46ec      	mov	ip, sp
  408df2:	e92d 5000 	stmdb	sp!, {ip, lr}
  408df6:	f000 f81d 	bl	408e34 <__gnu_uldivmod_helper>
  408dfa:	f8dd e004 	ldr.w	lr, [sp, #4]
  408dfe:	b002      	add	sp, #8
  408e00:	bc0c      	pop	{r2, r3}
  408e02:	4770      	bx	lr

00408e04 <__gnu_ldivmod_helper>:
  408e04:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  408e08:	9e06      	ldr	r6, [sp, #24]
  408e0a:	4614      	mov	r4, r2
  408e0c:	461d      	mov	r5, r3
  408e0e:	4680      	mov	r8, r0
  408e10:	4689      	mov	r9, r1
  408e12:	f000 f829 	bl	408e68 <__divdi3>
  408e16:	fb04 f301 	mul.w	r3, r4, r1
  408e1a:	fb00 3305 	mla	r3, r0, r5, r3
  408e1e:	fba4 4500 	umull	r4, r5, r4, r0
  408e22:	441d      	add	r5, r3
  408e24:	ebb8 0404 	subs.w	r4, r8, r4
  408e28:	eb69 0505 	sbc.w	r5, r9, r5
  408e2c:	e9c6 4500 	strd	r4, r5, [r6]
  408e30:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00408e34 <__gnu_uldivmod_helper>:
  408e34:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  408e38:	9e06      	ldr	r6, [sp, #24]
  408e3a:	4614      	mov	r4, r2
  408e3c:	4680      	mov	r8, r0
  408e3e:	4689      	mov	r9, r1
  408e40:	461d      	mov	r5, r3
  408e42:	f000 f95d 	bl	409100 <__udivdi3>
  408e46:	fb00 f505 	mul.w	r5, r0, r5
  408e4a:	fb04 5301 	mla	r3, r4, r1, r5
  408e4e:	fba0 4504 	umull	r4, r5, r0, r4
  408e52:	441d      	add	r5, r3
  408e54:	ebb8 0404 	subs.w	r4, r8, r4
  408e58:	eb69 0505 	sbc.w	r5, r9, r5
  408e5c:	e9c6 4500 	strd	r4, r5, [r6]
  408e60:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00408e64 <__aeabi_idiv0>:
  408e64:	4770      	bx	lr
  408e66:	bf00      	nop

00408e68 <__divdi3>:
  408e68:	2900      	cmp	r1, #0
  408e6a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  408e6e:	f2c0 809f 	blt.w	408fb0 <__divdi3+0x148>
  408e72:	2400      	movs	r4, #0
  408e74:	2b00      	cmp	r3, #0
  408e76:	f2c0 8096 	blt.w	408fa6 <__divdi3+0x13e>
  408e7a:	4615      	mov	r5, r2
  408e7c:	4606      	mov	r6, r0
  408e7e:	460f      	mov	r7, r1
  408e80:	2b00      	cmp	r3, #0
  408e82:	d13e      	bne.n	408f02 <__divdi3+0x9a>
  408e84:	428a      	cmp	r2, r1
  408e86:	d957      	bls.n	408f38 <__divdi3+0xd0>
  408e88:	fab2 f382 	clz	r3, r2
  408e8c:	b14b      	cbz	r3, 408ea2 <__divdi3+0x3a>
  408e8e:	f1c3 0220 	rsb	r2, r3, #32
  408e92:	fa01 f703 	lsl.w	r7, r1, r3
  408e96:	fa20 f202 	lsr.w	r2, r0, r2
  408e9a:	409d      	lsls	r5, r3
  408e9c:	4317      	orrs	r7, r2
  408e9e:	fa00 f603 	lsl.w	r6, r0, r3
  408ea2:	0c29      	lsrs	r1, r5, #16
  408ea4:	fbb7 f2f1 	udiv	r2, r7, r1
  408ea8:	0c33      	lsrs	r3, r6, #16
  408eaa:	fb01 7c12 	mls	ip, r1, r2, r7
  408eae:	b2a8      	uxth	r0, r5
  408eb0:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  408eb4:	fb00 f302 	mul.w	r3, r0, r2
  408eb8:	42bb      	cmp	r3, r7
  408eba:	d909      	bls.n	408ed0 <__divdi3+0x68>
  408ebc:	197f      	adds	r7, r7, r5
  408ebe:	f102 3cff 	add.w	ip, r2, #4294967295
  408ec2:	f080 8101 	bcs.w	4090c8 <__divdi3+0x260>
  408ec6:	42bb      	cmp	r3, r7
  408ec8:	f240 80fe 	bls.w	4090c8 <__divdi3+0x260>
  408ecc:	3a02      	subs	r2, #2
  408ece:	442f      	add	r7, r5
  408ed0:	1aff      	subs	r7, r7, r3
  408ed2:	fbb7 f3f1 	udiv	r3, r7, r1
  408ed6:	b2b6      	uxth	r6, r6
  408ed8:	fb01 7113 	mls	r1, r1, r3, r7
  408edc:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  408ee0:	fb00 f003 	mul.w	r0, r0, r3
  408ee4:	4288      	cmp	r0, r1
  408ee6:	d908      	bls.n	408efa <__divdi3+0x92>
  408ee8:	1949      	adds	r1, r1, r5
  408eea:	f103 37ff 	add.w	r7, r3, #4294967295
  408eee:	f080 80ed 	bcs.w	4090cc <__divdi3+0x264>
  408ef2:	4288      	cmp	r0, r1
  408ef4:	f240 80ea 	bls.w	4090cc <__divdi3+0x264>
  408ef8:	3b02      	subs	r3, #2
  408efa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  408efe:	2300      	movs	r3, #0
  408f00:	e003      	b.n	408f0a <__divdi3+0xa2>
  408f02:	428b      	cmp	r3, r1
  408f04:	d90a      	bls.n	408f1c <__divdi3+0xb4>
  408f06:	2300      	movs	r3, #0
  408f08:	461a      	mov	r2, r3
  408f0a:	4610      	mov	r0, r2
  408f0c:	4619      	mov	r1, r3
  408f0e:	b114      	cbz	r4, 408f16 <__divdi3+0xae>
  408f10:	4240      	negs	r0, r0
  408f12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408f16:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  408f1a:	4770      	bx	lr
  408f1c:	fab3 f883 	clz	r8, r3
  408f20:	f1b8 0f00 	cmp.w	r8, #0
  408f24:	f040 8084 	bne.w	409030 <__divdi3+0x1c8>
  408f28:	428b      	cmp	r3, r1
  408f2a:	d302      	bcc.n	408f32 <__divdi3+0xca>
  408f2c:	4282      	cmp	r2, r0
  408f2e:	f200 80de 	bhi.w	4090ee <__divdi3+0x286>
  408f32:	2300      	movs	r3, #0
  408f34:	2201      	movs	r2, #1
  408f36:	e7e8      	b.n	408f0a <__divdi3+0xa2>
  408f38:	b912      	cbnz	r2, 408f40 <__divdi3+0xd8>
  408f3a:	2301      	movs	r3, #1
  408f3c:	fbb3 f5f2 	udiv	r5, r3, r2
  408f40:	fab5 f285 	clz	r2, r5
  408f44:	2a00      	cmp	r2, #0
  408f46:	d139      	bne.n	408fbc <__divdi3+0x154>
  408f48:	1b7f      	subs	r7, r7, r5
  408f4a:	0c28      	lsrs	r0, r5, #16
  408f4c:	fa1f fc85 	uxth.w	ip, r5
  408f50:	2301      	movs	r3, #1
  408f52:	fbb7 f1f0 	udiv	r1, r7, r0
  408f56:	0c32      	lsrs	r2, r6, #16
  408f58:	fb00 7711 	mls	r7, r0, r1, r7
  408f5c:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  408f60:	fb0c f201 	mul.w	r2, ip, r1
  408f64:	42ba      	cmp	r2, r7
  408f66:	d907      	bls.n	408f78 <__divdi3+0x110>
  408f68:	197f      	adds	r7, r7, r5
  408f6a:	f101 38ff 	add.w	r8, r1, #4294967295
  408f6e:	d202      	bcs.n	408f76 <__divdi3+0x10e>
  408f70:	42ba      	cmp	r2, r7
  408f72:	f200 80c1 	bhi.w	4090f8 <__divdi3+0x290>
  408f76:	4641      	mov	r1, r8
  408f78:	1abf      	subs	r7, r7, r2
  408f7a:	fbb7 f2f0 	udiv	r2, r7, r0
  408f7e:	b2b6      	uxth	r6, r6
  408f80:	fb00 7012 	mls	r0, r0, r2, r7
  408f84:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  408f88:	fb0c fc02 	mul.w	ip, ip, r2
  408f8c:	4584      	cmp	ip, r0
  408f8e:	d907      	bls.n	408fa0 <__divdi3+0x138>
  408f90:	1940      	adds	r0, r0, r5
  408f92:	f102 37ff 	add.w	r7, r2, #4294967295
  408f96:	d202      	bcs.n	408f9e <__divdi3+0x136>
  408f98:	4584      	cmp	ip, r0
  408f9a:	f200 80ab 	bhi.w	4090f4 <__divdi3+0x28c>
  408f9e:	463a      	mov	r2, r7
  408fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  408fa4:	e7b1      	b.n	408f0a <__divdi3+0xa2>
  408fa6:	43e4      	mvns	r4, r4
  408fa8:	4252      	negs	r2, r2
  408faa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408fae:	e764      	b.n	408e7a <__divdi3+0x12>
  408fb0:	4240      	negs	r0, r0
  408fb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408fb6:	f04f 34ff 	mov.w	r4, #4294967295
  408fba:	e75b      	b.n	408e74 <__divdi3+0xc>
  408fbc:	4095      	lsls	r5, r2
  408fbe:	f1c2 0320 	rsb	r3, r2, #32
  408fc2:	fa27 f103 	lsr.w	r1, r7, r3
  408fc6:	0c28      	lsrs	r0, r5, #16
  408fc8:	fa26 f303 	lsr.w	r3, r6, r3
  408fcc:	4097      	lsls	r7, r2
  408fce:	fbb1 f8f0 	udiv	r8, r1, r0
  408fd2:	431f      	orrs	r7, r3
  408fd4:	0c3b      	lsrs	r3, r7, #16
  408fd6:	fb00 1118 	mls	r1, r0, r8, r1
  408fda:	fa1f fc85 	uxth.w	ip, r5
  408fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  408fe2:	fb0c f308 	mul.w	r3, ip, r8
  408fe6:	428b      	cmp	r3, r1
  408fe8:	fa06 f602 	lsl.w	r6, r6, r2
  408fec:	d908      	bls.n	409000 <__divdi3+0x198>
  408fee:	1949      	adds	r1, r1, r5
  408ff0:	f108 32ff 	add.w	r2, r8, #4294967295
  408ff4:	d279      	bcs.n	4090ea <__divdi3+0x282>
  408ff6:	428b      	cmp	r3, r1
  408ff8:	d977      	bls.n	4090ea <__divdi3+0x282>
  408ffa:	f1a8 0802 	sub.w	r8, r8, #2
  408ffe:	4429      	add	r1, r5
  409000:	1ac9      	subs	r1, r1, r3
  409002:	fbb1 f3f0 	udiv	r3, r1, r0
  409006:	b2bf      	uxth	r7, r7
  409008:	fb00 1113 	mls	r1, r0, r3, r1
  40900c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  409010:	fb0c f203 	mul.w	r2, ip, r3
  409014:	42ba      	cmp	r2, r7
  409016:	d907      	bls.n	409028 <__divdi3+0x1c0>
  409018:	197f      	adds	r7, r7, r5
  40901a:	f103 31ff 	add.w	r1, r3, #4294967295
  40901e:	d260      	bcs.n	4090e2 <__divdi3+0x27a>
  409020:	42ba      	cmp	r2, r7
  409022:	d95e      	bls.n	4090e2 <__divdi3+0x27a>
  409024:	3b02      	subs	r3, #2
  409026:	442f      	add	r7, r5
  409028:	1abf      	subs	r7, r7, r2
  40902a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40902e:	e790      	b.n	408f52 <__divdi3+0xea>
  409030:	f1c8 0220 	rsb	r2, r8, #32
  409034:	fa03 fc08 	lsl.w	ip, r3, r8
  409038:	fa25 f302 	lsr.w	r3, r5, r2
  40903c:	ea43 0c0c 	orr.w	ip, r3, ip
  409040:	ea4f 491c 	mov.w	r9, ip, lsr #16
  409044:	fa21 f302 	lsr.w	r3, r1, r2
  409048:	fa01 f708 	lsl.w	r7, r1, r8
  40904c:	fa20 f202 	lsr.w	r2, r0, r2
  409050:	fbb3 f1f9 	udiv	r1, r3, r9
  409054:	4317      	orrs	r7, r2
  409056:	fb09 3311 	mls	r3, r9, r1, r3
  40905a:	0c3a      	lsrs	r2, r7, #16
  40905c:	fa1f fb8c 	uxth.w	fp, ip
  409060:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  409064:	fb0b fa01 	mul.w	sl, fp, r1
  409068:	459a      	cmp	sl, r3
  40906a:	fa05 f008 	lsl.w	r0, r5, r8
  40906e:	d908      	bls.n	409082 <__divdi3+0x21a>
  409070:	eb13 030c 	adds.w	r3, r3, ip
  409074:	f101 32ff 	add.w	r2, r1, #4294967295
  409078:	d235      	bcs.n	4090e6 <__divdi3+0x27e>
  40907a:	459a      	cmp	sl, r3
  40907c:	d933      	bls.n	4090e6 <__divdi3+0x27e>
  40907e:	3902      	subs	r1, #2
  409080:	4463      	add	r3, ip
  409082:	ebca 0303 	rsb	r3, sl, r3
  409086:	fbb3 f2f9 	udiv	r2, r3, r9
  40908a:	fb09 3312 	mls	r3, r9, r2, r3
  40908e:	b2bf      	uxth	r7, r7
  409090:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  409094:	fb0b f902 	mul.w	r9, fp, r2
  409098:	45b9      	cmp	r9, r7
  40909a:	d908      	bls.n	4090ae <__divdi3+0x246>
  40909c:	eb17 070c 	adds.w	r7, r7, ip
  4090a0:	f102 33ff 	add.w	r3, r2, #4294967295
  4090a4:	d21b      	bcs.n	4090de <__divdi3+0x276>
  4090a6:	45b9      	cmp	r9, r7
  4090a8:	d919      	bls.n	4090de <__divdi3+0x276>
  4090aa:	3a02      	subs	r2, #2
  4090ac:	4467      	add	r7, ip
  4090ae:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  4090b2:	fba5 0100 	umull	r0, r1, r5, r0
  4090b6:	ebc9 0707 	rsb	r7, r9, r7
  4090ba:	428f      	cmp	r7, r1
  4090bc:	f04f 0300 	mov.w	r3, #0
  4090c0:	d30a      	bcc.n	4090d8 <__divdi3+0x270>
  4090c2:	d005      	beq.n	4090d0 <__divdi3+0x268>
  4090c4:	462a      	mov	r2, r5
  4090c6:	e720      	b.n	408f0a <__divdi3+0xa2>
  4090c8:	4662      	mov	r2, ip
  4090ca:	e701      	b.n	408ed0 <__divdi3+0x68>
  4090cc:	463b      	mov	r3, r7
  4090ce:	e714      	b.n	408efa <__divdi3+0x92>
  4090d0:	fa06 f608 	lsl.w	r6, r6, r8
  4090d4:	4286      	cmp	r6, r0
  4090d6:	d2f5      	bcs.n	4090c4 <__divdi3+0x25c>
  4090d8:	1e6a      	subs	r2, r5, #1
  4090da:	2300      	movs	r3, #0
  4090dc:	e715      	b.n	408f0a <__divdi3+0xa2>
  4090de:	461a      	mov	r2, r3
  4090e0:	e7e5      	b.n	4090ae <__divdi3+0x246>
  4090e2:	460b      	mov	r3, r1
  4090e4:	e7a0      	b.n	409028 <__divdi3+0x1c0>
  4090e6:	4611      	mov	r1, r2
  4090e8:	e7cb      	b.n	409082 <__divdi3+0x21a>
  4090ea:	4690      	mov	r8, r2
  4090ec:	e788      	b.n	409000 <__divdi3+0x198>
  4090ee:	4643      	mov	r3, r8
  4090f0:	4642      	mov	r2, r8
  4090f2:	e70a      	b.n	408f0a <__divdi3+0xa2>
  4090f4:	3a02      	subs	r2, #2
  4090f6:	e753      	b.n	408fa0 <__divdi3+0x138>
  4090f8:	3902      	subs	r1, #2
  4090fa:	442f      	add	r7, r5
  4090fc:	e73c      	b.n	408f78 <__divdi3+0x110>
  4090fe:	bf00      	nop

00409100 <__udivdi3>:
  409100:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409104:	4614      	mov	r4, r2
  409106:	4605      	mov	r5, r0
  409108:	460e      	mov	r6, r1
  40910a:	2b00      	cmp	r3, #0
  40910c:	d143      	bne.n	409196 <__udivdi3+0x96>
  40910e:	428a      	cmp	r2, r1
  409110:	d953      	bls.n	4091ba <__udivdi3+0xba>
  409112:	fab2 f782 	clz	r7, r2
  409116:	b157      	cbz	r7, 40912e <__udivdi3+0x2e>
  409118:	f1c7 0620 	rsb	r6, r7, #32
  40911c:	fa20 f606 	lsr.w	r6, r0, r6
  409120:	fa01 f307 	lsl.w	r3, r1, r7
  409124:	fa02 f407 	lsl.w	r4, r2, r7
  409128:	431e      	orrs	r6, r3
  40912a:	fa00 f507 	lsl.w	r5, r0, r7
  40912e:	0c21      	lsrs	r1, r4, #16
  409130:	fbb6 f2f1 	udiv	r2, r6, r1
  409134:	0c2b      	lsrs	r3, r5, #16
  409136:	fb01 6712 	mls	r7, r1, r2, r6
  40913a:	b2a0      	uxth	r0, r4
  40913c:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  409140:	fb00 f302 	mul.w	r3, r0, r2
  409144:	42b3      	cmp	r3, r6
  409146:	d909      	bls.n	40915c <__udivdi3+0x5c>
  409148:	1936      	adds	r6, r6, r4
  40914a:	f102 37ff 	add.w	r7, r2, #4294967295
  40914e:	f080 80f6 	bcs.w	40933e <__udivdi3+0x23e>
  409152:	42b3      	cmp	r3, r6
  409154:	f240 80f3 	bls.w	40933e <__udivdi3+0x23e>
  409158:	3a02      	subs	r2, #2
  40915a:	4426      	add	r6, r4
  40915c:	1af6      	subs	r6, r6, r3
  40915e:	fbb6 f3f1 	udiv	r3, r6, r1
  409162:	b2ad      	uxth	r5, r5
  409164:	fb01 6113 	mls	r1, r1, r3, r6
  409168:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40916c:	fb00 f003 	mul.w	r0, r0, r3
  409170:	4288      	cmp	r0, r1
  409172:	d908      	bls.n	409186 <__udivdi3+0x86>
  409174:	1909      	adds	r1, r1, r4
  409176:	f103 36ff 	add.w	r6, r3, #4294967295
  40917a:	f080 80e2 	bcs.w	409342 <__udivdi3+0x242>
  40917e:	4288      	cmp	r0, r1
  409180:	f240 80df 	bls.w	409342 <__udivdi3+0x242>
  409184:	3b02      	subs	r3, #2
  409186:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40918a:	2300      	movs	r3, #0
  40918c:	4610      	mov	r0, r2
  40918e:	4619      	mov	r1, r3
  409190:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409194:	4770      	bx	lr
  409196:	428b      	cmp	r3, r1
  409198:	d84a      	bhi.n	409230 <__udivdi3+0x130>
  40919a:	fab3 f683 	clz	r6, r3
  40919e:	2e00      	cmp	r6, #0
  4091a0:	d14d      	bne.n	40923e <__udivdi3+0x13e>
  4091a2:	428b      	cmp	r3, r1
  4091a4:	d302      	bcc.n	4091ac <__udivdi3+0xac>
  4091a6:	4282      	cmp	r2, r0
  4091a8:	f200 80d6 	bhi.w	409358 <__udivdi3+0x258>
  4091ac:	2300      	movs	r3, #0
  4091ae:	2201      	movs	r2, #1
  4091b0:	4610      	mov	r0, r2
  4091b2:	4619      	mov	r1, r3
  4091b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4091b8:	4770      	bx	lr
  4091ba:	b912      	cbnz	r2, 4091c2 <__udivdi3+0xc2>
  4091bc:	2401      	movs	r4, #1
  4091be:	fbb4 f4f2 	udiv	r4, r4, r2
  4091c2:	fab4 f284 	clz	r2, r4
  4091c6:	2a00      	cmp	r2, #0
  4091c8:	d17c      	bne.n	4092c4 <__udivdi3+0x1c4>
  4091ca:	1b09      	subs	r1, r1, r4
  4091cc:	0c26      	lsrs	r6, r4, #16
  4091ce:	b2a7      	uxth	r7, r4
  4091d0:	2301      	movs	r3, #1
  4091d2:	fbb1 f0f6 	udiv	r0, r1, r6
  4091d6:	0c2a      	lsrs	r2, r5, #16
  4091d8:	fb06 1110 	mls	r1, r6, r0, r1
  4091dc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  4091e0:	fb07 f200 	mul.w	r2, r7, r0
  4091e4:	428a      	cmp	r2, r1
  4091e6:	d907      	bls.n	4091f8 <__udivdi3+0xf8>
  4091e8:	1909      	adds	r1, r1, r4
  4091ea:	f100 3cff 	add.w	ip, r0, #4294967295
  4091ee:	d202      	bcs.n	4091f6 <__udivdi3+0xf6>
  4091f0:	428a      	cmp	r2, r1
  4091f2:	f200 80c3 	bhi.w	40937c <__udivdi3+0x27c>
  4091f6:	4660      	mov	r0, ip
  4091f8:	1a89      	subs	r1, r1, r2
  4091fa:	fbb1 f2f6 	udiv	r2, r1, r6
  4091fe:	b2ad      	uxth	r5, r5
  409200:	fb06 1112 	mls	r1, r6, r2, r1
  409204:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  409208:	fb07 f702 	mul.w	r7, r7, r2
  40920c:	42af      	cmp	r7, r5
  40920e:	d908      	bls.n	409222 <__udivdi3+0x122>
  409210:	192c      	adds	r4, r5, r4
  409212:	f102 31ff 	add.w	r1, r2, #4294967295
  409216:	f080 8096 	bcs.w	409346 <__udivdi3+0x246>
  40921a:	42a7      	cmp	r7, r4
  40921c:	f240 8093 	bls.w	409346 <__udivdi3+0x246>
  409220:	3a02      	subs	r2, #2
  409222:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  409226:	4610      	mov	r0, r2
  409228:	4619      	mov	r1, r3
  40922a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40922e:	4770      	bx	lr
  409230:	2300      	movs	r3, #0
  409232:	461a      	mov	r2, r3
  409234:	4610      	mov	r0, r2
  409236:	4619      	mov	r1, r3
  409238:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40923c:	4770      	bx	lr
  40923e:	f1c6 0520 	rsb	r5, r6, #32
  409242:	fa22 f405 	lsr.w	r4, r2, r5
  409246:	40b3      	lsls	r3, r6
  409248:	431c      	orrs	r4, r3
  40924a:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40924e:	fa21 f305 	lsr.w	r3, r1, r5
  409252:	fa01 f706 	lsl.w	r7, r1, r6
  409256:	fa20 f505 	lsr.w	r5, r0, r5
  40925a:	fbb3 fcf8 	udiv	ip, r3, r8
  40925e:	432f      	orrs	r7, r5
  409260:	fb08 331c 	mls	r3, r8, ip, r3
  409264:	0c3d      	lsrs	r5, r7, #16
  409266:	fa1f fa84 	uxth.w	sl, r4
  40926a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40926e:	fb0a f90c 	mul.w	r9, sl, ip
  409272:	4599      	cmp	r9, r3
  409274:	fa02 fb06 	lsl.w	fp, r2, r6
  409278:	d904      	bls.n	409284 <__udivdi3+0x184>
  40927a:	191b      	adds	r3, r3, r4
  40927c:	f10c 32ff 	add.w	r2, ip, #4294967295
  409280:	d36d      	bcc.n	40935e <__udivdi3+0x25e>
  409282:	4694      	mov	ip, r2
  409284:	ebc9 0303 	rsb	r3, r9, r3
  409288:	fbb3 f5f8 	udiv	r5, r3, r8
  40928c:	fb08 3315 	mls	r3, r8, r5, r3
  409290:	b2bf      	uxth	r7, r7
  409292:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  409296:	fb0a f805 	mul.w	r8, sl, r5
  40929a:	45b8      	cmp	r8, r7
  40929c:	d904      	bls.n	4092a8 <__udivdi3+0x1a8>
  40929e:	193f      	adds	r7, r7, r4
  4092a0:	f105 33ff 	add.w	r3, r5, #4294967295
  4092a4:	d361      	bcc.n	40936a <__udivdi3+0x26a>
  4092a6:	461d      	mov	r5, r3
  4092a8:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  4092ac:	fbac 230b 	umull	r2, r3, ip, fp
  4092b0:	ebc8 0707 	rsb	r7, r8, r7
  4092b4:	429f      	cmp	r7, r3
  4092b6:	f04f 0500 	mov.w	r5, #0
  4092ba:	d349      	bcc.n	409350 <__udivdi3+0x250>
  4092bc:	d045      	beq.n	40934a <__udivdi3+0x24a>
  4092be:	4662      	mov	r2, ip
  4092c0:	462b      	mov	r3, r5
  4092c2:	e763      	b.n	40918c <__udivdi3+0x8c>
  4092c4:	4094      	lsls	r4, r2
  4092c6:	f1c2 0320 	rsb	r3, r2, #32
  4092ca:	fa21 fc03 	lsr.w	ip, r1, r3
  4092ce:	0c26      	lsrs	r6, r4, #16
  4092d0:	fa20 f303 	lsr.w	r3, r0, r3
  4092d4:	fa01 f502 	lsl.w	r5, r1, r2
  4092d8:	fbbc f8f6 	udiv	r8, ip, r6
  4092dc:	ea43 0105 	orr.w	r1, r3, r5
  4092e0:	0c0b      	lsrs	r3, r1, #16
  4092e2:	fb06 cc18 	mls	ip, r6, r8, ip
  4092e6:	b2a7      	uxth	r7, r4
  4092e8:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  4092ec:	fb07 f308 	mul.w	r3, r7, r8
  4092f0:	4563      	cmp	r3, ip
  4092f2:	fa00 f502 	lsl.w	r5, r0, r2
  4092f6:	d909      	bls.n	40930c <__udivdi3+0x20c>
  4092f8:	eb1c 0c04 	adds.w	ip, ip, r4
  4092fc:	f108 32ff 	add.w	r2, r8, #4294967295
  409300:	d23a      	bcs.n	409378 <__udivdi3+0x278>
  409302:	4563      	cmp	r3, ip
  409304:	d938      	bls.n	409378 <__udivdi3+0x278>
  409306:	f1a8 0802 	sub.w	r8, r8, #2
  40930a:	44a4      	add	ip, r4
  40930c:	ebc3 0c0c 	rsb	ip, r3, ip
  409310:	fbbc f3f6 	udiv	r3, ip, r6
  409314:	b289      	uxth	r1, r1
  409316:	fb06 cc13 	mls	ip, r6, r3, ip
  40931a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40931e:	fb07 f203 	mul.w	r2, r7, r3
  409322:	428a      	cmp	r2, r1
  409324:	d907      	bls.n	409336 <__udivdi3+0x236>
  409326:	1909      	adds	r1, r1, r4
  409328:	f103 30ff 	add.w	r0, r3, #4294967295
  40932c:	d222      	bcs.n	409374 <__udivdi3+0x274>
  40932e:	428a      	cmp	r2, r1
  409330:	d920      	bls.n	409374 <__udivdi3+0x274>
  409332:	3b02      	subs	r3, #2
  409334:	4421      	add	r1, r4
  409336:	1a89      	subs	r1, r1, r2
  409338:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40933c:	e749      	b.n	4091d2 <__udivdi3+0xd2>
  40933e:	463a      	mov	r2, r7
  409340:	e70c      	b.n	40915c <__udivdi3+0x5c>
  409342:	4633      	mov	r3, r6
  409344:	e71f      	b.n	409186 <__udivdi3+0x86>
  409346:	460a      	mov	r2, r1
  409348:	e76b      	b.n	409222 <__udivdi3+0x122>
  40934a:	40b0      	lsls	r0, r6
  40934c:	4290      	cmp	r0, r2
  40934e:	d2b6      	bcs.n	4092be <__udivdi3+0x1be>
  409350:	f10c 32ff 	add.w	r2, ip, #4294967295
  409354:	2300      	movs	r3, #0
  409356:	e719      	b.n	40918c <__udivdi3+0x8c>
  409358:	4633      	mov	r3, r6
  40935a:	4632      	mov	r2, r6
  40935c:	e716      	b.n	40918c <__udivdi3+0x8c>
  40935e:	4599      	cmp	r9, r3
  409360:	d98f      	bls.n	409282 <__udivdi3+0x182>
  409362:	f1ac 0c02 	sub.w	ip, ip, #2
  409366:	4423      	add	r3, r4
  409368:	e78c      	b.n	409284 <__udivdi3+0x184>
  40936a:	45b8      	cmp	r8, r7
  40936c:	d99b      	bls.n	4092a6 <__udivdi3+0x1a6>
  40936e:	3d02      	subs	r5, #2
  409370:	4427      	add	r7, r4
  409372:	e799      	b.n	4092a8 <__udivdi3+0x1a8>
  409374:	4603      	mov	r3, r0
  409376:	e7de      	b.n	409336 <__udivdi3+0x236>
  409378:	4690      	mov	r8, r2
  40937a:	e7c7      	b.n	40930c <__udivdi3+0x20c>
  40937c:	3802      	subs	r0, #2
  40937e:	4421      	add	r1, r4
  409380:	e73a      	b.n	4091f8 <__udivdi3+0xf8>
  409382:	bf00      	nop

00409384 <sd_trans_multipliers>:
  409384:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  409394:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  4093a4:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  4093b4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

004093c4 <sd_mmc_trans_units>:
  4093c4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

004093e0 <mmc_trans_multipliers>:
  4093e0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4093f0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  409400:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  409410:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
  409420:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  409430:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
  409440:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
  409450:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
  409460:	5441 2020 2020 0020                         AT     .

00409468 <excvt.4506>:
  409468:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  409478:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  409488:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  409498:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  4094a8:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  4094b8:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  4094c8:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  4094d8:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

004094e8 <LfnOfs>:
  4094e8:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

004094f8 <tbl_lower.4256>:
  4094f8:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  409508:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  409518:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  409528:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  409538:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  409548:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  409558:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  409568:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  409578:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  409588:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  409598:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  4095a8:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  4095b8:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  4095c8:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  4095d8:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  4095e8:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  4095f8:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  409608:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  409618:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  409628:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  409638:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  409648:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  409658:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  409668:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  409678:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  409688:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  409698:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  4096a8:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  4096b8:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  4096c8:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

004096d8 <Tbl>:
  4096d8:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  4096e8:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  4096f8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  409708:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  409718:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  409728:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  409738:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  409748:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  409758:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  409768:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  409778:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  409788:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  409798:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  4097a8:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  4097b8:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  4097c8:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

004097d8 <tbl_upper.4257>:
  4097d8:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  4097e8:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  4097f8:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  409808:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  409818:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  409828:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  409838:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  409848:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  409858:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  409868:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  409878:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  409888:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  409898:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  4098a8:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  4098b8:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  4098c8:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  4098d8:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  4098e8:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  4098f8:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  409908:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  409918:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  409928:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  409938:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  409948:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  409958:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  409968:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  409978:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  409988:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  409998:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  4099a8:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  4099b8:	6176 5f72 2078 203d 0000 0000 6176 5f72     var_x = ....var_
  4099c8:	2079 203d 0000 0000 7753 7061 5820 5920     y = ....Swap X Y
  4099d8:	0a20 0000 6e49 7570 2074 6156 2072 203d      ...Input Var = 
  4099e8:	0000 0000 754f 7074 7475 4320 756f 746e     ....Output Count
  4099f8:	3d20 0020 6942 7374 6920 206e 7942 6574      = .Bits in Byte
  409a08:	0a20 0000 6e49 7570 2074 6f50 6973 6974      ...Input Positi
  409a18:	6e6f 3d20 0020 0000 754f 7074 7475 3d20     on = ...Output =
  409a28:	0020 0000 6554 7473 6e20 7420 2068 6962      ...Test n th bi
  409a38:	2074 6e69 4420 756f 6c62 2065 6f77 6472     t in Double word
  409a48:	0a20 0000 6c50 6165 6573 6920 736e 7265      ...Please inser
  409a58:	2074 4453 6320 7261 2e64 2e2e 0000 0000     t SD card.......
  409a68:	4453 6320 7261 2064 6e69 6f66 6d72 7461     SD card informat
  409a78:	6f69 3a6e 0000 0000 202d 7954 6570 203a     ion:....- Type: 
  409a88:	6f4e 6d72 6c61 5320 2044 6163 6472 0000     Normal SD card..
  409a98:	202d 7954 6570 203a 4453 4f49 6320 7261     - Type: SDIO car
  409aa8:	0064 0000 202d 7954 6570 203a 6948 6867     d...- Type: High
  409ab8:	4320 7061 6361 7469 2079 6163 6472 0000      Capacity card..
  409ac8:	202d 7954 6570 203a 4453 4f49 4d2f 6d65     - Type: SDIO/Mem
  409ad8:	726f 2079 6163 6472 0000 0000 202d 7954     ory card....- Ty
  409ae8:	6570 203a 6e75 6e6b 776f 006e 202d 6f54     pe: unknown.- To
  409af8:	6174 206c 6973 657a 203a 6c25 2075 424b     tal size: %lu KB
  409b08:	0000 0000 2020 3c20 6f4e 4620 5441 4620     ....   <No FAT F
  409b18:	2053 6f66 6e75 2064 6e6f 5320 3e44 0000     S found on SD>..
  409b28:	3a30 0000 2020 2020 2020 2020 3c20 6f6e     0:..         <no
  409b38:	6320 6e6f 6574 746e 003e 0000 2020 503c      content>...  <P
  409b48:	6572 7373 4220 2d32 2033 6f74 6220 6f72     ress B2-3 to bro
  409b58:	7377 2065 4453 003e 7441 656d 206c 6f43     wse SD>.Atmel Co
  409b68:	7072 0000 6554 706d 7265 7461 7275 2065     rp..Temperature 
  409b78:	6573 736e 726f 003a 694c 6867 2074 6573     sensor:.Light se
  409b88:	736e 726f 003a 0000 6425 0000 0020 0000     nsor:...%d.. ...
  409b98:	0063 0000 6c25 0075 0025 0000 002f 0000     c...%lu.%.../...
  409ba8:	6f4b 616d 736c 6e69 6867 4320 6f68 6475     Komalsingh Choud
  409bb8:	6168 7972 0000 0000 0043 0000               hary....C...

00409bc4 <_global_impure_ptr>:
  409bc4:	0440 2000                                   @.. 

00409bc8 <zeroes.6763>:
  409bc8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  409bd8:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  409be8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  409bf8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  409c08:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  409c18:	0030 0000                                   0...

00409c1c <blanks.6762>:
  409c1c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409c2c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  409c3c:	4f50 4953 0058 0000 002e 0000               POSIX.......

00409c48 <__mprec_tens>:
  409c48:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409c58:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409c68:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409c78:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409c88:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409c98:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409ca8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409cb8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409cc8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409cd8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409ce8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409cf8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409d08:	9db4 79d9 7843 44ea                         ...yCx.D

00409d10 <__mprec_bigtens>:
  409d10:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409d20:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409d30:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409d38 <p05.5269>:
  409d38:	0005 0000 0019 0000 007d 0000               ........}...

00409d44 <_init>:
  409d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d46:	bf00      	nop
  409d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d4a:	bc08      	pop	{r3}
  409d4c:	469e      	mov	lr, r3
  409d4e:	4770      	bx	lr

00409d50 <__init_array_start>:
  409d50:	00406771 	.word	0x00406771

00409d54 <__frame_dummy_init_array_entry>:
  409d54:	004000f1                                ..@.

00409d58 <_fini>:
  409d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d5a:	bf00      	nop
  409d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d5e:	bc08      	pop	{r3}
  409d60:	469e      	mov	lr, r3
  409d62:	4770      	bx	lr

00409d64 <__fini_array_start>:
  409d64:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <Font08px_58>:
2000000c:	4401 0000                                   .D..

20000010 <Font08px_59>:
20000010:	c401 0000                                   ....

20000014 <Font08px_UY>:
20000014:	0605 f008 0608 0000                         ........

2000001c <Font08px_91>:
2000001c:	fe03 8282                                   ....

20000020 <Font08px_92>:
20000020:	0603 c038                                   ..8.

20000024 <Font08px_93>:
20000024:	8203 fe82                                   ....

20000028 <Font08px_94>:
20000028:	0403 0402                                   ....

2000002c <Font08px_95>:
2000002c:	8003 8080                                   ....

20000030 <Font08px_96>:
20000030:	0202 0004                                   ....

20000034 <font_table>:
20000034:	0244 2000 0248 2000 024c 2000 0250 2000     D.. H.. L.. P.. 
20000044:	0258 2000 0260 2000 0268 2000 0270 2000     X.. `.. h.. p.. 
20000054:	0334 2000 0338 2000 033c 2000 0340 2000     4.. 8.. <.. @.. 
20000064:	0344 2000 0348 2000 034c 2000 0350 2000     D.. H.. L.. P.. 
20000074:	02e4 2000 02ec 2000 02f4 2000 02fc 2000     ... ... ... ... 
20000084:	01b0 2000 030c 2000 0234 2000 01b8 2000     ... ... 4.. ... 
20000094:	0324 2000 01c0 2000 000c 2000 0010 2000     $.. ... ... ... 
200000a4:	01c8 2000 01d0 2000 01d8 2000 01e0 2000     ... ... ... ... 
200000b4:	01e8 2000 0274 2000 027c 2000 0284 2000     ... t.. |.. ... 
200000c4:	01f4 2000 01fc 2000 0204 2000 020c 2000     ... ... ... ... 
200000d4:	02a0 2000 02a8 2000 02ac 2000 02b4 2000     ... ... ... ... 
200000e4:	02bc 2000 02c4 2000 02cc 2000 02d4 2000     ... ... ... ... 
200000f4:	02dc 2000 0214 2000 021c 2000 0224 2000     ... ... ... $.. 
20000104:	022c 2000 0304 2000 023c 2000 0314 2000     ,.. ... <.. ... 
20000114:	031c 2000 0014 2000 032c 2000 001c 2000     ... ... ,.. ... 
20000124:	0020 2000 0024 2000 0028 2000 002c 2000      .. $.. (.. ,.. 
20000134:	0030 2000 0354 2000 035c 2000 0364 2000     0.. T.. \.. d.. 
20000144:	036c 2000 0374 2000 037c 2000 0380 2000     l.. t.. |.. ... 
20000154:	0388 2000 0390 2000 0394 2000 0398 2000     ... ... ... ... 
20000164:	03a0 2000 03a4 2000 03ac 2000 03b4 2000     ... ... ... ... 
20000174:	03bc 2000 03c4 2000 03cc 2000 03d0 2000     ... ... ... ... 
20000184:	03d8 2000 03dc 2000 03e4 2000 03ec 2000     ... ... ... ... 
20000194:	03f4 2000 03fc 2000 0404 2000 028c 2000     ... ... ... ... 
200001a4:	0290 2000 0294 2000 0298 2000               ... ... ... 

200001b0 <Font08px_N4>:
200001b0:	3005 2428 20fe 0000                         .0($. ..

200001b8 <Font08px_N7>:
200001b8:	0205 f202 060a 0000                         ........

200001c0 <Font08px_N9>:
200001c0:	4c05 9292 7c92 0000                         .L...|..

200001c8 <Font08px_60>:
200001c8:	1004 4428 0082 0000                         ..(D....

200001d0 <Font08px_61>:
200001d0:	2804 2828 0028 0000                         .((((...

200001d8 <Font08px_62>:
200001d8:	8204 2844 0010 0000                         ..D(....

200001e0 <Font08px_63>:
200001e0:	0405 a202 0c12 0000                         ........

200001e8 <Font08px_64>:
200001e8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200001f4 <Font08px_UD>:
200001f4:	fe04 8282 007c 0000                         ....|...

200001fc <Font08px_UE>:
200001fc:	fe04 9292 0082 0000                         ........

20000204 <Font08px_UF>:
20000204:	fe04 1212 0002 0000                         ........

2000020c <Font08px_UG>:
2000020c:	7c05 9282 f492 0000                         .|......

20000214 <Font08px_UQ>:
20000214:	7c05 a282 bc42 0000                         .|..B...

2000021c <Font08px_UR>:
2000021c:	fe04 3212 00cc 0000                         ...2....

20000224 <Font08px_US>:
20000224:	4c04 9292 0064 0000                         .L..d...

2000022c <Font08px_UT>:
2000022c:	0205 fe02 0202 0000                         ........

20000234 <Font08px_N6>:
20000234:	7c05 9292 6492 0000                         .|...d..

2000023c <Font08px_UV>:
2000023c:	0e05 c030 0e30 0000                         ..0.0...

20000244 <Font08px_32>:
20000244:	0002 0000                                   ....

20000248 <Font08px_33>:
20000248:	be01 0000                                   ....

2000024c <Font08px_34>:
2000024c:	0603 0600                                   ....

20000250 <Font08px_35>:
20000250:	2805 28fe 28fe 0000                         .(.(.(..

20000258 <Font08px_36>:
20000258:	4805 fe54 2454 0000                         .HT.T$..

20000260 <Font08px_37>:
20000260:	4605 1026 c4c8 0000                         .F&.....

20000268 <Font08px_38>:
20000268:	6c05 ac92 a040 0000                         .l..@...

20000270 <Font08px_39>:
20000270:	0601 0000                                   ....

20000274 <Font08px_UA>:
20000274:	f805 1214 f814 0000                         ........

2000027c <Font08px_UB>:
2000027c:	fe04 9292 006c 0000                         ....l...

20000284 <Font08px_UC>:
20000284:	7c04 8282 0044 0000                         .|..D...

2000028c <Font08px_123>:
2000028c:	1003 826c                                   ..l.

20000290 <Font08px_124>:
20000290:	fe01 0000                                   ....

20000294 <Font08px_125>:
20000294:	8203 106c                                   ..l.

20000298 <Font08px_126>:
20000298:	1005 1008 1020 0000                         .... ...

200002a0 <Font08px_UH>:
200002a0:	fe04 1010 00fe 0000                         ........

200002a8 <Font08px_UI>:
200002a8:	8203 82fe                                   ....

200002ac <Font08px_UJ>:
200002ac:	4004 8080 007e 0000                         .@..~...

200002b4 <Font08px_UK>:
200002b4:	fe05 2810 8244 0000                         ...(D...

200002bc <Font08px_UL>:
200002bc:	fe04 8080 0080 0000                         ........

200002c4 <Font08px_UM>:
200002c4:	fe05 0804 fe04 0000                         ........

200002cc <Font08px_UN>:
200002cc:	fe05 1804 fe60 0000                         ....`...

200002d4 <Font08px_UO>:
200002d4:	7c04 8282 007c 0000                         .|..|...

200002dc <Font08px_UP>:
200002dc:	fe04 1212 000c 0000                         ........

200002e4 <Font08px_N0>:
200002e4:	7c05 92a2 7c8a 0000                         .|...|..

200002ec <Font08px_N1>:
200002ec:	0005 fe84 0080 0000                         ........

200002f4 <Font08px_N2>:
200002f4:	8405 a2c2 8c92 0000                         ........

200002fc <Font08px_N3>:
200002fc:	4405 9282 6c92 0000                         .D...l..

20000304 <Font08px_UU>:
20000304:	7e04 8080 007e 0000                         .~..~...

2000030c <Font08px_N5>:
2000030c:	5e05 8a8a 728a 0000                         .^...r..

20000314 <Font08px_UW>:
20000314:	3e05 38c0 3ec0 0000                         .>.8.>..

2000031c <Font08px_UX>:
2000031c:	c605 1028 c628 0000                         ..(.(...

20000324 <Font08px_N8>:
20000324:	6c05 9292 6c92 0000                         .l...l..

2000032c <Font08px_UZ>:
2000032c:	c205 92a2 868a 0000                         ........

20000334 <Font08px_40>:
20000334:	3803 8244                                   .8D.

20000338 <Font08px_41>:
20000338:	8203 3844                                   ..D8

2000033c <Font08px_42>:
2000033c:	2803 2810                                   .(.(

20000340 <Font08px_43>:
20000340:	1003 1038                                   ..8.

20000344 <Font08px_44>:
20000344:	c001 0000                                   ....

20000348 <Font08px_45>:
20000348:	1003 1010                                   ....

2000034c <Font08px_46>:
2000034c:	8001 0000                                   ....

20000350 <Font08px_47>:
20000350:	c003 0638                                   ..8.

20000354 <Font08px_la>:
20000354:	7004 8888 00f8 0000                         .p......

2000035c <Font08px_lb>:
2000035c:	fe04 8888 0070 0000                         ....p...

20000364 <Font08px_lc>:
20000364:	7004 8888 0088 0000                         .p......

2000036c <Font08px_ld>:
2000036c:	7004 8888 00fe 0000                         .p......

20000374 <Font08px_le>:
20000374:	7004 a8a8 0030 0000                         .p..0...

2000037c <Font08px_lf>:
2000037c:	fc03 0212                                   ....

20000380 <Font08px_lg>:
20000380:	1004 a8a8 0078 0000                         ....x...

20000388 <Font08px_lh>:
20000388:	fe04 0810 00f0 0000                         ........

20000390 <Font08px_li>:
20000390:	fa01 0000                                   ....

20000394 <Font08px_lj>:
20000394:	8002 007a                                   ..z.

20000398 <Font08px_lk>:
20000398:	fe04 5020 0088 0000                         .. P....

200003a0 <Font08px_ll>:
200003a0:	fe01 0000                                   ....

200003a4 <Font08px_lm>:
200003a4:	f805 f008 f008 0000                         ........

200003ac <Font08px_ln>:
200003ac:	f804 0810 00f0 0000                         ........

200003b4 <Font08px_lo>:
200003b4:	7004 8888 0070 0000                         .p..p...

200003bc <Font08px_lp>:
200003bc:	f804 2828 0010 0000                         ..((....

200003c4 <Font08px_lq>:
200003c4:	1004 2828 00f8 0000                         ..((....

200003cc <Font08px_lr>:
200003cc:	f803 0810                                   ....

200003d0 <Font08px_ls>:
200003d0:	9004 a8a8 0048 0000                         ....H...

200003d8 <Font08px_lt>:
200003d8:	0803 887c                                   ..|.

200003dc <Font08px_lu>:
200003dc:	7804 8080 00f8 0000                         .x......

200003e4 <Font08px_lv>:
200003e4:	1805 8060 1860 0000                         ..`.`...

200003ec <Font08px_lw>:
200003ec:	3805 30c0 38c0 0000                         .8.0.8..

200003f4 <Font08px_lx>:
200003f4:	8805 2050 8850 0000                         ..P P...

200003fc <Font08px_ly>:
200003fc:	1804 a0a0 0078 0000                         ....x...

20000404 <Font08px_lz>:
20000404:	c803 98a8                                   ....

20000408 <sd_mmc_cards>:
	...
20000410:	004c 0000 0000 0000 0000 0000 0000 0000     L...............
	...

2000042c <sd_mmc_spi_devices>:
2000042c:	0001 0000                                   ....

20000430 <SystemCoreClock>:
20000430:	0900 003d                                   ..=.

20000434 <app_mode>:
20000434:	0002 0000                                   ....

20000438 <app_mode_switch>:
20000438:	0001 0000 0000 0000                         ........

20000440 <impure_data>:
20000440:	0000 0000 072c 2000 0794 2000 07fc 2000     ....,.. ... ... 
	...
20000474:	9bc0 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200004e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200004f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000868 <_impure_ptr>:
20000868:	0440 2000                                   @.. 

2000086c <lconv>:
2000086c:	9c44 0040 9a64 0040 9a64 0040 9a64 0040     D.@.d.@.d.@.d.@.
2000087c:	9a64 0040 9a64 0040 9a64 0040 9a64 0040     d.@.d.@.d.@.d.@.
2000088c:	9a64 0040 9a64 0040 ffff ffff ffff ffff     d.@.d.@.........
2000089c:	ffff ffff ffff 0000                         ........

200008a4 <__malloc_av_>:
	...
200008ac:	08a4 2000 08a4 2000 08ac 2000 08ac 2000     ... ... ... ... 
200008bc:	08b4 2000 08b4 2000 08bc 2000 08bc 2000     ... ... ... ... 
200008cc:	08c4 2000 08c4 2000 08cc 2000 08cc 2000     ... ... ... ... 
200008dc:	08d4 2000 08d4 2000 08dc 2000 08dc 2000     ... ... ... ... 
200008ec:	08e4 2000 08e4 2000 08ec 2000 08ec 2000     ... ... ... ... 
200008fc:	08f4 2000 08f4 2000 08fc 2000 08fc 2000     ... ... ... ... 
2000090c:	0904 2000 0904 2000 090c 2000 090c 2000     ... ... ... ... 
2000091c:	0914 2000 0914 2000 091c 2000 091c 2000     ... ... ... ... 
2000092c:	0924 2000 0924 2000 092c 2000 092c 2000     $.. $.. ,.. ,.. 
2000093c:	0934 2000 0934 2000 093c 2000 093c 2000     4.. 4.. <.. <.. 
2000094c:	0944 2000 0944 2000 094c 2000 094c 2000     D.. D.. L.. L.. 
2000095c:	0954 2000 0954 2000 095c 2000 095c 2000     T.. T.. \.. \.. 
2000096c:	0964 2000 0964 2000 096c 2000 096c 2000     d.. d.. l.. l.. 
2000097c:	0974 2000 0974 2000 097c 2000 097c 2000     t.. t.. |.. |.. 
2000098c:	0984 2000 0984 2000 098c 2000 098c 2000     ... ... ... ... 
2000099c:	0994 2000 0994 2000 099c 2000 099c 2000     ... ... ... ... 
200009ac:	09a4 2000 09a4 2000 09ac 2000 09ac 2000     ... ... ... ... 
200009bc:	09b4 2000 09b4 2000 09bc 2000 09bc 2000     ... ... ... ... 
200009cc:	09c4 2000 09c4 2000 09cc 2000 09cc 2000     ... ... ... ... 
200009dc:	09d4 2000 09d4 2000 09dc 2000 09dc 2000     ... ... ... ... 
200009ec:	09e4 2000 09e4 2000 09ec 2000 09ec 2000     ... ... ... ... 
200009fc:	09f4 2000 09f4 2000 09fc 2000 09fc 2000     ... ... ... ... 
20000a0c:	0a04 2000 0a04 2000 0a0c 2000 0a0c 2000     ... ... ... ... 
20000a1c:	0a14 2000 0a14 2000 0a1c 2000 0a1c 2000     ... ... ... ... 
20000a2c:	0a24 2000 0a24 2000 0a2c 2000 0a2c 2000     $.. $.. ,.. ,.. 
20000a3c:	0a34 2000 0a34 2000 0a3c 2000 0a3c 2000     4.. 4.. <.. <.. 
20000a4c:	0a44 2000 0a44 2000 0a4c 2000 0a4c 2000     D.. D.. L.. L.. 
20000a5c:	0a54 2000 0a54 2000 0a5c 2000 0a5c 2000     T.. T.. \.. \.. 
20000a6c:	0a64 2000 0a64 2000 0a6c 2000 0a6c 2000     d.. d.. l.. l.. 
20000a7c:	0a74 2000 0a74 2000 0a7c 2000 0a7c 2000     t.. t.. |.. |.. 
20000a8c:	0a84 2000 0a84 2000 0a8c 2000 0a8c 2000     ... ... ... ... 
20000a9c:	0a94 2000 0a94 2000 0a9c 2000 0a9c 2000     ... ... ... ... 
20000aac:	0aa4 2000 0aa4 2000 0aac 2000 0aac 2000     ... ... ... ... 
20000abc:	0ab4 2000 0ab4 2000 0abc 2000 0abc 2000     ... ... ... ... 
20000acc:	0ac4 2000 0ac4 2000 0acc 2000 0acc 2000     ... ... ... ... 
20000adc:	0ad4 2000 0ad4 2000 0adc 2000 0adc 2000     ... ... ... ... 
20000aec:	0ae4 2000 0ae4 2000 0aec 2000 0aec 2000     ... ... ... ... 
20000afc:	0af4 2000 0af4 2000 0afc 2000 0afc 2000     ... ... ... ... 
20000b0c:	0b04 2000 0b04 2000 0b0c 2000 0b0c 2000     ... ... ... ... 
20000b1c:	0b14 2000 0b14 2000 0b1c 2000 0b1c 2000     ... ... ... ... 
20000b2c:	0b24 2000 0b24 2000 0b2c 2000 0b2c 2000     $.. $.. ,.. ,.. 
20000b3c:	0b34 2000 0b34 2000 0b3c 2000 0b3c 2000     4.. 4.. <.. <.. 
20000b4c:	0b44 2000 0b44 2000 0b4c 2000 0b4c 2000     D.. D.. L.. L.. 
20000b5c:	0b54 2000 0b54 2000 0b5c 2000 0b5c 2000     T.. T.. \.. \.. 
20000b6c:	0b64 2000 0b64 2000 0b6c 2000 0b6c 2000     d.. d.. l.. l.. 
20000b7c:	0b74 2000 0b74 2000 0b7c 2000 0b7c 2000     t.. t.. |.. |.. 
20000b8c:	0b84 2000 0b84 2000 0b8c 2000 0b8c 2000     ... ... ... ... 
20000b9c:	0b94 2000 0b94 2000 0b9c 2000 0b9c 2000     ... ... ... ... 
20000bac:	0ba4 2000 0ba4 2000 0bac 2000 0bac 2000     ... ... ... ... 
20000bbc:	0bb4 2000 0bb4 2000 0bbc 2000 0bbc 2000     ... ... ... ... 
20000bcc:	0bc4 2000 0bc4 2000 0bcc 2000 0bcc 2000     ... ... ... ... 
20000bdc:	0bd4 2000 0bd4 2000 0bdc 2000 0bdc 2000     ... ... ... ... 
20000bec:	0be4 2000 0be4 2000 0bec 2000 0bec 2000     ... ... ... ... 
20000bfc:	0bf4 2000 0bf4 2000 0bfc 2000 0bfc 2000     ... ... ... ... 
20000c0c:	0c04 2000 0c04 2000 0c0c 2000 0c0c 2000     ... ... ... ... 
20000c1c:	0c14 2000 0c14 2000 0c1c 2000 0c1c 2000     ... ... ... ... 
20000c2c:	0c24 2000 0c24 2000 0c2c 2000 0c2c 2000     $.. $.. ,.. ,.. 
20000c3c:	0c34 2000 0c34 2000 0c3c 2000 0c3c 2000     4.. 4.. <.. <.. 
20000c4c:	0c44 2000 0c44 2000 0c4c 2000 0c4c 2000     D.. D.. L.. L.. 
20000c5c:	0c54 2000 0c54 2000 0c5c 2000 0c5c 2000     T.. T.. \.. \.. 
20000c6c:	0c64 2000 0c64 2000 0c6c 2000 0c6c 2000     d.. d.. l.. l.. 
20000c7c:	0c74 2000 0c74 2000 0c7c 2000 0c7c 2000     t.. t.. |.. |.. 
20000c8c:	0c84 2000 0c84 2000 0c8c 2000 0c8c 2000     ... ... ... ... 
20000c9c:	0c94 2000 0c94 2000 0c9c 2000 0c9c 2000     ... ... ... ... 

20000cac <__malloc_trim_threshold>:
20000cac:	0000 0002                                   ....

20000cb0 <__malloc_sbrk_base>:
20000cb0:	ffff ffff                                   ....
